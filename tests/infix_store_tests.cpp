/**
 * @file infix store tests
 * @author ---
 */

#include <random>
#include <utility>
#include <vector>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN

#include <doctest/doctest.h>
#include <cstdint>
#include <iomanip>
#include <iostream>

#include "diva.hpp"
#include "util.hpp"

const char ansi_green[] = "\033[0;32m";
const char ansi_white[] = "\033[0;97m";

class InfixStoreTests {
public:
    static void Allocation() {
        const uint32_t infix_size = 5;
        const uint32_t seed = 1;
        const float load_factor = 0.95;
        Diva<false> s(infix_size, seed, load_factor);
        Diva<false>::InfixStore store(s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep], s.infix_size_);

        const uint32_t total_words = (Diva<false>::infix_store_target_size 
                + (s.infix_size_ + 1) * s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep] + 63) / 64;
        for (int32_t i = 0; i < total_words; i++)
            REQUIRE_EQ(store.ptr[i], 0);
    }


    static void ShiftingSlots() {
        const uint32_t infix_size = 5;
        const uint32_t seed = 1;
        const float load_factor = 0.95;
        Diva<false> s(infix_size, seed, load_factor);
        Diva<false>::InfixStore store(s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep],
                                      s.infix_size_);

        const uint32_t total_slots = s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep];
        for (int32_t i = 0; i < total_slots; i++)
            s.SetSlot(store, i, i & BITMASK(s.infix_size_));
        for (int32_t i = 0; i < total_slots; i++)
            REQUIRE_EQ(s.GetSlot(store, i), (i & BITMASK(s.infix_size_)));

        SUBCASE("right shifting: short segment + short shift") {
            s.ShiftSlotsRight(store, 2, 4, 2);
            REQUIRE_EQ(s.GetSlot(store, 0), 0);
            REQUIRE_EQ(s.GetSlot(store, 1), 1);
            REQUIRE_EQ(s.GetSlot(store, 2), 0);
            REQUIRE_EQ(s.GetSlot(store, 3), 0);
            REQUIRE_EQ(s.GetSlot(store, 4), 2);
            REQUIRE_EQ(s.GetSlot(store, 5), 3);
            for (int32_t i = 6; i < total_slots; i++)
                REQUIRE_EQ(s.GetSlot(store, i), (i & BITMASK(s.infix_size_)));
        }

        SUBCASE("right shifting: long segment + short shift") {
            for (int32_t i = 0; i < total_slots; i++)
                s.SetSlot(store, i, i & BITMASK(s.infix_size_));
            s.ShiftSlotsRight(store, 1, 100, 2);
            for (int32_t i = 0; i < 3; i++)
                REQUIRE_EQ(s.GetSlot(store, i), 0);
            for (int32_t i = 1; i < 100; i++)
                REQUIRE_EQ(s.GetSlot(store, 2 + i), (i & BITMASK(s.infix_size_)));
            for (int32_t i = 102; i < total_slots; i++)
                REQUIRE_EQ(s.GetSlot(store, i), (i & BITMASK(s.infix_size_)));
        }

        SUBCASE("right shifting: short segment + long shift") {
            for (int32_t i = 0; i < total_slots; i++)
                s.SetSlot(store, i, i & BITMASK(s.infix_size_));
            s.ShiftSlotsRight(store, 3, 7, 150);
            REQUIRE_EQ(s.GetSlot(store, 0), 0);
            REQUIRE_EQ(s.GetSlot(store, 1), 1);
            REQUIRE_EQ(s.GetSlot(store, 2), 2);
            for (int32_t i = 3; i < 153; i++)
                REQUIRE_EQ(s.GetSlot(store, i), 0);
            REQUIRE_EQ(s.GetSlot(store, 153), 3);
            REQUIRE_EQ(s.GetSlot(store, 154), 4);
            REQUIRE_EQ(s.GetSlot(store, 155), 5);
            REQUIRE_EQ(s.GetSlot(store, 156), 6);
            for (int32_t i = 157; i < total_slots; i++)
                REQUIRE_EQ(s.GetSlot(store, i), (i & BITMASK(s.infix_size_)));
        }

        SUBCASE("right shifting: long segment + long shift") {
            for (int32_t i = 0; i < total_slots; i++)
                s.SetSlot(store, i, i & BITMASK(s.infix_size_));
            s.ShiftSlotsRight(store, 0, 110, 200);
            for (int32_t i = 0; i < 200; i++)
                REQUIRE_EQ(s.GetSlot(store, i), 0);
            for (int32_t i = 0; i < 110; i++)
                REQUIRE_EQ(s.GetSlot(store, i + 200), (i & BITMASK(s.infix_size_)));
            for (int32_t i = 310; i < total_slots; i++)
                REQUIRE_EQ(s.GetSlot(store, i), (i & BITMASK(s.infix_size_)));
        }

        SUBCASE("left shifting: short segment + short shift") {
            for (int32_t i = 0; i < total_slots; i++)
                s.SetSlot(store, i, i & BITMASK(s.infix_size_));
            s.ShiftSlotsLeft(store, total_slots - 10, total_slots, 2);
            REQUIRE_EQ(s.GetSlot(store, total_slots - 1), 0);
            REQUIRE_EQ(s.GetSlot(store, total_slots - 2), 0);
            for (int32_t i = total_slots - 10; i < total_slots; i++)
                REQUIRE_EQ(s.GetSlot(store, i - 2), (i & BITMASK(s.infix_size_)));
            for (int32_t i = 0; i < total_slots - 12; i++)
                REQUIRE_EQ(s.GetSlot(store, i), (i & BITMASK(s.infix_size_)));
        }

        SUBCASE("left shifting: short segment + long shift") {
            for (int32_t i = 0; i < total_slots; i++)
                s.SetSlot(store, i, i & BITMASK(s.infix_size_));
            s.ShiftSlotsLeft(store, total_slots - 15, total_slots - 2, 210);
            REQUIRE_EQ(s.GetSlot(store, total_slots - 1), ((total_slots - 1) & BITMASK(s.infix_size_)));
            REQUIRE_EQ(s.GetSlot(store, total_slots - 2), ((total_slots - 2) & BITMASK(s.infix_size_)));
            for (int32_t i = total_slots - 212; i < total_slots - 2; i++)
                REQUIRE_EQ(s.GetSlot(store, i), 0);
            for (int32_t i = total_slots - 15; i < total_slots - 2; i++)
                REQUIRE_EQ(s.GetSlot(store, i - 210), (i & BITMASK(s.infix_size_)));
            for (int32_t i = 0; i < total_slots - 225; i++)
                REQUIRE_EQ(s.GetSlot(store, i), (i & BITMASK(s.infix_size_)));
        }

        SUBCASE("left shifting: long segment + short shift") {
            for (int32_t i = 0; i < total_slots; i++)
                s.SetSlot(store, i, i & BITMASK(s.infix_size_));
            s.ShiftSlotsLeft(store, total_slots - 250, total_slots - 1, 1);
            REQUIRE_EQ(s.GetSlot(store, total_slots - 1), ((total_slots - 1) & BITMASK(s.infix_size_)));
            REQUIRE_EQ(s.GetSlot(store, total_slots - 2), 0);
            for (int32_t i = total_slots - 250; i < total_slots - 1; i++)
                REQUIRE_EQ(s.GetSlot(store, i - 1), (i & BITMASK(s.infix_size_)));
            for (int32_t i = 0; i < total_slots - 251; i++)
                REQUIRE_EQ(s.GetSlot(store, i), (i & BITMASK(s.infix_size_)));
        }

        SUBCASE("left shifting: long segment + long shift") {
            for (int32_t i = 0; i < total_slots; i++)
                s.SetSlot(store, i, i & BITMASK(s.infix_size_));
            s.ShiftSlotsLeft(store, total_slots - 100, total_slots - 1, 200);
            REQUIRE_EQ(s.GetSlot(store, total_slots - 1), ((total_slots - 1) & BITMASK(s.infix_size_)));
            for (int32_t i = total_slots - 201; i < total_slots - 1; i++)
                REQUIRE_EQ(s.GetSlot(store, i), 0);
            for (int32_t i = total_slots - 100; i < total_slots - 1; i++)
                REQUIRE_EQ(s.GetSlot(store, i - 200), (i & BITMASK(s.infix_size_)));
            for (int32_t i = 0; i < total_slots - 300; i++)
                REQUIRE_EQ(s.GetSlot(store, i), (i & BITMASK(s.infix_size_)));
        }
    }


    static void ShiftingRunends() {
        const uint32_t infix_size = 5;
        const uint32_t seed = 1;
        const float load_factor = 0.95;
        Diva<false> s(infix_size, seed, load_factor);
        Diva<false>::InfixStore store(s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep], s.infix_size_);

        uint64_t *runends = store.ptr + 1 + Diva<false>::infix_store_target_size / 64;
        runends[0] = 0b1000100010001000100010001000100010001000100010001000100010001000;
        runends[1] = 0b0101010101010101010101010101010101010101010101010101010101010101;
        runends[2] = 0b1010101010101010101010101010101010101010101010101010101010101010;
        runends[3] = 0b1111111111111111111111111111111100000000000000000000000000000000;

        SUBCASE("right shifting: short segment + short shift") {
            s.ShiftRunendsRight(store, 62, 65, 5);
            REQUIRE_EQ(runends[0], 0b0000100010001000100010001000100010001000100010001000100010001000);
            REQUIRE_EQ(runends[1], 0b0101010101010101010101010101010101010101010101010101010101110000);
            REQUIRE_EQ(runends[2], 0b1010101010101010101010101010101010101010101010101010101010101010);
            REQUIRE_EQ(runends[3], 0b1111111111111111111111111111111100000000000000000000000000000000);
        }

        SUBCASE("right shifting: short segment + long shift") {
            s.ShiftRunendsRight(store, 60, 64, 125);
            REQUIRE_EQ(runends[0], 0b0000100010001000100010001000100010001000100010001000100010001000);
            REQUIRE_EQ(runends[1], 0b0000000000000000000000000000000000000000000000000000000000000000);
            REQUIRE_EQ(runends[2], 0b1011000000000000000000000000000000000000000000000000000000000000);
            REQUIRE_EQ(runends[3], 0b1111111111111111111111111111111100000000000000000000000000000000);
        }

        SUBCASE("right shifting: long segment + short shift") {
            s.ShiftRunendsRight(store, 1, 123, 3);
            REQUIRE_EQ(runends[0], 0b0100010001000100010001000100010001000100010001000100010001000000);
            REQUIRE_EQ(runends[1], 0b0110101010101010101010101010101010101010101010101010101010101100);
            REQUIRE_EQ(runends[2], 0b1010101010101010101010101010101010101010101010101010101010101010);
            REQUIRE_EQ(runends[3], 0b1111111111111111111111111111111100000000000000000000000000000000);
        }

        SUBCASE("right shifting: long segment + long shift") {
            s.ShiftRunendsRight(store, 2, 127, 100);
            REQUIRE_EQ(runends[0], 0b0000000000000000000000000000000000000000000000000000000000000000);
            REQUIRE_EQ(runends[1], 0b1000100010001000100010001000000000000000000000000000000000000000);
            REQUIRE_EQ(runends[2], 0b0101010101010101010101010101100010001000100010001000100010001000);
            REQUIRE_EQ(runends[3], 0b1111111111111111111111111111110101010101010101010101010101010101);
        }

        SUBCASE("left shifting: short segment + short shift") {
            s.ShiftRunendsLeft(store, 190, 194, 4);
            REQUIRE_EQ(runends[0], 0b1000100010001000100010001000100010001000100010001000100010001000);
            REQUIRE_EQ(runends[1], 0b0101010101010101010101010101010101010101010101010101010101010101);
            REQUIRE_EQ(runends[2], 0b0000101010101010101010101010101010101010101010101010101010101010);
            REQUIRE_EQ(runends[3], 0b1111111111111111111111111111111100000000000000000000000000000000);
        }

        SUBCASE("left shifting: short segment + long shift") {
            s.ShiftRunendsLeft(store, 190, 194, 130);
            REQUIRE_EQ(runends[0], 0b0010100010001000100010001000100010001000100010001000100010001000);
            REQUIRE_EQ(runends[1], 0b0000000000000000000000000000000000000000000000000000000000000000);
            REQUIRE_EQ(runends[2], 0b0000000000000000000000000000000000000000000000000000000000000000);
            REQUIRE_EQ(runends[3], 0b1111111111111111111111111111111100000000000000000000000000000000);
        }

        SUBCASE("left shifting: long segment + short shift") {
            s.ShiftRunendsLeft(store, 120, 250, 3);
            REQUIRE_EQ(runends[0], 0b1000100010001000100010001000100010001000100010001000100010001000);
            REQUIRE_EQ(runends[1], 0b0100101010110101010101010101010101010101010101010101010101010101);
            REQUIRE_EQ(runends[2], 0b0001010101010101010101010101010101010101010101010101010101010101);
            REQUIRE_EQ(runends[3], 0b1111110001111111111111111111111111100000000000000000000000000000);
        }

        SUBCASE("left shifting: long segment + long shift") {
            s.ShiftRunendsLeft(store, 120, 250, 100);
            REQUIRE_EQ(runends[0], 0b1010101010101010101010101010101010100101010110001000100010001000);
            REQUIRE_EQ(runends[1], 0b1111000000000000000000000000000000001010101010101010101010101010);
            REQUIRE_EQ(runends[2], 0b0000000000000000000000000000000000000000001111111111111111111111);
            REQUIRE_EQ(runends[3], 0b1111110000000000000000000000000000000000000000000000000000000000);
        }
    }

    static void InsertRaw() {
        const uint32_t infix_size = 5;
        const uint32_t seed = 1;
        const float load_factor = 0.95;
        Diva<false> s(infix_size, seed, load_factor);
        Diva<false>::InfixStore store(s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep], s.infix_size_);
        uint64_t *runends = store.ptr + 1 + Diva<false>::infix_store_target_size / 64;
        uint64_t inserts[100];

        inserts[0] = 0b0100000000001100;
        inserts[1] = 0b0100000000001011;
        inserts[2] = 0b0100000000001101;
        inserts[3] = 0b0100000000001110;
        s.InsertRawIntoInfixStore(store, inserts[0]);
        s.InsertRawIntoInfixStore(store, inserts[2]);
        s.InsertRawIntoInfixStore(store, inserts[1]);
        s.InsertRawIntoInfixStore(store, inserts[3]);
        SUBCASE("insertion and shifting of a single run") {
            for (int32_t i = 0; i < 4; i++)
                REQUIRE_EQ(s.GetSlot(store, 538 + i), (inserts[i] & BITMASK(infix_size)));
            for (int32_t i = 538; i < 541; i++)
                REQUIRE_EQ(get_bitmap_bit(runends, i), 0);
            REQUIRE_EQ(get_bitmap_bit(runends, 541), 1);
        }

        inserts[4] = 0b0011111111100001;
        inserts[5] = 0b0011111111100010;
        inserts[6] = 0b0011111111100100;
        inserts[7] = 0b0011111111100011;
        s.InsertRawIntoInfixStore(store, inserts[4]);
        s.InsertRawIntoInfixStore(store, inserts[5]);
        s.InsertRawIntoInfixStore(store, inserts[6]);
        s.InsertRawIntoInfixStore(store, inserts[7]);
        SUBCASE("insertion and shifting of a new run that shifts an old run") {
            for (int32_t i = 537; i < 540; i++) { 
                REQUIRE_EQ(s.GetSlot(store, i), (inserts[i - 537 + 4] & BITMASK(infix_size)));
                REQUIRE_EQ(get_bitmap_bit(runends, i), 0);
            }
            REQUIRE_EQ(s.GetSlot(store, 540), (inserts[7] & BITMASK(infix_size)));
            REQUIRE_EQ(get_bitmap_bit(runends, 540), 1);
            for (int32_t i = 541; i < 544; i++) { 
                REQUIRE_EQ(s.GetSlot(store, i), (inserts[i - 541] & BITMASK(infix_size)));
                REQUIRE_EQ(get_bitmap_bit(runends, i), 0);
            }
            REQUIRE_EQ(s.GetSlot(store, 544), (inserts[3] & BITMASK(infix_size)));
            REQUIRE_EQ(get_bitmap_bit(runends, 544), 1);
        }

        inserts[0] = 0b0000000000000001;
        inserts[1] = 0b0000000000000001;
        inserts[2] = 0b0000000000000010;
        inserts[3] = 0b0000000000000011;
        s.InsertRawIntoInfixStore(store, inserts[0]);
        s.InsertRawIntoInfixStore(store, inserts[3]);
        s.InsertRawIntoInfixStore(store, inserts[1]);
        s.InsertRawIntoInfixStore(store, inserts[2]);
        SUBCASE("insertion and shifting at the very beginning of the array") {
            for (int32_t i = 0; i < 3; i++) {
                REQUIRE_EQ(s.GetSlot(store, i), (inserts[i] & BITMASK(infix_size)));
                REQUIRE_EQ(get_bitmap_bit(runends, i), 0);
            }
            REQUIRE_EQ(s.GetSlot(store, 3), (inserts[3] & BITMASK(infix_size)));
            REQUIRE_EQ(get_bitmap_bit(runends, 3), 1);
        }

        SUBCASE("inserting new runs in between two touching runs: 0 slots added") {
            REQUIRE_EQ(s.GetSlot(store, 4), 0b00000);
            REQUIRE_EQ(get_bitmap_bit(runends, 4), 0);
            REQUIRE_EQ(s.GetSlot(store, 5), 0b00000);
            REQUIRE_EQ(get_bitmap_bit(runends, 5), 0);
        }

        inserts[5] = 0b0000000001111111;
        s.InsertRawIntoInfixStore(store, inserts[5]);
        SUBCASE("inserting new runs in between two touching runs: 1 slots added") {
            REQUIRE_EQ(s.GetSlot(store, 4), (inserts[5] & BITMASK(infix_size)));
            REQUIRE_EQ(get_bitmap_bit(runends, 4), 1);
            REQUIRE_EQ(s.GetSlot(store, 5), 0b00000);
            REQUIRE_EQ(get_bitmap_bit(runends, 5), 0);
        }

        inserts[4] = 0b0000000000110101;
        s.InsertRawIntoInfixStore(store, inserts[4]);
        SUBCASE("inserting new runs in between two touching runs: 2 slots added") {
            REQUIRE_EQ(s.GetSlot(store, 4), (inserts[4] & BITMASK(infix_size)));
            REQUIRE_EQ(get_bitmap_bit(runends, 4), 1);
            REQUIRE_EQ(s.GetSlot(store, 5), (inserts[5] & BITMASK(infix_size)));
            REQUIRE_EQ(get_bitmap_bit(runends, 5), 1);
        }

        inserts[0] = 0b0111111110100001;
        inserts[1] = 0b0111111110100010;
        inserts[2] = 0b0111111110100011;
        inserts[3] = 0b0111111110100111;
        inserts[4] = 0b0111111111100001;
        inserts[5] = 0b0111111111100001;
        inserts[6] = 0b0111111111100010;
        s.InsertRawIntoInfixStore(store, inserts[0]);
        s.InsertRawIntoInfixStore(store, inserts[4]);
        s.InsertRawIntoInfixStore(store, inserts[5]);
        s.InsertRawIntoInfixStore(store, inserts[1]);
        s.InsertRawIntoInfixStore(store, inserts[6]);
        s.InsertRawIntoInfixStore(store, inserts[2]);
        s.InsertRawIntoInfixStore(store, inserts[3]);
        SUBCASE("insertion and shifting at the very end of the array") {
            for (int32_t i = 1070; i < 1073; i++) {
                REQUIRE_EQ(s.GetSlot(store, i), (inserts[i - 1070] & BITMASK(infix_size)));
                REQUIRE_EQ(get_bitmap_bit(runends, i), 0);
            }
            REQUIRE_EQ(s.GetSlot(store, 1073), (inserts[3] & BITMASK(infix_size)));
            REQUIRE_EQ(get_bitmap_bit(runends, 1073), 1);
            for (int32_t i = 1074; i < 1076; i++) {
                REQUIRE_EQ(s.GetSlot(store, i), (inserts[i - 1074 + 4] & BITMASK(infix_size)));
                REQUIRE_EQ(get_bitmap_bit(runends, i), 0);
            }
            REQUIRE_EQ(s.GetSlot(store, 1076), (inserts[6] & BITMASK(infix_size)));
            REQUIRE_EQ(get_bitmap_bit(runends, 1076), 1);
        }

        inserts[7] = 0b0111111111011101;
        inserts[8] = 0b0111111111011110;
        inserts[9] = 0b0111111111011111;
        s.InsertRawIntoInfixStore(store, inserts[9]);
        s.InsertRawIntoInfixStore(store, inserts[7]);
        s.InsertRawIntoInfixStore(store, inserts[8]);
        SUBCASE("insertion and shifting in between touching runs at the very end of the array") {
            for (int32_t i = 1067; i < 1070; i++) {
                REQUIRE_EQ(s.GetSlot(store, i), (inserts[i - 1067] & BITMASK(infix_size)));
                REQUIRE_EQ(get_bitmap_bit(runends, i), 0);
            }
            REQUIRE_EQ(s.GetSlot(store, 1070), (inserts[3] & BITMASK(infix_size)));
            REQUIRE_EQ(get_bitmap_bit(runends, 1070), 1);
            for (int32_t i = 1071; i < 1073; i++) {
                REQUIRE_EQ(s.GetSlot(store, i), (inserts[i - 1071 + 7] & BITMASK(infix_size)));
                REQUIRE_EQ(get_bitmap_bit(runends, i), 0);
            }
            REQUIRE_EQ(s.GetSlot(store, 1073), (inserts[9] & BITMASK(infix_size)));
            REQUIRE_EQ(get_bitmap_bit(runends, 1073), 1);
            for (int32_t i = 1074; i < 1076; i++) {
                REQUIRE_EQ(s.GetSlot(store, i), (inserts[i - 1074 + 4] & BITMASK(infix_size)));
                REQUIRE_EQ(get_bitmap_bit(runends, i), 0);
            }
            REQUIRE_EQ(s.GetSlot(store, 1076), (inserts[6] & BITMASK(infix_size)));
            REQUIRE_EQ(get_bitmap_bit(runends, 1076), 1);
        }
    }

    static void DeleteRaw() {
        const uint32_t infix_size = 5;
        const uint32_t seed = 1;
        const float load_factor = 0.95;
        Diva<false> s(infix_size, seed, load_factor);
        Diva<false>::InfixStore store(s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep], s.infix_size_);

        const uint32_t rng_seed = 20;
        std::mt19937_64 rng(rng_seed);

        std::vector<uint64_t> keys {0b000000010011000, 0b000000010010100,
            0b000000010010110, 0b000000010010101, 0b000000010011111,
            0b000000010110101, 0b000000010110111, 0b000000010111001,
            0b000000011111011, 0b000000100011011, 0b000000100011111,
            0b000000111100001, 0b000000111100011, 0b000000111100111,
            0b111111010000001, 0b111111101100101, 0b111111101100111,
            0b111111110011111, 0b111111110110101, 0b111111111011000,
            0b111111111010100, 0b111111111010110, 0b111111111010101,
            0b111111111011111, 0b111111111100001, 0b111111111100011};
        while (keys.size() < s.scaled_sizes_[store.GetSizeGrade() - 1]) {
            const uint64_t candidate = rng() & BITMASK(Diva<false>::base_implicit_size + infix_size);
            if (candidate & BITMASK(infix_size))
                keys.push_back(candidate);
        }
        std::sort(keys.begin(), keys.end(),
                [=](uint64_t a, uint64_t b) { return (a ^ (a & -a)) < (b ^ (b & -b)); });
        s.LoadListToInfixStore(store, keys.data(), keys.size());

        SUBCASE("single match, shift left") {
            s.DeleteRawFromInfixStore(store, 0b000000010011111);
            const std::vector<uint32_t> occupieds_pos = {0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 22, 24, 26, 28, 29, 31, 32, 34, 36, 38, 39, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 78, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 127, 131, 135, 136, 138, 143, 144, 145, 147, 148, 152, 153, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 177, 178, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 221, 224, 226, 227, 228, 231, 232, 233, 236, 237, 240, 241, 244, 246, 247, 248, 249, 252, 254, 256, 257, 258, 259, 263, 264, 265, 266, 269, 271, 274, 276, 278, 282, 283, 284, 287, 288, 289, 290, 291, 294, 296, 297, 300, 301, 302, 303, 307, 309, 311, 313, 314, 315, 316, 317, 320, 323, 324, 325, 326, 327, 328, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 366, 370, 372, 373, 374, 376, 379, 380, 381, 385, 386, 388, 391, 394, 396, 397, 403, 405, 408, 410, 412, 413, 416, 418, 420, 421, 422, 424, 426, 427, 430, 431, 432, 433, 434, 437, 438, 440, 443, 445, 446, 447, 450, 453, 454, 458, 460, 461, 462, 464, 465, 467, 468, 471, 472, 474, 476, 478, 481, 484, 485, 486, 487, 488, 489, 491, 493, 494, 497, 501, 503, 505, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 529, 530, 531, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 547, 549, 553, 554, 562, 563, 568, 569, 570, 572, 574, 579, 581, 582, 583, 584, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 600, 601, 602, 604, 606, 607, 610, 612, 613, 616, 617, 620, 621, 624, 625, 626, 627, 630, 631, 632, 634, 637, 639, 640, 642, 643, 644, 646, 649, 652, 653, 655, 656, 657, 659, 662, 664, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 722, 723, 725, 726, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 758, 761, 763, 764, 766, 767, 769, 770, 772, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 798, 801, 804, 805, 806, 808, 811, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 828, 829, 830, 831, 836, 838, 840, 841, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 859, 861, 862, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 891, 893, 894, 895, 898, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 946, 949, 950, 952, 955, 956, 957, 959, 960, 961, 962, 963, 964, 968, 971, 972, 973, 974, 975, 976, 979, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023};
            const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  0,0,0b00010},   {  1,1,0b00001},   {  2,0,0b00010},   {  3,0,0b01010},   {  4,1,0b11101},   {  5,0,0b01101},   {  6,0,0b10010},   {  7,0,0b10110},   {  8,1,0b11101},   {  9,0,0b10100},   { 10,0,0b11000},   { 11,0,0b10110},   { 12,1,0b10101},   { 13,0,0b10101},   { 14,0,0b10111},   { 15,1,0b11001},   { 16,0,0b00001},   { 17,1,0b11000},   { 18,0,0b11011},   { 19,1,0b11011},   { 20,0,0b00001},   { 21,0,0b11011},   { 22,0,0b11101},   { 23,1,0b11111},   { 24,1,0b01101},   { 25,0,0b10100},   { 26,1,0b10110},   { 27,1,0b11101},   { 28,0,0b01000},   { 29,0,0b00001},   { 30,0,0b00011},   { 31,1,0b00111},   { 32,0,0b01111},   { 33,1,0b11001},   { 34,1,0b01001},   { 35,1,0b00010},   { 36,0,0b10101},   { 37,1,0b11111},   { 38,1,0b10010},   { 39,0,0b01000},   { 40,0,0b00111},   { 41,1,0b10011},   { 42,0,0b10001},   { 43,1,0b11001},   { 44,1,0b01001},   { 45,1,0b11110},   { 46,1,0b00010},   { 47,1,0b01101},   { 48,1,0b10000},   { 49,0,0b01000},   { 50,1,0b00110},   { 51,0,0b10000},   { 52,0,0b10100},   { 53,1,0b11011},   { 54,1,0b00010},   { 55,1,0b11000},   { 56,1,0b11111},   { 57,1,0b11111},   { 58,1,0b00111},   { 59,0,0b01011},   { 60,1,0b01110},   { 61,1,0b01010},   { 62,0,0b00100},   { 63,0,0b01100},   { 64,1,0b01101},   { 65,0,0b00010},   { 66,1,0b10001},   { 67,0,0b01101},   { 68,1,0b11001},   { 69,1,0b11000},   { 70,0,0b00011},   { 71,1,0b01010},   { 72,1,0b11111},   { 73,1,0b00010},   { 74,0,0b01000},   { 75,1,0b11001},   { 76,1,0b01100},   { 77,1,0b01100},   { 78,1,0b10110},   { 79,1,0b11011},   { 80,0,0b10100},   { 81,0,0b10001},   { 82,1,0b10101},   { 83,1,0b00011},   { 84,1,0b10001},   { 85,1,0b10110},   { 86,0,0b10100},   { 87,0,0b10101},   { 88,1,0b11100},   { 89,1,0b01000},   { 90,1,0b00101},   { 91,1,0b11111},   { 92,1,0b10110},   { 93,0,0b01100},   { 94,0,0b10010},   { 95,0,0b11100},   { 96,1,0b11110},   { 97,0,0b10000},   { 98,1,0b01010},   { 99,1,0b01011},   {100,1,0b10110},   {101,0,0b00010},   {102,1,0b11000},   {103,1,0b01001},   {104,0,0b00010},   {105,0,0b10101},   {106,0,0b11100},   {107,1,0b11110},   {108,1,0b01010},   {109,1,0b11001},   {110,0,0b01100},   {111,1,0b11100},   {112,1,0b01000},   {113,1,0b01101},   {114,1,0b10110},   {115,1,0b10011},   {116,0,0b10011},   {117,1,0b11001},   {118,1,0b10000},   {119,0,0b00001},   {120,0,0b01011},   {121,1,0b11010},   {122,0,0b00100},   {123,0,0b00100},   {124,1,0b10011},   {125,1,0b00011},   {126,0,0b00011},   {127,1,0b00011},   {128,0,0b10101},   {129,1,0b11101},   {130,1,0b01001},   {131,1,0b11110},   {132,1,0b01010},   {133,1,0b00100},   {134,0,0b01001},   {135,1,0b01101},   {136,1,0b00110},   {137,0,0b01111},   {138,1,0b10010},   {139,1,0b11101},   {140,1,0b11111},   {141,0,0b01011},   {142,1,0b11001},   {143,0,0b00110},   {144,0,0b00111},   {145,0,0b10011},   {146,1,0b10101},   {147,1,0b11100},   {148,1,0b00001},   {149,0,0b01010},   {150,1,0b10110},   {151,1,0b10101},   {152,0,0b00100},   {153,1,0b01010},   {154,0,0b00110},   {155,0,0b01100},   {156,1,0b10111},   {157,1,0b11100},   {158,0,0b11011},   {159,1,0b11011},   {160,1,0b00001},   {161,0,0b01010},   {162,1,0b11110},   {163,1,0b11110},   {164,1,0b00110},   {165,1,0b11011},   {166,1,0b11011},   {167,1,0b10001},   {168,1,0b00101},   {169,1,0b00100},   {170,0,0b10110},   {171,1,0b11111},   {172,1,0b10001},   {173,1,0b11111},   {174,0,0b01000},   {175,1,0b01101},   {176,1,0b10101},   {177,0,0b01010},   {178,1,0b10101},   {179,1,0b01010},   {180,0,0b00001},   {181,1,0b01101},   {182,1,0b11110},   {183,0,0b01001},   {184,0,0b01111},   {185,1,0b10111},   {186,1,0b11110},   {187,1,0b00101},   {190,0,0b01110},   {191,0,0b10001},   {192,1,0b10111},   {193,1,0b11100},   {194,1,0b11010},   {195,0,0b10100},   {196,1,0b11110},   {197,0,0b01110},   {198,1,0b11001},   {199,1,0b01100},   {200,1,0b00100},   {201,0,0b01000},   {202,0,0b01011},   {203,1,0b10100},   {204,1,0b11111},   {205,1,0b00111},   {206,1,0b11111},   {207,1,0b10100},   {208,0,0b10011},   {209,1,0b11010},   {210,1,0b10100},   {211,1,0b10101},   {212,0,0b01110},   {213,1,0b11011},   {214,0,0b11011},   {215,1,0b11110},   {216,1,0b10100},   {217,1,0b00101},   {218,0,0b10100},   {219,0,0b10010},   {220,1,0b10101},   {221,0,0b10000},   {222,0,0b01100},   {223,0,0b01010},   {224,1,0b01001},   {225,1,0b10001},   {226,0,0b10000},   {227,1,0b10010},   {228,1,0b11101},   {229,1,0b10011},   {230,1,0b00001},   {231,1,0b11101},   {232,0,0b00111},   {233,1,0b10001},   {234,1,0b11011},   {235,0,0b00001},   {236,0,0b00110},   {237,0,0b01010},   {238,1,0b11100},   {239,0,0b10000},   {240,1,0b11100},   {241,0,0b01001},   {242,1,0b01011},   {243,1,0b11111},   {244,1,0b01101},   {245,1,0b01110},   {246,0,0b10011},   {247,1,0b10101},   {248,0,0b01110},   {249,1,0b10100},   {250,0,0b10000},   {251,0,0b10010},   {252,0,0b10100},   {253,1,0b10011},   {254,0,0b01011},   {255,1,0b10011},   {256,1,0b00101},   {257,1,0b10101},   {258,1,0b10100},   {259,1,0b10001},   {261,1,0b01100},   {262,1,0b11100},   {265,0,0b10000},   {266,1,0b10111},   {267,1,0b10111},   {269,0,0b00010},   {270,1,0b10110},   {271,1,0b00001},   {272,1,0b01111},   {273,0,0b00101},   {274,0,0b01001},   {275,0,0b10001},   {276,1,0b11111},   {277,1,0b10110},   {278,1,0b00011},   {279,0,0b00101},   {280,1,0b10010},   {281,0,0b00001},   {282,0,0b00111},   {283,1,0b00111},   {284,1,0b01100},   {285,0,0b00001},   {286,1,0b11011},   {288,0,0b01000},   {289,0,0b01111},   {290,1,0b10100},   {291,1,0b00001},   {292,0,0b00110},   {293,1,0b11001},   {296,0,0b01011},   {297,1,0b10100},   {298,0,0b01100},   {299,1,0b10100},   {300,0,0b01100},   {301,1,0b11111},   {302,1,0b11011},   {303,0,0b00111},   {304,0,0b01110},   {305,1,0b11101},   {306,0,0b00011},   {307,0,0b01110},   {308,1,0b10011},   {309,1,0b01011},   {310,0,0b01111},   {311,1,0b11011},   {312,0,0b01100},   {313,0,0b01001},   {314,1,0b10011},   {315,1,0b00101},   {316,0,0b01010},   {317,1,0b01100},   {318,0,0b01000},   {319,1,0b01101},   {320,1,0b00101},   {321,0,0b00101},   {322,1,0b01011},   {323,0,0b01001},   {324,1,0b11011},   {325,0,0b10000},   {326,1,0b10101},   {327,0,0b00100},   {328,1,0b01111},   {329,1,0b01001},   {330,0,0b10001},   {331,0,0b11010},   {332,1,0b11011},   {333,1,0b11010},   {334,0,0b01100},   {335,0,0b11000},   {336,1,0b10011},   {337,0,0b01111},   {338,1,0b11110},   {339,0,0b01100},   {340,0,0b10001},   {341,0,0b10011},   {342,0,0b10101},   {343,0,0b11011},   {344,1,0b11111},   {345,0,0b00111},   {346,1,0b01100},   {347,1,0b01001},   {348,0,0b10111},   {349,1,0b11011},   {350,1,0b01111},   {351,1,0b00101},   {352,0,0b00011},   {353,0,0b01001},   {354,1,0b11001},   {355,0,0b00001},   {356,1,0b01100},   {357,1,0b10000},   {358,1,0b11101},   {359,1,0b00001},   {360,0,0b01010},   {361,0,0b10011},   {362,1,0b11101},   {363,0,0b10100},   {364,1,0b11011},   {365,1,0b10110},   {366,1,0b01101},   {367,1,0b10010},   {368,1,0b01110},   {369,1,0b00110},   {370,0,0b01111},   {371,0,0b10110},   {372,0,0b10110},   {373,1,0b11011},   {374,0,0b01011},   {375,1,0b10101},   {376,0,0b10000},   {377,0,0b00111},   {378,1,0b11000},   {379,1,0b10001},   {380,0,0b01110},   {381,1,0b10010},   {382,0,0b10000},   {383,0,0b00011},   {384,1,0b10001},   {385,0,0b00111},   {386,0,0b11010},   {387,1,0b11001},   {388,0,0b00100},   {389,1,0b10101},   {390,1,0b01010},   {391,1,0b11010},   {392,1,0b00101},   {393,1,0b00111},   {394,0,0b01111},   {395,0,0b10100},   {396,0,0b10100},   {397,1,0b10011},   {398,1,0b10110},   {399,1,0b00100},   {400,0,0b11100},   {401,1,0b11101},   {402,0,0b00001},   {403,1,0b10110},   {404,1,0b10011},   {405,0,0b10010},   {406,1,0b10111},   {407,0,0b11100},   {408,1,0b11010},   {409,1,0b00111},   {410,1,0b10001},   {411,1,0b10110},   {412,0,0b00011},   {413,1,0b10011},   {414,1,0b00101},   {415,0,0b01111},   {416,1,0b11111},   {417,0,0b00110},   {418,1,0b01100},   {419,1,0b10111},   {420,1,0b10110},   {421,1,0b11111},   {422,1,0b01101},   {424,1,0b01100},   {426,0,0b00010},   {427,1,0b01100},   {429,0,0b00001},   {430,0,0b00011},   {431,1,0b11001},   {432,1,0b10001},   {433,0,0b00001},   {434,1,0b11001},   {435,1,0b11010},   {437,1,0b01011},   {439,0,0b10001},   {440,1,0b11001},   {442,1,0b01001},   {443,1,0b01100},   {444,1,0b11010},   {446,1,0b10101},   {448,0,0b10000},   {449,0,0b01101},   {450,0,0b11000},   {451,1,0b11010},   {452,0,0b01111},   {453,1,0b10011},   {454,1,0b01110},   {455,1,0b01100},   {456,0,0b10111},   {457,1,0b11001},   {458,1,0b10100},   {459,1,0b10100},   {460,0,0b00011},   {461,0,0b01100},   {462,1,0b01011},   {463,1,0b11010},   {464,1,0b10000},   {466,1,0b10100},   {468,1,0b10110},   {469,1,0b01100},   {470,0,0b00101},   {471,0,0b10110},   {472,1,0b11111},   {473,0,0b11001},   {474,1,0b11110},   {476,1,0b01101},   {477,1,0b00101},   {482,1,0b11010},   {484,1,0b01001},   {485,1,0b11100},   {486,1,0b10101},   {488,1,0b10110},   {489,1,0b00011},   {491,0,0b01010},   {492,1,0b01010},   {493,1,0b00001},   {495,0,0b01001},   {496,1,0b11110},   {497,0,0b10001},   {498,1,0b11011},   {499,1,0b01000},   {501,0,0b11001},   {502,1,0b11100},   {503,0,0b00001},   {504,0,0b11010},   {505,0,0b11011},   {506,1,0b11101},   {507,1,0b00111},   {509,1,0b01101},   {510,0,0b01010},   {511,1,0b10011},   {512,0,0b00001},   {513,1,0b01010},   {514,1,0b10011},   {515,0,0b00101},   {516,1,0b11100},   {517,0,0b01010},   {518,1,0b11011},   {519,0,0b10000},   {520,1,0b10101},   {521,1,0b11010},   {522,1,0b10000},   {523,1,0b11111},   {527,0,0b01000},   {528,0,0b01001},   {529,1,0b10100},   {530,0,0b01110},   {531,0,0b01111},   {532,0,0b10011},   {533,0,0b11101},   {534,1,0b11101},   {535,1,0b11010},   {536,1,0b00110},   {537,1,0b11001},   {538,0,0b01100},   {539,0,0b10010},   {540,1,0b10001},   {541,0,0b10110},   {542,1,0b11100},   {543,0,0b01111},   {544,1,0b10010},   {545,0,0b00011},   {546,0,0b00110},   {547,1,0b10001},   {548,1,0b01011},   {549,1,0b01111},   {550,1,0b10101},   {551,1,0b00111},   {552,1,0b10011},   {553,1,0b10110},   {554,0,0b00001},   {555,1,0b00010},   {556,1,0b00011},   {557,1,0b01010},   {558,0,0b01000},   {559,1,0b01100},   {560,0,0b01010},   {561,1,0b01011},   {562,1,0b11010},   {563,1,0b01011},   {564,0,0b11010},   {565,1,0b11111},   {566,0,0b01001},   {567,1,0b10110},   {568,1,0b01111},   {569,1,0b10001},   {570,0,0b01100},   {571,1,0b10110},   {572,1,0b11110},   {573,1,0b10010},   {574,0,0b10000},   {575,0,0b01110},   {576,1,0b11101},   {577,0,0b10001},   {578,1,0b10011},   {579,1,0b10101},   {580,1,0b11011},   {582,1,0b00111},   {583,1,0b00110},   {591,1,0b00010},   {592,1,0b00101},   {597,1,0b11101},   {598,1,0b00100},   {599,1,0b10010},   {602,1,0b11110},   {604,1,0b01100},   {609,1,0b00101},   {611,1,0b10101},   {612,0,0b01001},   {613,1,0b01110},   {614,1,0b10011},   {615,1,0b01000},   {616,0,0b01111},   {617,1,0b11001},   {618,1,0b11011},   {619,1,0b10011},   {620,0,0b00101},   {621,1,0b11110},   {623,1,0b00111},   {624,0,0b10110},   {625,1,0b11101},   {626,1,0b01100},   {627,0,0b00111},   {628,0,0b11100},   {629,1,0b11001},   {630,1,0b11101},   {631,0,0b01010},   {632,0,0b10110},   {633,1,0b11110},   {634,1,0b10011},   {635,1,0b10011},   {636,1,0b01111},   {637,1,0b10111},   {638,0,0b00010},   {639,1,0b01111},   {640,1,0b01001},   {641,0,0b00011},   {642,0,0b00011},   {643,1,0b00111},   {644,1,0b10011},   {645,1,0b01001},   {646,0,0b01000},   {647,0,0b00010},   {648,0,0b00111},   {649,1,0b11000},   {650,1,0b00010},   {651,1,0b10111},   {652,1,0b00011},   {653,0,0b01110},   {654,1,0b10010},   {655,0,0b01101},   {656,1,0b01111},   {657,0,0b01001},   {658,0,0b10001},   {659,0,0b10100},   {660,0,0b10010},   {661,0,0b11010},   {662,1,0b11110},   {663,0,0b10001},   {664,1,0b11101},   {665,0,0b00001},   {666,0,0b01100},   {667,1,0b11000},   {668,1,0b00111},   {669,1,0b00100},   {670,0,0b10000},   {671,0,0b00001},   {672,1,0b01001},   {673,1,0b00101},   {674,0,0b11000},   {675,1,0b10011},   {676,0,0b01110},   {677,1,0b10001},   {678,1,0b01001},   {679,1,0b00011},   {680,1,0b00111},   {681,0,0b00010},   {682,1,0b11100},   {683,1,0b00010},   {684,0,0b01111},   {685,1,0b11010},   {686,1,0b11110},   {687,0,0b00100},   {688,0,0b10010},   {689,1,0b11110},   {690,1,0b11000},   {691,0,0b01100},   {692,0,0b01001},   {693,1,0b11110},   {694,1,0b11001},   {695,0,0b00111},   {696,1,0b01111},   {697,1,0b10001},   {698,1,0b01101},   {699,0,0b00100},   {700,1,0b00110},   {701,0,0b00100},   {702,1,0b01101},   {703,0,0b00001},   {704,0,0b01110},   {705,1,0b01110},   {706,0,0b00010},   {707,1,0b01101},   {708,0,0b00101},   {709,1,0b10100},   {710,1,0b01101},   {711,0,0b00001},   {712,1,0b10010},   {713,1,0b11110},   {714,1,0b00110},   {715,0,0b00001},   {716,0,0b01101},   {717,1,0b10001},   {718,1,0b00111},   {719,1,0b10101},   {720,1,0b01011},   {721,1,0b11111},   {722,0,0b00111},   {723,1,0b11110},   {724,0,0b00001},   {725,1,0b11110},   {726,1,0b10111},   {727,0,0b10111},   {728,1,0b11101},   {729,1,0b01000},   {730,1,0b10000},   {731,1,0b11110},   {732,0,0b01110},   {733,1,0b10010},   {734,0,0b10111},   {735,1,0b10111},   {736,1,0b01010},   {737,1,0b11111},   {738,1,0b11000},   {739,0,0b10110},   {740,1,0b10110},   {741,1,0b01111},   {742,1,0b01010},   {743,0,0b11000},   {744,1,0b11101},   {745,0,0b00101},   {746,1,0b10011},   {747,0,0b10001},   {748,0,0b10001},   {749,1,0b11010},   {750,1,0b10000},   {751,1,0b01001},   {752,0,0b11101},   {753,1,0b11101},   {754,0,0b00110},   {755,1,0b00101},   {756,1,0b01001},   {757,1,0b10000},   {758,1,0b01011},   {759,0,0b00001},   {760,1,0b10011},   {761,1,0b01011},   {762,0,0b01000},   {763,1,0b11010},   {764,1,0b00111},   {765,1,0b11011},   {766,0,0b00001},   {767,1,0b00110},   {768,1,0b10001},   {769,1,0b00001},   {770,1,0b10010},   {771,1,0b00001},   {772,1,0b00111},   {773,1,0b11110},   {774,1,0b01000},   {775,1,0b11000},   {776,1,0b01101},   {777,0,0b00010},   {778,1,0b01010},   {779,1,0b00001},   {780,1,0b01101},   {781,0,0b00011},   {782,1,0b10110},   {783,0,0b00011},   {784,0,0b10101},   {785,1,0b10110},   {786,1,0b01111},   {787,0,0b01111},   {788,1,0b11010},   {789,1,0b10000},   {790,0,0b01110},   {791,1,0b11000},   {792,1,0b10010},   {793,0,0b01110},   {794,1,0b01101},   {795,1,0b01111},   {796,1,0b10000},   {797,0,0b00100},   {798,1,0b01111},   {799,0,0b00110},   {800,1,0b10111},   {801,1,0b11011},   {802,0,0b00010},   {803,1,0b11101},   {804,1,0b01011},   {805,1,0b11000},   {806,1,0b00111},   {807,0,0b00100},   {808,1,0b10101},   {809,0,0b00010},   {810,1,0b01110},   {811,1,0b00101},   {812,0,0b01011},   {813,1,0b11100},   {814,1,0b01000},   {815,0,0b00100},   {816,0,0b10000},   {817,1,0b11001},   {818,0,0b01101},   {819,1,0b11101},   {820,1,0b00100},   {821,1,0b01011},   {822,0,0b01111},   {823,0,0b10111},   {824,0,0b11001},   {825,0,0b11110},   {826,1,0b11101},   {827,1,0b11011},   {828,1,0b00111},   {829,1,0b10100},   {830,1,0b00110},   {831,0,0b01011},   {832,1,0b11110},   {833,1,0b00100},   {834,1,0b10001},   {835,1,0b01101},   {836,0,0b00001},   {837,1,0b11001},   {838,1,0b11001},   {839,1,0b10111},   {840,0,0b00010},   {841,0,0b10010},   {842,0,0b10011},   {843,1,0b11001},   {844,0,0b00010},   {845,1,0b10010},   {846,0,0b00010},   {847,0,0b01110},   {848,1,0b11011},   {849,1,0b00011},   {850,0,0b00110},   {851,0,0b01011},   {852,1,0b11000},   {853,1,0b11001},   {854,0,0b00001},   {855,1,0b01001},   {856,1,0b01100},   {857,0,0b00001},   {858,1,0b01011},   {859,1,0b01010},   {860,0,0b00111},   {861,1,0b01100},   {862,1,0b00010},   {863,1,0b11101},   {864,0,0b00011},   {865,0,0b11100},   {866,0,0b11011},   {867,1,0b11111},   {868,1,0b10010},   {869,0,0b00111},   {870,1,0b11101},   {871,1,0b01010},   {872,0,0b01100},   {873,1,0b10100},   {874,1,0b10111},   {875,1,0b01000},   {876,1,0b00011},   {877,1,0b11011},   {878,1,0b00110},   {879,1,0b10111},   {880,1,0b10011},   {881,0,0b01000},   {882,0,0b10111},   {883,1,0b11011},   {884,1,0b11111},   {885,1,0b10111},   {886,0,0b10011},   {887,1,0b11010},   {888,1,0b00101},   {889,1,0b00001},   {890,1,0b10101},   {891,0,0b01000},   {892,1,0b10101},   {893,1,0b00011},   {894,0,0b00101},   {895,1,0b11101},   {896,0,0b01000},   {897,1,0b10110},   {898,0,0b10100},   {899,1,0b11101},   {900,0,0b00110},   {901,1,0b00111},   {902,0,0b00101},   {903,0,0b11010},   {904,1,0b11110},   {905,0,0b01100},   {906,1,0b10011},   {907,0,0b01100},   {908,1,0b11100},   {909,1,0b11011},   {910,0,0b01111},   {911,1,0b11011},   {912,0,0b00001},   {913,1,0b10100},   {914,1,0b01010},   {915,1,0b01010},   {916,0,0b00010},   {917,1,0b01000},   {918,1,0b10100},   {919,0,0b01011},   {920,0,0b11000},   {921,1,0b11011},   {922,1,0b00011},   {923,0,0b00001},   {924,1,0b00111},   {925,1,0b10100},   {926,0,0b00111},   {927,1,0b10011},   {928,1,0b01011},   {929,0,0b01000},   {930,1,0b10101},   {931,0,0b10100},   {932,1,0b10111},   {933,0,0b11100},   {934,1,0b11111},   {935,1,0b01000},   {936,1,0b11101},   {937,1,0b11001},   {938,0,0b00100},   {939,1,0b10110},   {940,1,0b01000},   {941,0,0b00010},   {942,0,0b01000},   {943,0,0b00101},   {944,0,0b01001},   {945,0,0b10101},   {946,0,0b11011},   {947,1,0b11110},   {948,1,0b11001},   {949,0,0b01001},   {950,0,0b11001},   {951,0,0b11011},   {952,0,0b11101},   {953,1,0b11101},   {954,1,0b11101},   {955,1,0b00010},   {956,1,0b11011},   {957,1,0b11110},   {958,1,0b10001},   {959,1,0b01010},   {960,1,0b00110},   {961,1,0b00101},   {962,0,0b00010},   {963,1,0b11100},   {964,1,0b01100},   {965,0,0b10000},   {966,0,0b00101},   {967,1,0b01110},   {968,0,0b10010},   {969,1,0b11000},   {970,1,0b10110},   {971,0,0b10001},   {972,1,0b10011},   {973,1,0b01110},   {974,1,0b01101},   {975,0,0b00110},   {976,1,0b11100},   {977,1,0b00100},   {978,1,0b00010},   {979,1,0b00101},   {980,1,0b11011},   {981,1,0b11101},   {982,0,0b01000},   {983,1,0b11010},   {984,1,0b00011},   {985,1,0b00101},   {986,1,0b10001},   {987,1,0b00010},   {988,0,0b01010},   {989,1,0b01101},   {990,1,0b10010},   {991,0,0b00101},   {992,1,0b10111},   {993,1,0b10111},   {994,0,0b10000},   {995,0,0b10111},   {996,1,0b11001},   {997,0,0b00110},   {998,1,0b01001},   {999,0,0b01100},   {1000,1,0b10010},   {1001,1,0b11001},   {1002,1,0b11110},   {1003,0,0b00100},   {1004,0,0b00001},   {1005,0,0b10111},   {1006,1,0b11111},   {1007,1,0b01111},   {1008,1,0b00100},   {1009,1,0b11100},   {1010,1,0b00001},   {1011,1,0b11111},   {1012,0,0b00011},   {1013,1,0b10001},   {1014,1,0b11101},   {1015,1,0b11110},   {1016,1,0b01001},   {1017,1,0b10100},   {1018,1,0b00111},   {1019,1,0b01001},   {1020,1,0b00011},   {1021,1,0b10011},   {1022,1,0b00101},   {1023,0,0b00001},   {1024,0,0b00111},   {1025,1,0b10011},   {1026,0,0b10010},   {1027,1,0b10110},   {1028,1,0b10110},   {1029,1,0b10110},   {1030,0,0b01000},   {1031,0,0b01010},   {1032,1,0b11010},   {1033,1,0b10111},   {1034,1,0b11011},   {1035,0,0b10000},   {1036,1,0b00100},   {1037,1,0b10101},   {1038,0,0b00110},   {1039,1,0b11000},   {1040,1,0b01001},   {1041,1,0b00001},   {1042,1,0b11001},   {1043,0,0b00010},   {1044,0,0b00100},   {1045,1,0b00110},   {1046,0,0b11000},   {1047,1,0b10111},   {1048,0,0b00110},   {1049,0,0b01111},   {1050,1,0b11000},   {1051,1,0b01100},   {1052,1,0b11101},   {1053,1,0b00110},   {1054,1,0b01110},   {1055,1,0b00001},   {1056,0,0b10000},   {1057,1,0b10111},   {1058,0,0b00011},   {1059,1,0b10100},   {1060,1,0b00010},   {1061,1,0b11011},   {1062,0,0b00101},   {1063,0,0b00111},   {1064,1,0b10011},   {1065,1,0b11111},   {1066,0,0b10000},   {1067,1,0b10101},   {1068,0,0b10000},   {1069,0,0b01100},   {1070,0,0b10100},   {1071,0,0b11000},   {1072,0,0b10101},   {1073,0,0b10110},   {1074,1,0b11111},   {1075,0,0b00001},   {1076,1,0b00011}};
            AssertStoreContents(s, store, occupieds_pos, checks);
        }

        SUBCASE("multiple matches, shift left") {
            s.DeleteRawFromInfixStore(store, 0b000000010010101);
            {
                const std::vector<uint32_t> occupieds_pos = {0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 22, 24, 26, 28, 29, 31, 32, 34, 36, 38, 39, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 78, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 127, 131, 135, 136, 138, 143, 144, 145, 147, 148, 152, 153, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 177, 178, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 221, 224, 226, 227, 228, 231, 232, 233, 236, 237, 240, 241, 244, 246, 247, 248, 249, 252, 254, 256, 257, 258, 259, 263, 264, 265, 266, 269, 271, 274, 276, 278, 282, 283, 284, 287, 288, 289, 290, 291, 294, 296, 297, 300, 301, 302, 303, 307, 309, 311, 313, 314, 315, 316, 317, 320, 323, 324, 325, 326, 327, 328, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 366, 370, 372, 373, 374, 376, 379, 380, 381, 385, 386, 388, 391, 394, 396, 397, 403, 405, 408, 410, 412, 413, 416, 418, 420, 421, 422, 424, 426, 427, 430, 431, 432, 433, 434, 437, 438, 440, 443, 445, 446, 447, 450, 453, 454, 458, 460, 461, 462, 464, 465, 467, 468, 471, 472, 474, 476, 478, 481, 484, 485, 486, 487, 488, 489, 491, 493, 494, 497, 501, 503, 505, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 529, 530, 531, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 547, 549, 553, 554, 562, 563, 568, 569, 570, 572, 574, 579, 581, 582, 583, 584, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 600, 601, 602, 604, 606, 607, 610, 612, 613, 616, 617, 620, 621, 624, 625, 626, 627, 630, 631, 632, 634, 637, 639, 640, 642, 643, 644, 646, 649, 652, 653, 655, 656, 657, 659, 662, 664, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 722, 723, 725, 726, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 758, 761, 763, 764, 766, 767, 769, 770, 772, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 798, 801, 804, 805, 806, 808, 811, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 828, 829, 830, 831, 836, 838, 840, 841, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 859, 861, 862, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 891, 893, 894, 895, 898, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 946, 949, 950, 952, 955, 956, 957, 959, 960, 961, 962, 963, 964, 968, 971, 972, 973, 974, 975, 976, 979, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023};
                const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  0,0,0b00010},   {  1,1,0b00001},   {  2,0,0b00010},   {  3,0,0b01010},   {  4,1,0b11101},   {  5,0,0b01101},   {  6,0,0b10010},   {  7,0,0b10110},   {  8,1,0b11101},   {  9,0,0b10100},   { 10,0,0b11000},   { 11,0,0b10110},   { 12,1,0b11111},   { 13,0,0b10101},   { 14,0,0b10111},   { 15,1,0b11001},   { 16,0,0b00001},   { 17,1,0b11000},   { 18,0,0b11011},   { 19,1,0b11011},   { 20,0,0b00001},   { 21,0,0b11011},   { 22,0,0b11101},   { 23,1,0b11111},   { 24,1,0b01101},   { 25,0,0b10100},   { 26,1,0b10110},   { 27,1,0b11101},   { 28,0,0b01000},   { 29,0,0b00001},   { 30,0,0b00011},   { 31,1,0b00111},   { 32,0,0b01111},   { 33,1,0b11001},   { 34,1,0b01001},   { 35,1,0b00010},   { 36,0,0b10101},   { 37,1,0b11111},   { 38,1,0b10010},   { 39,0,0b01000},   { 40,0,0b00111},   { 41,1,0b10011},   { 42,0,0b10001},   { 43,1,0b11001},   { 44,1,0b01001},   { 45,1,0b11110},   { 46,1,0b00010},   { 47,1,0b01101},   { 48,1,0b10000},   { 49,0,0b01000},   { 50,1,0b00110},   { 51,0,0b10000},   { 52,0,0b10100},   { 53,1,0b11011},   { 54,1,0b00010},   { 55,1,0b11000},   { 56,1,0b11111},   { 57,1,0b11111},   { 58,1,0b00111},   { 59,0,0b01011},   { 60,1,0b01110},   { 61,1,0b01010},   { 62,0,0b00100},   { 63,0,0b01100},   { 64,1,0b01101},   { 65,0,0b00010},   { 66,1,0b10001},   { 67,0,0b01101},   { 68,1,0b11001},   { 69,1,0b11000},   { 70,0,0b00011},   { 71,1,0b01010},   { 72,1,0b11111},   { 73,1,0b00010},   { 74,0,0b01000},   { 75,1,0b11001},   { 76,1,0b01100},   { 77,1,0b01100},   { 78,1,0b10110},   { 79,1,0b11011},   { 80,0,0b10100},   { 81,0,0b10001},   { 82,1,0b10101},   { 83,1,0b00011},   { 84,1,0b10001},   { 85,1,0b10110},   { 86,0,0b10100},   { 87,0,0b10101},   { 88,1,0b11100},   { 89,1,0b01000},   { 90,1,0b00101},   { 91,1,0b11111},   { 92,1,0b10110},   { 93,0,0b01100},   { 94,0,0b10010},   { 95,0,0b11100},   { 96,1,0b11110},   { 97,0,0b10000},   { 98,1,0b01010},   { 99,1,0b01011},   {100,1,0b10110},   {101,0,0b00010},   {102,1,0b11000},   {103,1,0b01001},   {104,0,0b00010},   {105,0,0b10101},   {106,0,0b11100},   {107,1,0b11110},   {108,1,0b01010},   {109,1,0b11001},   {110,0,0b01100},   {111,1,0b11100},   {112,1,0b01000},   {113,1,0b01101},   {114,1,0b10110},   {115,1,0b10011},   {116,0,0b10011},   {117,1,0b11001},   {118,1,0b10000},   {119,0,0b00001},   {120,0,0b01011},   {121,1,0b11010},   {122,0,0b00100},   {123,0,0b00100},   {124,1,0b10011},   {125,1,0b00011},   {126,0,0b00011},   {127,1,0b00011},   {128,0,0b10101},   {129,1,0b11101},   {130,1,0b01001},   {131,1,0b11110},   {132,1,0b01010},   {133,1,0b00100},   {134,0,0b01001},   {135,1,0b01101},   {136,1,0b00110},   {137,0,0b01111},   {138,1,0b10010},   {139,1,0b11101},   {140,1,0b11111},   {141,0,0b01011},   {142,1,0b11001},   {143,0,0b00110},   {144,0,0b00111},   {145,0,0b10011},   {146,1,0b10101},   {147,1,0b11100},   {148,1,0b00001},   {149,0,0b01010},   {150,1,0b10110},   {151,1,0b10101},   {152,0,0b00100},   {153,1,0b01010},   {154,0,0b00110},   {155,0,0b01100},   {156,1,0b10111},   {157,1,0b11100},   {158,0,0b11011},   {159,1,0b11011},   {160,1,0b00001},   {161,0,0b01010},   {162,1,0b11110},   {163,1,0b11110},   {164,1,0b00110},   {165,1,0b11011},   {166,1,0b11011},   {167,1,0b10001},   {168,1,0b00101},   {169,1,0b00100},   {170,0,0b10110},   {171,1,0b11111},   {172,1,0b10001},   {173,1,0b11111},   {174,0,0b01000},   {175,1,0b01101},   {176,1,0b10101},   {177,0,0b01010},   {178,1,0b10101},   {179,1,0b01010},   {180,0,0b00001},   {181,1,0b01101},   {182,1,0b11110},   {183,0,0b01001},   {184,0,0b01111},   {185,1,0b10111},   {186,1,0b11110},   {187,1,0b00101},   {190,0,0b01110},   {191,0,0b10001},   {192,1,0b10111},   {193,1,0b11100},   {194,1,0b11010},   {195,0,0b10100},   {196,1,0b11110},   {197,0,0b01110},   {198,1,0b11001},   {199,1,0b01100},   {200,1,0b00100},   {201,0,0b01000},   {202,0,0b01011},   {203,1,0b10100},   {204,1,0b11111},   {205,1,0b00111},   {206,1,0b11111},   {207,1,0b10100},   {208,0,0b10011},   {209,1,0b11010},   {210,1,0b10100},   {211,1,0b10101},   {212,0,0b01110},   {213,1,0b11011},   {214,0,0b11011},   {215,1,0b11110},   {216,1,0b10100},   {217,1,0b00101},   {218,0,0b10100},   {219,0,0b10010},   {220,1,0b10101},   {221,0,0b10000},   {222,0,0b01100},   {223,0,0b01010},   {224,1,0b01001},   {225,1,0b10001},   {226,0,0b10000},   {227,1,0b10010},   {228,1,0b11101},   {229,1,0b10011},   {230,1,0b00001},   {231,1,0b11101},   {232,0,0b00111},   {233,1,0b10001},   {234,1,0b11011},   {235,0,0b00001},   {236,0,0b00110},   {237,0,0b01010},   {238,1,0b11100},   {239,0,0b10000},   {240,1,0b11100},   {241,0,0b01001},   {242,1,0b01011},   {243,1,0b11111},   {244,1,0b01101},   {245,1,0b01110},   {246,0,0b10011},   {247,1,0b10101},   {248,0,0b01110},   {249,1,0b10100},   {250,0,0b10000},   {251,0,0b10010},   {252,0,0b10100},   {253,1,0b10011},   {254,0,0b01011},   {255,1,0b10011},   {256,1,0b00101},   {257,1,0b10101},   {258,1,0b10100},   {259,1,0b10001},   {261,1,0b01100},   {262,1,0b11100},   {265,0,0b10000},   {266,1,0b10111},   {267,1,0b10111},   {269,0,0b00010},   {270,1,0b10110},   {271,1,0b00001},   {272,1,0b01111},   {273,0,0b00101},   {274,0,0b01001},   {275,0,0b10001},   {276,1,0b11111},   {277,1,0b10110},   {278,1,0b00011},   {279,0,0b00101},   {280,1,0b10010},   {281,0,0b00001},   {282,0,0b00111},   {283,1,0b00111},   {284,1,0b01100},   {285,0,0b00001},   {286,1,0b11011},   {288,0,0b01000},   {289,0,0b01111},   {290,1,0b10100},   {291,1,0b00001},   {292,0,0b00110},   {293,1,0b11001},   {296,0,0b01011},   {297,1,0b10100},   {298,0,0b01100},   {299,1,0b10100},   {300,0,0b01100},   {301,1,0b11111},   {302,1,0b11011},   {303,0,0b00111},   {304,0,0b01110},   {305,1,0b11101},   {306,0,0b00011},   {307,0,0b01110},   {308,1,0b10011},   {309,1,0b01011},   {310,0,0b01111},   {311,1,0b11011},   {312,0,0b01100},   {313,0,0b01001},   {314,1,0b10011},   {315,1,0b00101},   {316,0,0b01010},   {317,1,0b01100},   {318,0,0b01000},   {319,1,0b01101},   {320,1,0b00101},   {321,0,0b00101},   {322,1,0b01011},   {323,0,0b01001},   {324,1,0b11011},   {325,0,0b10000},   {326,1,0b10101},   {327,0,0b00100},   {328,1,0b01111},   {329,1,0b01001},   {330,0,0b10001},   {331,0,0b11010},   {332,1,0b11011},   {333,1,0b11010},   {334,0,0b01100},   {335,0,0b11000},   {336,1,0b10011},   {337,0,0b01111},   {338,1,0b11110},   {339,0,0b01100},   {340,0,0b10001},   {341,0,0b10011},   {342,0,0b10101},   {343,0,0b11011},   {344,1,0b11111},   {345,0,0b00111},   {346,1,0b01100},   {347,1,0b01001},   {348,0,0b10111},   {349,1,0b11011},   {350,1,0b01111},   {351,1,0b00101},   {352,0,0b00011},   {353,0,0b01001},   {354,1,0b11001},   {355,0,0b00001},   {356,1,0b01100},   {357,1,0b10000},   {358,1,0b11101},   {359,1,0b00001},   {360,0,0b01010},   {361,0,0b10011},   {362,1,0b11101},   {363,0,0b10100},   {364,1,0b11011},   {365,1,0b10110},   {366,1,0b01101},   {367,1,0b10010},   {368,1,0b01110},   {369,1,0b00110},   {370,0,0b01111},   {371,0,0b10110},   {372,0,0b10110},   {373,1,0b11011},   {374,0,0b01011},   {375,1,0b10101},   {376,0,0b10000},   {377,0,0b00111},   {378,1,0b11000},   {379,1,0b10001},   {380,0,0b01110},   {381,1,0b10010},   {382,0,0b10000},   {383,0,0b00011},   {384,1,0b10001},   {385,0,0b00111},   {386,0,0b11010},   {387,1,0b11001},   {388,0,0b00100},   {389,1,0b10101},   {390,1,0b01010},   {391,1,0b11010},   {392,1,0b00101},   {393,1,0b00111},   {394,0,0b01111},   {395,0,0b10100},   {396,0,0b10100},   {397,1,0b10011},   {398,1,0b10110},   {399,1,0b00100},   {400,0,0b11100},   {401,1,0b11101},   {402,0,0b00001},   {403,1,0b10110},   {404,1,0b10011},   {405,0,0b10010},   {406,1,0b10111},   {407,0,0b11100},   {408,1,0b11010},   {409,1,0b00111},   {410,1,0b10001},   {411,1,0b10110},   {412,0,0b00011},   {413,1,0b10011},   {414,1,0b00101},   {415,0,0b01111},   {416,1,0b11111},   {417,0,0b00110},   {418,1,0b01100},   {419,1,0b10111},   {420,1,0b10110},   {421,1,0b11111},   {422,1,0b01101},   {424,1,0b01100},   {426,0,0b00010},   {427,1,0b01100},   {429,0,0b00001},   {430,0,0b00011},   {431,1,0b11001},   {432,1,0b10001},   {433,0,0b00001},   {434,1,0b11001},   {435,1,0b11010},   {437,1,0b01011},   {439,0,0b10001},   {440,1,0b11001},   {442,1,0b01001},   {443,1,0b01100},   {444,1,0b11010},   {446,1,0b10101},   {448,0,0b10000},   {449,0,0b01101},   {450,0,0b11000},   {451,1,0b11010},   {452,0,0b01111},   {453,1,0b10011},   {454,1,0b01110},   {455,1,0b01100},   {456,0,0b10111},   {457,1,0b11001},   {458,1,0b10100},   {459,1,0b10100},   {460,0,0b00011},   {461,0,0b01100},   {462,1,0b01011},   {463,1,0b11010},   {464,1,0b10000},   {466,1,0b10100},   {468,1,0b10110},   {469,1,0b01100},   {470,0,0b00101},   {471,0,0b10110},   {472,1,0b11111},   {473,0,0b11001},   {474,1,0b11110},   {476,1,0b01101},   {477,1,0b00101},   {482,1,0b11010},   {484,1,0b01001},   {485,1,0b11100},   {486,1,0b10101},   {488,1,0b10110},   {489,1,0b00011},   {491,0,0b01010},   {492,1,0b01010},   {493,1,0b00001},   {495,0,0b01001},   {496,1,0b11110},   {497,0,0b10001},   {498,1,0b11011},   {499,1,0b01000},   {501,0,0b11001},   {502,1,0b11100},   {503,0,0b00001},   {504,0,0b11010},   {505,0,0b11011},   {506,1,0b11101},   {507,1,0b00111},   {509,1,0b01101},   {510,0,0b01010},   {511,1,0b10011},   {512,0,0b00001},   {513,1,0b01010},   {514,1,0b10011},   {515,0,0b00101},   {516,1,0b11100},   {517,0,0b01010},   {518,1,0b11011},   {519,0,0b10000},   {520,1,0b10101},   {521,1,0b11010},   {522,1,0b10000},   {523,1,0b11111},   {527,0,0b01000},   {528,0,0b01001},   {529,1,0b10100},   {530,0,0b01110},   {531,0,0b01111},   {532,0,0b10011},   {533,0,0b11101},   {534,1,0b11101},   {535,1,0b11010},   {536,1,0b00110},   {537,1,0b11001},   {538,0,0b01100},   {539,0,0b10010},   {540,1,0b10001},   {541,0,0b10110},   {542,1,0b11100},   {543,0,0b01111},   {544,1,0b10010},   {545,0,0b00011},   {546,0,0b00110},   {547,1,0b10001},   {548,1,0b01011},   {549,1,0b01111},   {550,1,0b10101},   {551,1,0b00111},   {552,1,0b10011},   {553,1,0b10110},   {554,0,0b00001},   {555,1,0b00010},   {556,1,0b00011},   {557,1,0b01010},   {558,0,0b01000},   {559,1,0b01100},   {560,0,0b01010},   {561,1,0b01011},   {562,1,0b11010},   {563,1,0b01011},   {564,0,0b11010},   {565,1,0b11111},   {566,0,0b01001},   {567,1,0b10110},   {568,1,0b01111},   {569,1,0b10001},   {570,0,0b01100},   {571,1,0b10110},   {572,1,0b11110},   {573,1,0b10010},   {574,0,0b10000},   {575,0,0b01110},   {576,1,0b11101},   {577,0,0b10001},   {578,1,0b10011},   {579,1,0b10101},   {580,1,0b11011},   {582,1,0b00111},   {583,1,0b00110},   {591,1,0b00010},   {592,1,0b00101},   {597,1,0b11101},   {598,1,0b00100},   {599,1,0b10010},   {602,1,0b11110},   {604,1,0b01100},   {609,1,0b00101},   {611,1,0b10101},   {612,0,0b01001},   {613,1,0b01110},   {614,1,0b10011},   {615,1,0b01000},   {616,0,0b01111},   {617,1,0b11001},   {618,1,0b11011},   {619,1,0b10011},   {620,0,0b00101},   {621,1,0b11110},   {623,1,0b00111},   {624,0,0b10110},   {625,1,0b11101},   {626,1,0b01100},   {627,0,0b00111},   {628,0,0b11100},   {629,1,0b11001},   {630,1,0b11101},   {631,0,0b01010},   {632,0,0b10110},   {633,1,0b11110},   {634,1,0b10011},   {635,1,0b10011},   {636,1,0b01111},   {637,1,0b10111},   {638,0,0b00010},   {639,1,0b01111},   {640,1,0b01001},   {641,0,0b00011},   {642,0,0b00011},   {643,1,0b00111},   {644,1,0b10011},   {645,1,0b01001},   {646,0,0b01000},   {647,0,0b00010},   {648,0,0b00111},   {649,1,0b11000},   {650,1,0b00010},   {651,1,0b10111},   {652,1,0b00011},   {653,0,0b01110},   {654,1,0b10010},   {655,0,0b01101},   {656,1,0b01111},   {657,0,0b01001},   {658,0,0b10001},   {659,0,0b10100},   {660,0,0b10010},   {661,0,0b11010},   {662,1,0b11110},   {663,0,0b10001},   {664,1,0b11101},   {665,0,0b00001},   {666,0,0b01100},   {667,1,0b11000},   {668,1,0b00111},   {669,1,0b00100},   {670,0,0b10000},   {671,0,0b00001},   {672,1,0b01001},   {673,1,0b00101},   {674,0,0b11000},   {675,1,0b10011},   {676,0,0b01110},   {677,1,0b10001},   {678,1,0b01001},   {679,1,0b00011},   {680,1,0b00111},   {681,0,0b00010},   {682,1,0b11100},   {683,1,0b00010},   {684,0,0b01111},   {685,1,0b11010},   {686,1,0b11110},   {687,0,0b00100},   {688,0,0b10010},   {689,1,0b11110},   {690,1,0b11000},   {691,0,0b01100},   {692,0,0b01001},   {693,1,0b11110},   {694,1,0b11001},   {695,0,0b00111},   {696,1,0b01111},   {697,1,0b10001},   {698,1,0b01101},   {699,0,0b00100},   {700,1,0b00110},   {701,0,0b00100},   {702,1,0b01101},   {703,0,0b00001},   {704,0,0b01110},   {705,1,0b01110},   {706,0,0b00010},   {707,1,0b01101},   {708,0,0b00101},   {709,1,0b10100},   {710,1,0b01101},   {711,0,0b00001},   {712,1,0b10010},   {713,1,0b11110},   {714,1,0b00110},   {715,0,0b00001},   {716,0,0b01101},   {717,1,0b10001},   {718,1,0b00111},   {719,1,0b10101},   {720,1,0b01011},   {721,1,0b11111},   {722,0,0b00111},   {723,1,0b11110},   {724,0,0b00001},   {725,1,0b11110},   {726,1,0b10111},   {727,0,0b10111},   {728,1,0b11101},   {729,1,0b01000},   {730,1,0b10000},   {731,1,0b11110},   {732,0,0b01110},   {733,1,0b10010},   {734,0,0b10111},   {735,1,0b10111},   {736,1,0b01010},   {737,1,0b11111},   {738,1,0b11000},   {739,0,0b10110},   {740,1,0b10110},   {741,1,0b01111},   {742,1,0b01010},   {743,0,0b11000},   {744,1,0b11101},   {745,0,0b00101},   {746,1,0b10011},   {747,0,0b10001},   {748,0,0b10001},   {749,1,0b11010},   {750,1,0b10000},   {751,1,0b01001},   {752,0,0b11101},   {753,1,0b11101},   {754,0,0b00110},   {755,1,0b00101},   {756,1,0b01001},   {757,1,0b10000},   {758,1,0b01011},   {759,0,0b00001},   {760,1,0b10011},   {761,1,0b01011},   {762,0,0b01000},   {763,1,0b11010},   {764,1,0b00111},   {765,1,0b11011},   {766,0,0b00001},   {767,1,0b00110},   {768,1,0b10001},   {769,1,0b00001},   {770,1,0b10010},   {771,1,0b00001},   {772,1,0b00111},   {773,1,0b11110},   {774,1,0b01000},   {775,1,0b11000},   {776,1,0b01101},   {777,0,0b00010},   {778,1,0b01010},   {779,1,0b00001},   {780,1,0b01101},   {781,0,0b00011},   {782,1,0b10110},   {783,0,0b00011},   {784,0,0b10101},   {785,1,0b10110},   {786,1,0b01111},   {787,0,0b01111},   {788,1,0b11010},   {789,1,0b10000},   {790,0,0b01110},   {791,1,0b11000},   {792,1,0b10010},   {793,0,0b01110},   {794,1,0b01101},   {795,1,0b01111},   {796,1,0b10000},   {797,0,0b00100},   {798,1,0b01111},   {799,0,0b00110},   {800,1,0b10111},   {801,1,0b11011},   {802,0,0b00010},   {803,1,0b11101},   {804,1,0b01011},   {805,1,0b11000},   {806,1,0b00111},   {807,0,0b00100},   {808,1,0b10101},   {809,0,0b00010},   {810,1,0b01110},   {811,1,0b00101},   {812,0,0b01011},   {813,1,0b11100},   {814,1,0b01000},   {815,0,0b00100},   {816,0,0b10000},   {817,1,0b11001},   {818,0,0b01101},   {819,1,0b11101},   {820,1,0b00100},   {821,1,0b01011},   {822,0,0b01111},   {823,0,0b10111},   {824,0,0b11001},   {825,0,0b11110},   {826,1,0b11101},   {827,1,0b11011},   {828,1,0b00111},   {829,1,0b10100},   {830,1,0b00110},   {831,0,0b01011},   {832,1,0b11110},   {833,1,0b00100},   {834,1,0b10001},   {835,1,0b01101},   {836,0,0b00001},   {837,1,0b11001},   {838,1,0b11001},   {839,1,0b10111},   {840,0,0b00010},   {841,0,0b10010},   {842,0,0b10011},   {843,1,0b11001},   {844,0,0b00010},   {845,1,0b10010},   {846,0,0b00010},   {847,0,0b01110},   {848,1,0b11011},   {849,1,0b00011},   {850,0,0b00110},   {851,0,0b01011},   {852,1,0b11000},   {853,1,0b11001},   {854,0,0b00001},   {855,1,0b01001},   {856,1,0b01100},   {857,0,0b00001},   {858,1,0b01011},   {859,1,0b01010},   {860,0,0b00111},   {861,1,0b01100},   {862,1,0b00010},   {863,1,0b11101},   {864,0,0b00011},   {865,0,0b11100},   {866,0,0b11011},   {867,1,0b11111},   {868,1,0b10010},   {869,0,0b00111},   {870,1,0b11101},   {871,1,0b01010},   {872,0,0b01100},   {873,1,0b10100},   {874,1,0b10111},   {875,1,0b01000},   {876,1,0b00011},   {877,1,0b11011},   {878,1,0b00110},   {879,1,0b10111},   {880,1,0b10011},   {881,0,0b01000},   {882,0,0b10111},   {883,1,0b11011},   {884,1,0b11111},   {885,1,0b10111},   {886,0,0b10011},   {887,1,0b11010},   {888,1,0b00101},   {889,1,0b00001},   {890,1,0b10101},   {891,0,0b01000},   {892,1,0b10101},   {893,1,0b00011},   {894,0,0b00101},   {895,1,0b11101},   {896,0,0b01000},   {897,1,0b10110},   {898,0,0b10100},   {899,1,0b11101},   {900,0,0b00110},   {901,1,0b00111},   {902,0,0b00101},   {903,0,0b11010},   {904,1,0b11110},   {905,0,0b01100},   {906,1,0b10011},   {907,0,0b01100},   {908,1,0b11100},   {909,1,0b11011},   {910,0,0b01111},   {911,1,0b11011},   {912,0,0b00001},   {913,1,0b10100},   {914,1,0b01010},   {915,1,0b01010},   {916,0,0b00010},   {917,1,0b01000},   {918,1,0b10100},   {919,0,0b01011},   {920,0,0b11000},   {921,1,0b11011},   {922,1,0b00011},   {923,0,0b00001},   {924,1,0b00111},   {925,1,0b10100},   {926,0,0b00111},   {927,1,0b10011},   {928,1,0b01011},   {929,0,0b01000},   {930,1,0b10101},   {931,0,0b10100},   {932,1,0b10111},   {933,0,0b11100},   {934,1,0b11111},   {935,1,0b01000},   {936,1,0b11101},   {937,1,0b11001},   {938,0,0b00100},   {939,1,0b10110},   {940,1,0b01000},   {941,0,0b00010},   {942,0,0b01000},   {943,0,0b00101},   {944,0,0b01001},   {945,0,0b10101},   {946,0,0b11011},   {947,1,0b11110},   {948,1,0b11001},   {949,0,0b01001},   {950,0,0b11001},   {951,0,0b11011},   {952,0,0b11101},   {953,1,0b11101},   {954,1,0b11101},   {955,1,0b00010},   {956,1,0b11011},   {957,1,0b11110},   {958,1,0b10001},   {959,1,0b01010},   {960,1,0b00110},   {961,1,0b00101},   {962,0,0b00010},   {963,1,0b11100},   {964,1,0b01100},   {965,0,0b10000},   {966,0,0b00101},   {967,1,0b01110},   {968,0,0b10010},   {969,1,0b11000},   {970,1,0b10110},   {971,0,0b10001},   {972,1,0b10011},   {973,1,0b01110},   {974,1,0b01101},   {975,0,0b00110},   {976,1,0b11100},   {977,1,0b00100},   {978,1,0b00010},   {979,1,0b00101},   {980,1,0b11011},   {981,1,0b11101},   {982,0,0b01000},   {983,1,0b11010},   {984,1,0b00011},   {985,1,0b00101},   {986,1,0b10001},   {987,1,0b00010},   {988,0,0b01010},   {989,1,0b01101},   {990,1,0b10010},   {991,0,0b00101},   {992,1,0b10111},   {993,1,0b10111},   {994,0,0b10000},   {995,0,0b10111},   {996,1,0b11001},   {997,0,0b00110},   {998,1,0b01001},   {999,0,0b01100},   {1000,1,0b10010},   {1001,1,0b11001},   {1002,1,0b11110},   {1003,0,0b00100},   {1004,0,0b00001},   {1005,0,0b10111},   {1006,1,0b11111},   {1007,1,0b01111},   {1008,1,0b00100},   {1009,1,0b11100},   {1010,1,0b00001},   {1011,1,0b11111},   {1012,0,0b00011},   {1013,1,0b10001},   {1014,1,0b11101},   {1015,1,0b11110},   {1016,1,0b01001},   {1017,1,0b10100},   {1018,1,0b00111},   {1019,1,0b01001},   {1020,1,0b00011},   {1021,1,0b10011},   {1022,1,0b00101},   {1023,0,0b00001},   {1024,0,0b00111},   {1025,1,0b10011},   {1026,0,0b10010},   {1027,1,0b10110},   {1028,1,0b10110},   {1029,1,0b10110},   {1030,0,0b01000},   {1031,0,0b01010},   {1032,1,0b11010},   {1033,1,0b10111},   {1034,1,0b11011},   {1035,0,0b10000},   {1036,1,0b00100},   {1037,1,0b10101},   {1038,0,0b00110},   {1039,1,0b11000},   {1040,1,0b01001},   {1041,1,0b00001},   {1042,1,0b11001},   {1043,0,0b00010},   {1044,0,0b00100},   {1045,1,0b00110},   {1046,0,0b11000},   {1047,1,0b10111},   {1048,0,0b00110},   {1049,0,0b01111},   {1050,1,0b11000},   {1051,1,0b01100},   {1052,1,0b11101},   {1053,1,0b00110},   {1054,1,0b01110},   {1055,1,0b00001},   {1056,0,0b10000},   {1057,1,0b10111},   {1058,0,0b00011},   {1059,1,0b10100},   {1060,1,0b00010},   {1061,1,0b11011},   {1062,0,0b00101},   {1063,0,0b00111},   {1064,1,0b10011},   {1065,1,0b11111},   {1066,0,0b10000},   {1067,1,0b10101},   {1068,0,0b10000},   {1069,0,0b01100},   {1070,0,0b10100},   {1071,0,0b11000},   {1072,0,0b10101},   {1073,0,0b10110},   {1074,1,0b11111},   {1075,0,0b00001},   {1076,1,0b00011}};
                AssertStoreContents(s, store, occupieds_pos, checks);
            }

            s.DeleteRawFromInfixStore(store, 0b000000010010101);
            {
                const std::vector<uint32_t> occupieds_pos = {0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 22, 24, 26, 28, 29, 31, 32, 34, 36, 38, 39, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 78, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 127, 131, 135, 136, 138, 143, 144, 145, 147, 148, 152, 153, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 177, 178, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 221, 224, 226, 227, 228, 231, 232, 233, 236, 237, 240, 241, 244, 246, 247, 248, 249, 252, 254, 256, 257, 258, 259, 263, 264, 265, 266, 269, 271, 274, 276, 278, 282, 283, 284, 287, 288, 289, 290, 291, 294, 296, 297, 300, 301, 302, 303, 307, 309, 311, 313, 314, 315, 316, 317, 320, 323, 324, 325, 326, 327, 328, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 366, 370, 372, 373, 374, 376, 379, 380, 381, 385, 386, 388, 391, 394, 396, 397, 403, 405, 408, 410, 412, 413, 416, 418, 420, 421, 422, 424, 426, 427, 430, 431, 432, 433, 434, 437, 438, 440, 443, 445, 446, 447, 450, 453, 454, 458, 460, 461, 462, 464, 465, 467, 468, 471, 472, 474, 476, 478, 481, 484, 485, 486, 487, 488, 489, 491, 493, 494, 497, 501, 503, 505, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 529, 530, 531, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 547, 549, 553, 554, 562, 563, 568, 569, 570, 572, 574, 579, 581, 582, 583, 584, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 600, 601, 602, 604, 606, 607, 610, 612, 613, 616, 617, 620, 621, 624, 625, 626, 627, 630, 631, 632, 634, 637, 639, 640, 642, 643, 644, 646, 649, 652, 653, 655, 656, 657, 659, 662, 664, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 722, 723, 725, 726, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 758, 761, 763, 764, 766, 767, 769, 770, 772, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 798, 801, 804, 805, 806, 808, 811, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 828, 829, 830, 831, 836, 838, 840, 841, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 859, 861, 862, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 891, 893, 894, 895, 898, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 946, 949, 950, 952, 955, 956, 957, 959, 960, 961, 962, 963, 964, 968, 971, 972, 973, 974, 975, 976, 979, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023};
                const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  0,0,0b00010},   {  1,1,0b00001},   {  2,0,0b00010},   {  3,0,0b01010},   {  4,1,0b11101},   {  5,0,0b01101},   {  6,0,0b10010},   {  7,0,0b10110},   {  8,1,0b11101},   {  9,0,0b10100},   { 10,0,0b11000},   { 11,1,0b11111},   { 12,0,0b10101},   { 13,0,0b10111},   { 14,1,0b11001},   { 15,0,0b00001},   { 16,1,0b11000},   { 17,0,0b11011},   { 18,1,0b11011},   { 19,0,0b00001},   { 20,0,0b11011},   { 21,0,0b11101},   { 22,1,0b11111},   { 23,1,0b01101},   { 24,0,0b10100},   { 25,1,0b10110},   { 26,1,0b11101},   { 27,0,0b01000},   { 28,0,0b00001},   { 29,0,0b00011},   { 30,1,0b00111},   { 31,0,0b01111},   { 32,1,0b11001},   { 33,1,0b01001},   { 34,1,0b00010},   { 35,0,0b10101},   { 36,1,0b11111},   { 37,1,0b10010},   { 38,0,0b01000},   { 39,0,0b00111},   { 40,1,0b10011},   { 41,0,0b10001},   { 42,1,0b11001},   { 43,1,0b01001},   { 44,1,0b11110},   { 45,1,0b00010},   { 46,1,0b01101},   { 47,1,0b10000},   { 48,0,0b01000},   { 49,1,0b00110},   { 50,0,0b10000},   { 51,0,0b10100},   { 52,1,0b11011},   { 53,1,0b00010},   { 54,1,0b11000},   { 55,1,0b11111},   { 56,1,0b11111},   { 57,1,0b00111},   { 58,0,0b01011},   { 59,1,0b01110},   { 60,1,0b01010},   { 61,0,0b00100},   { 62,0,0b01100},   { 63,1,0b01101},   { 64,0,0b00010},   { 65,1,0b10001},   { 66,0,0b01101},   { 67,1,0b11001},   { 68,1,0b11000},   { 69,0,0b00011},   { 70,1,0b01010},   { 71,1,0b11111},   { 72,1,0b00010},   { 73,0,0b01000},   { 74,1,0b11001},   { 75,1,0b01100},   { 76,1,0b01100},   { 77,1,0b10110},   { 78,1,0b11011},   { 79,0,0b10100},   { 80,0,0b10001},   { 81,1,0b10101},   { 82,1,0b00011},   { 83,1,0b10001},   { 84,1,0b10110},   { 85,0,0b10100},   { 86,0,0b10101},   { 87,1,0b11100},   { 88,1,0b01000},   { 89,1,0b00101},   { 90,1,0b11111},   { 91,1,0b10110},   { 92,0,0b01100},   { 93,0,0b10010},   { 94,0,0b11100},   { 95,1,0b11110},   { 96,0,0b10000},   { 97,1,0b01010},   { 98,1,0b01011},   { 99,1,0b10110},   {100,0,0b00010},   {101,1,0b11000},   {102,1,0b01001},   {103,0,0b00010},   {104,0,0b10101},   {105,0,0b11100},   {106,1,0b11110},   {107,1,0b01010},   {108,1,0b11001},   {109,0,0b01100},   {110,1,0b11100},   {111,1,0b01000},   {112,1,0b01101},   {113,1,0b10110},   {114,1,0b10011},   {115,0,0b10011},   {116,1,0b11001},   {117,1,0b10000},   {118,0,0b00001},   {119,0,0b01011},   {120,1,0b11010},   {121,0,0b00100},   {122,0,0b00100},   {123,1,0b10011},   {124,1,0b00011},   {125,0,0b00011},   {126,1,0b00011},   {127,0,0b10101},   {128,1,0b11101},   {129,1,0b01001},   {130,1,0b11110},   {131,1,0b01010},   {132,1,0b00100},   {133,0,0b01001},   {134,1,0b01101},   {135,1,0b00110},   {136,0,0b01111},   {137,1,0b10010},   {138,1,0b11101},   {139,1,0b11111},   {140,0,0b01011},   {141,1,0b11001},   {142,0,0b00110},   {143,0,0b00111},   {144,0,0b10011},   {145,1,0b10101},   {146,1,0b11100},   {147,1,0b00001},   {148,0,0b01010},   {149,1,0b10110},   {150,1,0b10101},   {151,0,0b00100},   {152,1,0b01010},   {153,0,0b00110},   {154,0,0b01100},   {155,1,0b10111},   {156,1,0b11100},   {157,0,0b11011},   {158,1,0b11011},   {159,1,0b00001},   {160,0,0b01010},   {161,1,0b11110},   {162,1,0b11110},   {163,1,0b00110},   {164,1,0b11011},   {165,1,0b11011},   {166,1,0b10001},   {167,1,0b00101},   {168,1,0b00100},   {169,0,0b10110},   {170,1,0b11111},   {171,1,0b10001},   {172,1,0b11111},   {173,0,0b01000},   {174,1,0b01101},   {175,1,0b10101},   {176,0,0b01010},   {177,1,0b10101},   {178,1,0b01010},   {179,0,0b00001},   {180,1,0b01101},   {181,1,0b11110},   {182,0,0b01001},   {183,0,0b01111},   {184,1,0b10111},   {186,1,0b11110},   {187,1,0b00101},   {190,0,0b01110},   {191,0,0b10001},   {192,1,0b10111},   {193,1,0b11100},   {194,1,0b11010},   {195,0,0b10100},   {196,1,0b11110},   {197,0,0b01110},   {198,1,0b11001},   {199,1,0b01100},   {200,1,0b00100},   {201,0,0b01000},   {202,0,0b01011},   {203,1,0b10100},   {204,1,0b11111},   {205,1,0b00111},   {206,1,0b11111},   {207,1,0b10100},   {208,0,0b10011},   {209,1,0b11010},   {210,1,0b10100},   {211,1,0b10101},   {212,0,0b01110},   {213,1,0b11011},   {214,0,0b11011},   {215,1,0b11110},   {216,1,0b10100},   {217,1,0b00101},   {218,0,0b10100},   {219,0,0b10010},   {220,1,0b10101},   {221,0,0b10000},   {222,0,0b01100},   {223,0,0b01010},   {224,1,0b01001},   {225,1,0b10001},   {226,0,0b10000},   {227,1,0b10010},   {228,1,0b11101},   {229,1,0b10011},   {230,1,0b00001},   {231,1,0b11101},   {232,0,0b00111},   {233,1,0b10001},   {234,1,0b11011},   {235,0,0b00001},   {236,0,0b00110},   {237,0,0b01010},   {238,1,0b11100},   {239,0,0b10000},   {240,1,0b11100},   {241,0,0b01001},   {242,1,0b01011},   {243,1,0b11111},   {244,1,0b01101},   {245,1,0b01110},   {246,0,0b10011},   {247,1,0b10101},   {248,0,0b01110},   {249,1,0b10100},   {250,0,0b10000},   {251,0,0b10010},   {252,0,0b10100},   {253,1,0b10011},   {254,0,0b01011},   {255,1,0b10011},   {256,1,0b00101},   {257,1,0b10101},   {258,1,0b10100},   {259,1,0b10001},   {261,1,0b01100},   {262,1,0b11100},   {265,0,0b10000},   {266,1,0b10111},   {267,1,0b10111},   {269,0,0b00010},   {270,1,0b10110},   {271,1,0b00001},   {272,1,0b01111},   {273,0,0b00101},   {274,0,0b01001},   {275,0,0b10001},   {276,1,0b11111},   {277,1,0b10110},   {278,1,0b00011},   {279,0,0b00101},   {280,1,0b10010},   {281,0,0b00001},   {282,0,0b00111},   {283,1,0b00111},   {284,1,0b01100},   {285,0,0b00001},   {286,1,0b11011},   {288,0,0b01000},   {289,0,0b01111},   {290,1,0b10100},   {291,1,0b00001},   {292,0,0b00110},   {293,1,0b11001},   {296,0,0b01011},   {297,1,0b10100},   {298,0,0b01100},   {299,1,0b10100},   {300,0,0b01100},   {301,1,0b11111},   {302,1,0b11011},   {303,0,0b00111},   {304,0,0b01110},   {305,1,0b11101},   {306,0,0b00011},   {307,0,0b01110},   {308,1,0b10011},   {309,1,0b01011},   {310,0,0b01111},   {311,1,0b11011},   {312,0,0b01100},   {313,0,0b01001},   {314,1,0b10011},   {315,1,0b00101},   {316,0,0b01010},   {317,1,0b01100},   {318,0,0b01000},   {319,1,0b01101},   {320,1,0b00101},   {321,0,0b00101},   {322,1,0b01011},   {323,0,0b01001},   {324,1,0b11011},   {325,0,0b10000},   {326,1,0b10101},   {327,0,0b00100},   {328,1,0b01111},   {329,1,0b01001},   {330,0,0b10001},   {331,0,0b11010},   {332,1,0b11011},   {333,1,0b11010},   {334,0,0b01100},   {335,0,0b11000},   {336,1,0b10011},   {337,0,0b01111},   {338,1,0b11110},   {339,0,0b01100},   {340,0,0b10001},   {341,0,0b10011},   {342,0,0b10101},   {343,0,0b11011},   {344,1,0b11111},   {345,0,0b00111},   {346,1,0b01100},   {347,1,0b01001},   {348,0,0b10111},   {349,1,0b11011},   {350,1,0b01111},   {351,1,0b00101},   {352,0,0b00011},   {353,0,0b01001},   {354,1,0b11001},   {355,0,0b00001},   {356,1,0b01100},   {357,1,0b10000},   {358,1,0b11101},   {359,1,0b00001},   {360,0,0b01010},   {361,0,0b10011},   {362,1,0b11101},   {363,0,0b10100},   {364,1,0b11011},   {365,1,0b10110},   {366,1,0b01101},   {367,1,0b10010},   {368,1,0b01110},   {369,1,0b00110},   {370,0,0b01111},   {371,0,0b10110},   {372,0,0b10110},   {373,1,0b11011},   {374,0,0b01011},   {375,1,0b10101},   {376,0,0b10000},   {377,0,0b00111},   {378,1,0b11000},   {379,1,0b10001},   {380,0,0b01110},   {381,1,0b10010},   {382,0,0b10000},   {383,0,0b00011},   {384,1,0b10001},   {385,0,0b00111},   {386,0,0b11010},   {387,1,0b11001},   {388,0,0b00100},   {389,1,0b10101},   {390,1,0b01010},   {391,1,0b11010},   {392,1,0b00101},   {393,1,0b00111},   {394,0,0b01111},   {395,0,0b10100},   {396,0,0b10100},   {397,1,0b10011},   {398,1,0b10110},   {399,1,0b00100},   {400,0,0b11100},   {401,1,0b11101},   {402,0,0b00001},   {403,1,0b10110},   {404,1,0b10011},   {405,0,0b10010},   {406,1,0b10111},   {407,0,0b11100},   {408,1,0b11010},   {409,1,0b00111},   {410,1,0b10001},   {411,1,0b10110},   {412,0,0b00011},   {413,1,0b10011},   {414,1,0b00101},   {415,0,0b01111},   {416,1,0b11111},   {417,0,0b00110},   {418,1,0b01100},   {419,1,0b10111},   {420,1,0b10110},   {421,1,0b11111},   {422,1,0b01101},   {424,1,0b01100},   {426,0,0b00010},   {427,1,0b01100},   {429,0,0b00001},   {430,0,0b00011},   {431,1,0b11001},   {432,1,0b10001},   {433,0,0b00001},   {434,1,0b11001},   {435,1,0b11010},   {437,1,0b01011},   {439,0,0b10001},   {440,1,0b11001},   {442,1,0b01001},   {443,1,0b01100},   {444,1,0b11010},   {446,1,0b10101},   {448,0,0b10000},   {449,0,0b01101},   {450,0,0b11000},   {451,1,0b11010},   {452,0,0b01111},   {453,1,0b10011},   {454,1,0b01110},   {455,1,0b01100},   {456,0,0b10111},   {457,1,0b11001},   {458,1,0b10100},   {459,1,0b10100},   {460,0,0b00011},   {461,0,0b01100},   {462,1,0b01011},   {463,1,0b11010},   {464,1,0b10000},   {466,1,0b10100},   {468,1,0b10110},   {469,1,0b01100},   {470,0,0b00101},   {471,0,0b10110},   {472,1,0b11111},   {473,0,0b11001},   {474,1,0b11110},   {476,1,0b01101},   {477,1,0b00101},   {482,1,0b11010},   {484,1,0b01001},   {485,1,0b11100},   {486,1,0b10101},   {488,1,0b10110},   {489,1,0b00011},   {491,0,0b01010},   {492,1,0b01010},   {493,1,0b00001},   {495,0,0b01001},   {496,1,0b11110},   {497,0,0b10001},   {498,1,0b11011},   {499,1,0b01000},   {501,0,0b11001},   {502,1,0b11100},   {503,0,0b00001},   {504,0,0b11010},   {505,0,0b11011},   {506,1,0b11101},   {507,1,0b00111},   {509,1,0b01101},   {510,0,0b01010},   {511,1,0b10011},   {512,0,0b00001},   {513,1,0b01010},   {514,1,0b10011},   {515,0,0b00101},   {516,1,0b11100},   {517,0,0b01010},   {518,1,0b11011},   {519,0,0b10000},   {520,1,0b10101},   {521,1,0b11010},   {522,1,0b10000},   {523,1,0b11111},   {527,0,0b01000},   {528,0,0b01001},   {529,1,0b10100},   {530,0,0b01110},   {531,0,0b01111},   {532,0,0b10011},   {533,0,0b11101},   {534,1,0b11101},   {535,1,0b11010},   {536,1,0b00110},   {537,1,0b11001},   {538,0,0b01100},   {539,0,0b10010},   {540,1,0b10001},   {541,0,0b10110},   {542,1,0b11100},   {543,0,0b01111},   {544,1,0b10010},   {545,0,0b00011},   {546,0,0b00110},   {547,1,0b10001},   {548,1,0b01011},   {549,1,0b01111},   {550,1,0b10101},   {551,1,0b00111},   {552,1,0b10011},   {553,1,0b10110},   {554,0,0b00001},   {555,1,0b00010},   {556,1,0b00011},   {557,1,0b01010},   {558,0,0b01000},   {559,1,0b01100},   {560,0,0b01010},   {561,1,0b01011},   {562,1,0b11010},   {563,1,0b01011},   {564,0,0b11010},   {565,1,0b11111},   {566,0,0b01001},   {567,1,0b10110},   {568,1,0b01111},   {569,1,0b10001},   {570,0,0b01100},   {571,1,0b10110},   {572,1,0b11110},   {573,1,0b10010},   {574,0,0b10000},   {575,0,0b01110},   {576,1,0b11101},   {577,0,0b10001},   {578,1,0b10011},   {579,1,0b10101},   {580,1,0b11011},   {582,1,0b00111},   {583,1,0b00110},   {591,1,0b00010},   {592,1,0b00101},   {597,1,0b11101},   {598,1,0b00100},   {599,1,0b10010},   {602,1,0b11110},   {604,1,0b01100},   {609,1,0b00101},   {611,1,0b10101},   {612,0,0b01001},   {613,1,0b01110},   {614,1,0b10011},   {615,1,0b01000},   {616,0,0b01111},   {617,1,0b11001},   {618,1,0b11011},   {619,1,0b10011},   {620,0,0b00101},   {621,1,0b11110},   {623,1,0b00111},   {624,0,0b10110},   {625,1,0b11101},   {626,1,0b01100},   {627,0,0b00111},   {628,0,0b11100},   {629,1,0b11001},   {630,1,0b11101},   {631,0,0b01010},   {632,0,0b10110},   {633,1,0b11110},   {634,1,0b10011},   {635,1,0b10011},   {636,1,0b01111},   {637,1,0b10111},   {638,0,0b00010},   {639,1,0b01111},   {640,1,0b01001},   {641,0,0b00011},   {642,0,0b00011},   {643,1,0b00111},   {644,1,0b10011},   {645,1,0b01001},   {646,0,0b01000},   {647,0,0b00010},   {648,0,0b00111},   {649,1,0b11000},   {650,1,0b00010},   {651,1,0b10111},   {652,1,0b00011},   {653,0,0b01110},   {654,1,0b10010},   {655,0,0b01101},   {656,1,0b01111},   {657,0,0b01001},   {658,0,0b10001},   {659,0,0b10100},   {660,0,0b10010},   {661,0,0b11010},   {662,1,0b11110},   {663,0,0b10001},   {664,1,0b11101},   {665,0,0b00001},   {666,0,0b01100},   {667,1,0b11000},   {668,1,0b00111},   {669,1,0b00100},   {670,0,0b10000},   {671,0,0b00001},   {672,1,0b01001},   {673,1,0b00101},   {674,0,0b11000},   {675,1,0b10011},   {676,0,0b01110},   {677,1,0b10001},   {678,1,0b01001},   {679,1,0b00011},   {680,1,0b00111},   {681,0,0b00010},   {682,1,0b11100},   {683,1,0b00010},   {684,0,0b01111},   {685,1,0b11010},   {686,1,0b11110},   {687,0,0b00100},   {688,0,0b10010},   {689,1,0b11110},   {690,1,0b11000},   {691,0,0b01100},   {692,0,0b01001},   {693,1,0b11110},   {694,1,0b11001},   {695,0,0b00111},   {696,1,0b01111},   {697,1,0b10001},   {698,1,0b01101},   {699,0,0b00100},   {700,1,0b00110},   {701,0,0b00100},   {702,1,0b01101},   {703,0,0b00001},   {704,0,0b01110},   {705,1,0b01110},   {706,0,0b00010},   {707,1,0b01101},   {708,0,0b00101},   {709,1,0b10100},   {710,1,0b01101},   {711,0,0b00001},   {712,1,0b10010},   {713,1,0b11110},   {714,1,0b00110},   {715,0,0b00001},   {716,0,0b01101},   {717,1,0b10001},   {718,1,0b00111},   {719,1,0b10101},   {720,1,0b01011},   {721,1,0b11111},   {722,0,0b00111},   {723,1,0b11110},   {724,0,0b00001},   {725,1,0b11110},   {726,1,0b10111},   {727,0,0b10111},   {728,1,0b11101},   {729,1,0b01000},   {730,1,0b10000},   {731,1,0b11110},   {732,0,0b01110},   {733,1,0b10010},   {734,0,0b10111},   {735,1,0b10111},   {736,1,0b01010},   {737,1,0b11111},   {738,1,0b11000},   {739,0,0b10110},   {740,1,0b10110},   {741,1,0b01111},   {742,1,0b01010},   {743,0,0b11000},   {744,1,0b11101},   {745,0,0b00101},   {746,1,0b10011},   {747,0,0b10001},   {748,0,0b10001},   {749,1,0b11010},   {750,1,0b10000},   {751,1,0b01001},   {752,0,0b11101},   {753,1,0b11101},   {754,0,0b00110},   {755,1,0b00101},   {756,1,0b01001},   {757,1,0b10000},   {758,1,0b01011},   {759,0,0b00001},   {760,1,0b10011},   {761,1,0b01011},   {762,0,0b01000},   {763,1,0b11010},   {764,1,0b00111},   {765,1,0b11011},   {766,0,0b00001},   {767,1,0b00110},   {768,1,0b10001},   {769,1,0b00001},   {770,1,0b10010},   {771,1,0b00001},   {772,1,0b00111},   {773,1,0b11110},   {774,1,0b01000},   {775,1,0b11000},   {776,1,0b01101},   {777,0,0b00010},   {778,1,0b01010},   {779,1,0b00001},   {780,1,0b01101},   {781,0,0b00011},   {782,1,0b10110},   {783,0,0b00011},   {784,0,0b10101},   {785,1,0b10110},   {786,1,0b01111},   {787,0,0b01111},   {788,1,0b11010},   {789,1,0b10000},   {790,0,0b01110},   {791,1,0b11000},   {792,1,0b10010},   {793,0,0b01110},   {794,1,0b01101},   {795,1,0b01111},   {796,1,0b10000},   {797,0,0b00100},   {798,1,0b01111},   {799,0,0b00110},   {800,1,0b10111},   {801,1,0b11011},   {802,0,0b00010},   {803,1,0b11101},   {804,1,0b01011},   {805,1,0b11000},   {806,1,0b00111},   {807,0,0b00100},   {808,1,0b10101},   {809,0,0b00010},   {810,1,0b01110},   {811,1,0b00101},   {812,0,0b01011},   {813,1,0b11100},   {814,1,0b01000},   {815,0,0b00100},   {816,0,0b10000},   {817,1,0b11001},   {818,0,0b01101},   {819,1,0b11101},   {820,1,0b00100},   {821,1,0b01011},   {822,0,0b01111},   {823,0,0b10111},   {824,0,0b11001},   {825,0,0b11110},   {826,1,0b11101},   {827,1,0b11011},   {828,1,0b00111},   {829,1,0b10100},   {830,1,0b00110},   {831,0,0b01011},   {832,1,0b11110},   {833,1,0b00100},   {834,1,0b10001},   {835,1,0b01101},   {836,0,0b00001},   {837,1,0b11001},   {838,1,0b11001},   {839,1,0b10111},   {840,0,0b00010},   {841,0,0b10010},   {842,0,0b10011},   {843,1,0b11001},   {844,0,0b00010},   {845,1,0b10010},   {846,0,0b00010},   {847,0,0b01110},   {848,1,0b11011},   {849,1,0b00011},   {850,0,0b00110},   {851,0,0b01011},   {852,1,0b11000},   {853,1,0b11001},   {854,0,0b00001},   {855,1,0b01001},   {856,1,0b01100},   {857,0,0b00001},   {858,1,0b01011},   {859,1,0b01010},   {860,0,0b00111},   {861,1,0b01100},   {862,1,0b00010},   {863,1,0b11101},   {864,0,0b00011},   {865,0,0b11100},   {866,0,0b11011},   {867,1,0b11111},   {868,1,0b10010},   {869,0,0b00111},   {870,1,0b11101},   {871,1,0b01010},   {872,0,0b01100},   {873,1,0b10100},   {874,1,0b10111},   {875,1,0b01000},   {876,1,0b00011},   {877,1,0b11011},   {878,1,0b00110},   {879,1,0b10111},   {880,1,0b10011},   {881,0,0b01000},   {882,0,0b10111},   {883,1,0b11011},   {884,1,0b11111},   {885,1,0b10111},   {886,0,0b10011},   {887,1,0b11010},   {888,1,0b00101},   {889,1,0b00001},   {890,1,0b10101},   {891,0,0b01000},   {892,1,0b10101},   {893,1,0b00011},   {894,0,0b00101},   {895,1,0b11101},   {896,0,0b01000},   {897,1,0b10110},   {898,0,0b10100},   {899,1,0b11101},   {900,0,0b00110},   {901,1,0b00111},   {902,0,0b00101},   {903,0,0b11010},   {904,1,0b11110},   {905,0,0b01100},   {906,1,0b10011},   {907,0,0b01100},   {908,1,0b11100},   {909,1,0b11011},   {910,0,0b01111},   {911,1,0b11011},   {912,0,0b00001},   {913,1,0b10100},   {914,1,0b01010},   {915,1,0b01010},   {916,0,0b00010},   {917,1,0b01000},   {918,1,0b10100},   {919,0,0b01011},   {920,0,0b11000},   {921,1,0b11011},   {922,1,0b00011},   {923,0,0b00001},   {924,1,0b00111},   {925,1,0b10100},   {926,0,0b00111},   {927,1,0b10011},   {928,1,0b01011},   {929,0,0b01000},   {930,1,0b10101},   {931,0,0b10100},   {932,1,0b10111},   {933,0,0b11100},   {934,1,0b11111},   {935,1,0b01000},   {936,1,0b11101},   {937,1,0b11001},   {938,0,0b00100},   {939,1,0b10110},   {940,1,0b01000},   {941,0,0b00010},   {942,0,0b01000},   {943,0,0b00101},   {944,0,0b01001},   {945,0,0b10101},   {946,0,0b11011},   {947,1,0b11110},   {948,1,0b11001},   {949,0,0b01001},   {950,0,0b11001},   {951,0,0b11011},   {952,0,0b11101},   {953,1,0b11101},   {954,1,0b11101},   {955,1,0b00010},   {956,1,0b11011},   {957,1,0b11110},   {958,1,0b10001},   {959,1,0b01010},   {960,1,0b00110},   {961,1,0b00101},   {962,0,0b00010},   {963,1,0b11100},   {964,1,0b01100},   {965,0,0b10000},   {966,0,0b00101},   {967,1,0b01110},   {968,0,0b10010},   {969,1,0b11000},   {970,1,0b10110},   {971,0,0b10001},   {972,1,0b10011},   {973,1,0b01110},   {974,1,0b01101},   {975,0,0b00110},   {976,1,0b11100},   {977,1,0b00100},   {978,1,0b00010},   {979,1,0b00101},   {980,1,0b11011},   {981,1,0b11101},   {982,0,0b01000},   {983,1,0b11010},   {984,1,0b00011},   {985,1,0b00101},   {986,1,0b10001},   {987,1,0b00010},   {988,0,0b01010},   {989,1,0b01101},   {990,1,0b10010},   {991,0,0b00101},   {992,1,0b10111},   {993,1,0b10111},   {994,0,0b10000},   {995,0,0b10111},   {996,1,0b11001},   {997,0,0b00110},   {998,1,0b01001},   {999,0,0b01100},   {1000,1,0b10010},   {1001,1,0b11001},   {1002,1,0b11110},   {1003,0,0b00100},   {1004,0,0b00001},   {1005,0,0b10111},   {1006,1,0b11111},   {1007,1,0b01111},   {1008,1,0b00100},   {1009,1,0b11100},   {1010,1,0b00001},   {1011,1,0b11111},   {1012,0,0b00011},   {1013,1,0b10001},   {1014,1,0b11101},   {1015,1,0b11110},   {1016,1,0b01001},   {1017,1,0b10100},   {1018,1,0b00111},   {1019,1,0b01001},   {1020,1,0b00011},   {1021,1,0b10011},   {1022,1,0b00101},   {1023,0,0b00001},   {1024,0,0b00111},   {1025,1,0b10011},   {1026,0,0b10010},   {1027,1,0b10110},   {1028,1,0b10110},   {1029,1,0b10110},   {1030,0,0b01000},   {1031,0,0b01010},   {1032,1,0b11010},   {1033,1,0b10111},   {1034,1,0b11011},   {1035,0,0b10000},   {1036,1,0b00100},   {1037,1,0b10101},   {1038,0,0b00110},   {1039,1,0b11000},   {1040,1,0b01001},   {1041,1,0b00001},   {1042,1,0b11001},   {1043,0,0b00010},   {1044,0,0b00100},   {1045,1,0b00110},   {1046,0,0b11000},   {1047,1,0b10111},   {1048,0,0b00110},   {1049,0,0b01111},   {1050,1,0b11000},   {1051,1,0b01100},   {1052,1,0b11101},   {1053,1,0b00110},   {1054,1,0b01110},   {1055,1,0b00001},   {1056,0,0b10000},   {1057,1,0b10111},   {1058,0,0b00011},   {1059,1,0b10100},   {1060,1,0b00010},   {1061,1,0b11011},   {1062,0,0b00101},   {1063,0,0b00111},   {1064,1,0b10011},   {1065,1,0b11111},   {1066,0,0b10000},   {1067,1,0b10101},   {1068,0,0b10000},   {1069,0,0b01100},   {1070,0,0b10100},   {1071,0,0b11000},   {1072,0,0b10101},   {1073,0,0b10110},   {1074,1,0b11111},   {1075,0,0b00001},   {1076,1,0b00011}};
                AssertStoreContents(s, store, occupieds_pos, checks);
            }
        }

        SUBCASE("destroy run, shift left") {
            s.DeleteRawFromInfixStore(store, 0b00000011111011);
            const std::vector<uint32_t> occupieds_pos = {0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 22, 24, 26, 28, 29, 31, 32, 34, 36, 38, 39, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 78, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 127, 131, 135, 136, 138, 143, 144, 145, 147, 148, 152, 153, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 177, 178, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 221, 224, 226, 227, 228, 231, 232, 233, 236, 237, 240, 241, 244, 246, 247, 248, 249, 252, 254, 256, 257, 258, 259, 263, 264, 265, 266, 269, 271, 274, 276, 278, 282, 283, 284, 287, 288, 289, 290, 291, 294, 296, 297, 300, 301, 302, 303, 307, 309, 311, 313, 314, 315, 316, 317, 320, 323, 324, 325, 326, 327, 328, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 366, 370, 372, 373, 374, 376, 379, 380, 381, 385, 386, 388, 391, 394, 396, 397, 403, 405, 408, 410, 412, 413, 416, 418, 420, 421, 422, 424, 426, 427, 430, 431, 432, 433, 434, 437, 438, 440, 443, 445, 446, 447, 450, 453, 454, 458, 460, 461, 462, 464, 465, 467, 468, 471, 472, 474, 476, 478, 481, 484, 485, 486, 487, 488, 489, 491, 493, 494, 497, 501, 503, 505, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 529, 530, 531, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 547, 549, 553, 554, 562, 563, 568, 569, 570, 572, 574, 579, 581, 582, 583, 584, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 600, 601, 602, 604, 606, 607, 610, 612, 613, 616, 617, 620, 621, 624, 625, 626, 627, 630, 631, 632, 634, 637, 639, 640, 642, 643, 644, 646, 649, 652, 653, 655, 656, 657, 659, 662, 664, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 722, 723, 725, 726, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 758, 761, 763, 764, 766, 767, 769, 770, 772, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 798, 801, 804, 805, 806, 808, 811, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 828, 829, 830, 831, 836, 838, 840, 841, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 859, 861, 862, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 891, 893, 894, 895, 898, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 946, 949, 950, 952, 955, 956, 957, 959, 960, 961, 962, 963, 964, 968, 971, 972, 973, 974, 975, 976, 979, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023};
            const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  0,0,0b00010},   {  1,1,0b00001},   {  2,0,0b00010},   {  3,0,0b01010},   {  4,1,0b11101},   {  5,0,0b01101},   {  6,0,0b10010},   {  7,0,0b10110},   {  8,1,0b11101},   {  9,0,0b10100},   { 10,0,0b11000},   { 11,0,0b10110},   { 12,0,0b10101},   { 13,1,0b11111},   { 14,0,0b10101},   { 15,0,0b10111},   { 16,1,0b11001},   { 17,0,0b00001},   { 18,1,0b11000},   { 19,1,0b11011},   { 20,0,0b00001},   { 21,0,0b11011},   { 22,0,0b11101},   { 23,1,0b11111},   { 24,1,0b01101},   { 25,0,0b10100},   { 26,1,0b10110},   { 27,1,0b11101},   { 28,0,0b01000},   { 29,0,0b00001},   { 30,0,0b00011},   { 31,1,0b00111},   { 32,0,0b01111},   { 33,1,0b11001},   { 34,1,0b01001},   { 35,1,0b00010},   { 36,0,0b10101},   { 37,1,0b11111},   { 38,1,0b10010},   { 39,0,0b01000},   { 40,0,0b00111},   { 41,1,0b10011},   { 42,0,0b10001},   { 43,1,0b11001},   { 44,1,0b01001},   { 45,1,0b11110},   { 46,1,0b00010},   { 47,1,0b01101},   { 48,1,0b10000},   { 49,0,0b01000},   { 50,1,0b00110},   { 51,0,0b10000},   { 52,0,0b10100},   { 53,1,0b11011},   { 54,1,0b00010},   { 55,1,0b11000},   { 56,1,0b11111},   { 57,1,0b11111},   { 58,1,0b00111},   { 59,0,0b01011},   { 60,1,0b01110},   { 61,1,0b01010},   { 62,0,0b00100},   { 63,0,0b01100},   { 64,1,0b01101},   { 65,0,0b00010},   { 66,1,0b10001},   { 67,0,0b01101},   { 68,1,0b11001},   { 69,1,0b11000},   { 70,0,0b00011},   { 71,1,0b01010},   { 72,1,0b11111},   { 73,1,0b00010},   { 74,0,0b01000},   { 75,1,0b11001},   { 76,1,0b01100},   { 77,1,0b01100},   { 78,1,0b10110},   { 79,1,0b11011},   { 80,0,0b10100},   { 81,0,0b10001},   { 82,1,0b10101},   { 83,1,0b00011},   { 84,1,0b10001},   { 85,1,0b10110},   { 86,0,0b10100},   { 87,0,0b10101},   { 88,1,0b11100},   { 89,1,0b01000},   { 90,1,0b00101},   { 91,1,0b11111},   { 92,1,0b10110},   { 93,0,0b01100},   { 94,0,0b10010},   { 95,0,0b11100},   { 96,1,0b11110},   { 97,0,0b10000},   { 98,1,0b01010},   { 99,1,0b01011},   {100,1,0b10110},   {101,0,0b00010},   {102,1,0b11000},   {103,1,0b01001},   {104,0,0b00010},   {105,0,0b10101},   {106,0,0b11100},   {107,1,0b11110},   {108,1,0b01010},   {109,1,0b11001},   {110,0,0b01100},   {111,1,0b11100},   {112,1,0b01000},   {113,1,0b01101},   {114,1,0b10110},   {115,1,0b10011},   {116,0,0b10011},   {117,1,0b11001},   {118,1,0b10000},   {119,0,0b00001},   {120,0,0b01011},   {121,1,0b11010},   {122,0,0b00100},   {123,0,0b00100},   {124,1,0b10011},   {125,1,0b00011},   {126,0,0b00011},   {127,1,0b00011},   {128,0,0b10101},   {129,1,0b11101},   {130,1,0b01001},   {131,1,0b11110},   {132,1,0b01010},   {133,1,0b00100},   {134,0,0b01001},   {135,1,0b01101},   {136,1,0b00110},   {137,0,0b01111},   {138,1,0b10010},   {139,1,0b11101},   {140,1,0b11111},   {141,0,0b01011},   {142,1,0b11001},   {143,0,0b00110},   {144,0,0b00111},   {145,0,0b10011},   {146,1,0b10101},   {147,1,0b11100},   {148,1,0b00001},   {149,0,0b01010},   {150,1,0b10110},   {151,1,0b10101},   {152,0,0b00100},   {153,1,0b01010},   {154,0,0b00110},   {155,0,0b01100},   {156,1,0b10111},   {157,1,0b11100},   {158,0,0b11011},   {159,1,0b11011},   {160,1,0b00001},   {161,0,0b01010},   {162,1,0b11110},   {163,1,0b11110},   {164,1,0b00110},   {165,1,0b11011},   {166,1,0b11011},   {167,1,0b10001},   {168,1,0b00101},   {169,1,0b00100},   {170,0,0b10110},   {171,1,0b11111},   {172,1,0b10001},   {173,1,0b11111},   {174,0,0b01000},   {175,1,0b01101},   {176,1,0b10101},   {177,0,0b01010},   {178,1,0b10101},   {179,1,0b01010},   {180,0,0b00001},   {181,1,0b01101},   {182,1,0b11110},   {183,0,0b01001},   {184,0,0b01111},   {185,1,0b10111},   {186,1,0b11110},   {187,1,0b00101},   {190,0,0b01110},   {191,0,0b10001},   {192,1,0b10111},   {193,1,0b11100},   {194,1,0b11010},   {195,0,0b10100},   {196,1,0b11110},   {197,0,0b01110},   {198,1,0b11001},   {199,1,0b01100},   {200,1,0b00100},   {201,0,0b01000},   {202,0,0b01011},   {203,1,0b10100},   {204,1,0b11111},   {205,1,0b00111},   {206,1,0b11111},   {207,1,0b10100},   {208,0,0b10011},   {209,1,0b11010},   {210,1,0b10100},   {211,1,0b10101},   {212,0,0b01110},   {213,1,0b11011},   {214,0,0b11011},   {215,1,0b11110},   {216,1,0b10100},   {217,1,0b00101},   {218,0,0b10100},   {219,0,0b10010},   {220,1,0b10101},   {221,0,0b10000},   {222,0,0b01100},   {223,0,0b01010},   {224,1,0b01001},   {225,1,0b10001},   {226,0,0b10000},   {227,1,0b10010},   {228,1,0b11101},   {229,1,0b10011},   {230,1,0b00001},   {231,1,0b11101},   {232,0,0b00111},   {233,1,0b10001},   {234,1,0b11011},   {235,0,0b00001},   {236,0,0b00110},   {237,0,0b01010},   {238,1,0b11100},   {239,0,0b10000},   {240,1,0b11100},   {241,0,0b01001},   {242,1,0b01011},   {243,1,0b11111},   {244,1,0b01101},   {245,1,0b01110},   {246,0,0b10011},   {247,1,0b10101},   {248,0,0b01110},   {249,1,0b10100},   {250,0,0b10000},   {251,0,0b10010},   {252,0,0b10100},   {253,1,0b10011},   {254,0,0b01011},   {255,1,0b10011},   {256,1,0b00101},   {257,1,0b10101},   {258,1,0b10100},   {259,1,0b10001},   {261,1,0b01100},   {262,1,0b11100},   {265,0,0b10000},   {266,1,0b10111},   {267,1,0b10111},   {269,0,0b00010},   {270,1,0b10110},   {271,1,0b00001},   {272,1,0b01111},   {273,0,0b00101},   {274,0,0b01001},   {275,0,0b10001},   {276,1,0b11111},   {277,1,0b10110},   {278,1,0b00011},   {279,0,0b00101},   {280,1,0b10010},   {281,0,0b00001},   {282,0,0b00111},   {283,1,0b00111},   {284,1,0b01100},   {285,0,0b00001},   {286,1,0b11011},   {288,0,0b01000},   {289,0,0b01111},   {290,1,0b10100},   {291,1,0b00001},   {292,0,0b00110},   {293,1,0b11001},   {296,0,0b01011},   {297,1,0b10100},   {298,0,0b01100},   {299,1,0b10100},   {300,0,0b01100},   {301,1,0b11111},   {302,1,0b11011},   {303,0,0b00111},   {304,0,0b01110},   {305,1,0b11101},   {306,0,0b00011},   {307,0,0b01110},   {308,1,0b10011},   {309,1,0b01011},   {310,0,0b01111},   {311,1,0b11011},   {312,0,0b01100},   {313,0,0b01001},   {314,1,0b10011},   {315,1,0b00101},   {316,0,0b01010},   {317,1,0b01100},   {318,0,0b01000},   {319,1,0b01101},   {320,1,0b00101},   {321,0,0b00101},   {322,1,0b01011},   {323,0,0b01001},   {324,1,0b11011},   {325,0,0b10000},   {326,1,0b10101},   {327,0,0b00100},   {328,1,0b01111},   {329,1,0b01001},   {330,0,0b10001},   {331,0,0b11010},   {332,1,0b11011},   {333,1,0b11010},   {334,0,0b01100},   {335,0,0b11000},   {336,1,0b10011},   {337,0,0b01111},   {338,1,0b11110},   {339,0,0b01100},   {340,0,0b10001},   {341,0,0b10011},   {342,0,0b10101},   {343,0,0b11011},   {344,1,0b11111},   {345,0,0b00111},   {346,1,0b01100},   {347,1,0b01001},   {348,0,0b10111},   {349,1,0b11011},   {350,1,0b01111},   {351,1,0b00101},   {352,0,0b00011},   {353,0,0b01001},   {354,1,0b11001},   {355,0,0b00001},   {356,1,0b01100},   {357,1,0b10000},   {358,1,0b11101},   {359,1,0b00001},   {360,0,0b01010},   {361,0,0b10011},   {362,1,0b11101},   {363,0,0b10100},   {364,1,0b11011},   {365,1,0b10110},   {366,1,0b01101},   {367,1,0b10010},   {368,1,0b01110},   {369,1,0b00110},   {370,0,0b01111},   {371,0,0b10110},   {372,0,0b10110},   {373,1,0b11011},   {374,0,0b01011},   {375,1,0b10101},   {376,0,0b10000},   {377,0,0b00111},   {378,1,0b11000},   {379,1,0b10001},   {380,0,0b01110},   {381,1,0b10010},   {382,0,0b10000},   {383,0,0b00011},   {384,1,0b10001},   {385,0,0b00111},   {386,0,0b11010},   {387,1,0b11001},   {388,0,0b00100},   {389,1,0b10101},   {390,1,0b01010},   {391,1,0b11010},   {392,1,0b00101},   {393,1,0b00111},   {394,0,0b01111},   {395,0,0b10100},   {396,0,0b10100},   {397,1,0b10011},   {398,1,0b10110},   {399,1,0b00100},   {400,0,0b11100},   {401,1,0b11101},   {402,0,0b00001},   {403,1,0b10110},   {404,1,0b10011},   {405,0,0b10010},   {406,1,0b10111},   {407,0,0b11100},   {408,1,0b11010},   {409,1,0b00111},   {410,1,0b10001},   {411,1,0b10110},   {412,0,0b00011},   {413,1,0b10011},   {414,1,0b00101},   {415,0,0b01111},   {416,1,0b11111},   {417,0,0b00110},   {418,1,0b01100},   {419,1,0b10111},   {420,1,0b10110},   {421,1,0b11111},   {422,1,0b01101},   {424,1,0b01100},   {426,0,0b00010},   {427,1,0b01100},   {429,0,0b00001},   {430,0,0b00011},   {431,1,0b11001},   {432,1,0b10001},   {433,0,0b00001},   {434,1,0b11001},   {435,1,0b11010},   {437,1,0b01011},   {439,0,0b10001},   {440,1,0b11001},   {442,1,0b01001},   {443,1,0b01100},   {444,1,0b11010},   {446,1,0b10101},   {448,0,0b10000},   {449,0,0b01101},   {450,0,0b11000},   {451,1,0b11010},   {452,0,0b01111},   {453,1,0b10011},   {454,1,0b01110},   {455,1,0b01100},   {456,0,0b10111},   {457,1,0b11001},   {458,1,0b10100},   {459,1,0b10100},   {460,0,0b00011},   {461,0,0b01100},   {462,1,0b01011},   {463,1,0b11010},   {464,1,0b10000},   {466,1,0b10100},   {468,1,0b10110},   {469,1,0b01100},   {470,0,0b00101},   {471,0,0b10110},   {472,1,0b11111},   {473,0,0b11001},   {474,1,0b11110},   {476,1,0b01101},   {477,1,0b00101},   {482,1,0b11010},   {484,1,0b01001},   {485,1,0b11100},   {486,1,0b10101},   {488,1,0b10110},   {489,1,0b00011},   {491,0,0b01010},   {492,1,0b01010},   {493,1,0b00001},   {495,0,0b01001},   {496,1,0b11110},   {497,0,0b10001},   {498,1,0b11011},   {499,1,0b01000},   {501,0,0b11001},   {502,1,0b11100},   {503,0,0b00001},   {504,0,0b11010},   {505,0,0b11011},   {506,1,0b11101},   {507,1,0b00111},   {509,1,0b01101},   {510,0,0b01010},   {511,1,0b10011},   {512,0,0b00001},   {513,1,0b01010},   {514,1,0b10011},   {515,0,0b00101},   {516,1,0b11100},   {517,0,0b01010},   {518,1,0b11011},   {519,0,0b10000},   {520,1,0b10101},   {521,1,0b11010},   {522,1,0b10000},   {523,1,0b11111},   {527,0,0b01000},   {528,0,0b01001},   {529,1,0b10100},   {530,0,0b01110},   {531,0,0b01111},   {532,0,0b10011},   {533,0,0b11101},   {534,1,0b11101},   {535,1,0b11010},   {536,1,0b00110},   {537,1,0b11001},   {538,0,0b01100},   {539,0,0b10010},   {540,1,0b10001},   {541,0,0b10110},   {542,1,0b11100},   {543,0,0b01111},   {544,1,0b10010},   {545,0,0b00011},   {546,0,0b00110},   {547,1,0b10001},   {548,1,0b01011},   {549,1,0b01111},   {550,1,0b10101},   {551,1,0b00111},   {552,1,0b10011},   {553,1,0b10110},   {554,0,0b00001},   {555,1,0b00010},   {556,1,0b00011},   {557,1,0b01010},   {558,0,0b01000},   {559,1,0b01100},   {560,0,0b01010},   {561,1,0b01011},   {562,1,0b11010},   {563,1,0b01011},   {564,0,0b11010},   {565,1,0b11111},   {566,0,0b01001},   {567,1,0b10110},   {568,1,0b01111},   {569,1,0b10001},   {570,0,0b01100},   {571,1,0b10110},   {572,1,0b11110},   {573,1,0b10010},   {574,0,0b10000},   {575,0,0b01110},   {576,1,0b11101},   {577,0,0b10001},   {578,1,0b10011},   {579,1,0b10101},   {580,1,0b11011},   {582,1,0b00111},   {583,1,0b00110},   {591,1,0b00010},   {592,1,0b00101},   {597,1,0b11101},   {598,1,0b00100},   {599,1,0b10010},   {602,1,0b11110},   {604,1,0b01100},   {609,1,0b00101},   {611,1,0b10101},   {612,0,0b01001},   {613,1,0b01110},   {614,1,0b10011},   {615,1,0b01000},   {616,0,0b01111},   {617,1,0b11001},   {618,1,0b11011},   {619,1,0b10011},   {620,0,0b00101},   {621,1,0b11110},   {623,1,0b00111},   {624,0,0b10110},   {625,1,0b11101},   {626,1,0b01100},   {627,0,0b00111},   {628,0,0b11100},   {629,1,0b11001},   {630,1,0b11101},   {631,0,0b01010},   {632,0,0b10110},   {633,1,0b11110},   {634,1,0b10011},   {635,1,0b10011},   {636,1,0b01111},   {637,1,0b10111},   {638,0,0b00010},   {639,1,0b01111},   {640,1,0b01001},   {641,0,0b00011},   {642,0,0b00011},   {643,1,0b00111},   {644,1,0b10011},   {645,1,0b01001},   {646,0,0b01000},   {647,0,0b00010},   {648,0,0b00111},   {649,1,0b11000},   {650,1,0b00010},   {651,1,0b10111},   {652,1,0b00011},   {653,0,0b01110},   {654,1,0b10010},   {655,0,0b01101},   {656,1,0b01111},   {657,0,0b01001},   {658,0,0b10001},   {659,0,0b10100},   {660,0,0b10010},   {661,0,0b11010},   {662,1,0b11110},   {663,0,0b10001},   {664,1,0b11101},   {665,0,0b00001},   {666,0,0b01100},   {667,1,0b11000},   {668,1,0b00111},   {669,1,0b00100},   {670,0,0b10000},   {671,0,0b00001},   {672,1,0b01001},   {673,1,0b00101},   {674,0,0b11000},   {675,1,0b10011},   {676,0,0b01110},   {677,1,0b10001},   {678,1,0b01001},   {679,1,0b00011},   {680,1,0b00111},   {681,0,0b00010},   {682,1,0b11100},   {683,1,0b00010},   {684,0,0b01111},   {685,1,0b11010},   {686,1,0b11110},   {687,0,0b00100},   {688,0,0b10010},   {689,1,0b11110},   {690,1,0b11000},   {691,0,0b01100},   {692,0,0b01001},   {693,1,0b11110},   {694,1,0b11001},   {695,0,0b00111},   {696,1,0b01111},   {697,1,0b10001},   {698,1,0b01101},   {699,0,0b00100},   {700,1,0b00110},   {701,0,0b00100},   {702,1,0b01101},   {703,0,0b00001},   {704,0,0b01110},   {705,1,0b01110},   {706,0,0b00010},   {707,1,0b01101},   {708,0,0b00101},   {709,1,0b10100},   {710,1,0b01101},   {711,0,0b00001},   {712,1,0b10010},   {713,1,0b11110},   {714,1,0b00110},   {715,0,0b00001},   {716,0,0b01101},   {717,1,0b10001},   {718,1,0b00111},   {719,1,0b10101},   {720,1,0b01011},   {721,1,0b11111},   {722,0,0b00111},   {723,1,0b11110},   {724,0,0b00001},   {725,1,0b11110},   {726,1,0b10111},   {727,0,0b10111},   {728,1,0b11101},   {729,1,0b01000},   {730,1,0b10000},   {731,1,0b11110},   {732,0,0b01110},   {733,1,0b10010},   {734,0,0b10111},   {735,1,0b10111},   {736,1,0b01010},   {737,1,0b11111},   {738,1,0b11000},   {739,0,0b10110},   {740,1,0b10110},   {741,1,0b01111},   {742,1,0b01010},   {743,0,0b11000},   {744,1,0b11101},   {745,0,0b00101},   {746,1,0b10011},   {747,0,0b10001},   {748,0,0b10001},   {749,1,0b11010},   {750,1,0b10000},   {751,1,0b01001},   {752,0,0b11101},   {753,1,0b11101},   {754,0,0b00110},   {755,1,0b00101},   {756,1,0b01001},   {757,1,0b10000},   {758,1,0b01011},   {759,0,0b00001},   {760,1,0b10011},   {761,1,0b01011},   {762,0,0b01000},   {763,1,0b11010},   {764,1,0b00111},   {765,1,0b11011},   {766,0,0b00001},   {767,1,0b00110},   {768,1,0b10001},   {769,1,0b00001},   {770,1,0b10010},   {771,1,0b00001},   {772,1,0b00111},   {773,1,0b11110},   {774,1,0b01000},   {775,1,0b11000},   {776,1,0b01101},   {777,0,0b00010},   {778,1,0b01010},   {779,1,0b00001},   {780,1,0b01101},   {781,0,0b00011},   {782,1,0b10110},   {783,0,0b00011},   {784,0,0b10101},   {785,1,0b10110},   {786,1,0b01111},   {787,0,0b01111},   {788,1,0b11010},   {789,1,0b10000},   {790,0,0b01110},   {791,1,0b11000},   {792,1,0b10010},   {793,0,0b01110},   {794,1,0b01101},   {795,1,0b01111},   {796,1,0b10000},   {797,0,0b00100},   {798,1,0b01111},   {799,0,0b00110},   {800,1,0b10111},   {801,1,0b11011},   {802,0,0b00010},   {803,1,0b11101},   {804,1,0b01011},   {805,1,0b11000},   {806,1,0b00111},   {807,0,0b00100},   {808,1,0b10101},   {809,0,0b00010},   {810,1,0b01110},   {811,1,0b00101},   {812,0,0b01011},   {813,1,0b11100},   {814,1,0b01000},   {815,0,0b00100},   {816,0,0b10000},   {817,1,0b11001},   {818,0,0b01101},   {819,1,0b11101},   {820,1,0b00100},   {821,1,0b01011},   {822,0,0b01111},   {823,0,0b10111},   {824,0,0b11001},   {825,0,0b11110},   {826,1,0b11101},   {827,1,0b11011},   {828,1,0b00111},   {829,1,0b10100},   {830,1,0b00110},   {831,0,0b01011},   {832,1,0b11110},   {833,1,0b00100},   {834,1,0b10001},   {835,1,0b01101},   {836,0,0b00001},   {837,1,0b11001},   {838,1,0b11001},   {839,1,0b10111},   {840,0,0b00010},   {841,0,0b10010},   {842,0,0b10011},   {843,1,0b11001},   {844,0,0b00010},   {845,1,0b10010},   {846,0,0b00010},   {847,0,0b01110},   {848,1,0b11011},   {849,1,0b00011},   {850,0,0b00110},   {851,0,0b01011},   {852,1,0b11000},   {853,1,0b11001},   {854,0,0b00001},   {855,1,0b01001},   {856,1,0b01100},   {857,0,0b00001},   {858,1,0b01011},   {859,1,0b01010},   {860,0,0b00111},   {861,1,0b01100},   {862,1,0b00010},   {863,1,0b11101},   {864,0,0b00011},   {865,0,0b11100},   {866,0,0b11011},   {867,1,0b11111},   {868,1,0b10010},   {869,0,0b00111},   {870,1,0b11101},   {871,1,0b01010},   {872,0,0b01100},   {873,1,0b10100},   {874,1,0b10111},   {875,1,0b01000},   {876,1,0b00011},   {877,1,0b11011},   {878,1,0b00110},   {879,1,0b10111},   {880,1,0b10011},   {881,0,0b01000},   {882,0,0b10111},   {883,1,0b11011},   {884,1,0b11111},   {885,1,0b10111},   {886,0,0b10011},   {887,1,0b11010},   {888,1,0b00101},   {889,1,0b00001},   {890,1,0b10101},   {891,0,0b01000},   {892,1,0b10101},   {893,1,0b00011},   {894,0,0b00101},   {895,1,0b11101},   {896,0,0b01000},   {897,1,0b10110},   {898,0,0b10100},   {899,1,0b11101},   {900,0,0b00110},   {901,1,0b00111},   {902,0,0b00101},   {903,0,0b11010},   {904,1,0b11110},   {905,0,0b01100},   {906,1,0b10011},   {907,0,0b01100},   {908,1,0b11100},   {909,1,0b11011},   {910,0,0b01111},   {911,1,0b11011},   {912,0,0b00001},   {913,1,0b10100},   {914,1,0b01010},   {915,1,0b01010},   {916,0,0b00010},   {917,1,0b01000},   {918,1,0b10100},   {919,0,0b01011},   {920,0,0b11000},   {921,1,0b11011},   {922,1,0b00011},   {923,0,0b00001},   {924,1,0b00111},   {925,1,0b10100},   {926,0,0b00111},   {927,1,0b10011},   {928,1,0b01011},   {929,0,0b01000},   {930,1,0b10101},   {931,0,0b10100},   {932,1,0b10111},   {933,0,0b11100},   {934,1,0b11111},   {935,1,0b01000},   {936,1,0b11101},   {937,1,0b11001},   {938,0,0b00100},   {939,1,0b10110},   {940,1,0b01000},   {941,0,0b00010},   {942,0,0b01000},   {943,0,0b00101},   {944,0,0b01001},   {945,0,0b10101},   {946,0,0b11011},   {947,1,0b11110},   {948,1,0b11001},   {949,0,0b01001},   {950,0,0b11001},   {951,0,0b11011},   {952,0,0b11101},   {953,1,0b11101},   {954,1,0b11101},   {955,1,0b00010},   {956,1,0b11011},   {957,1,0b11110},   {958,1,0b10001},   {959,1,0b01010},   {960,1,0b00110},   {961,1,0b00101},   {962,0,0b00010},   {963,1,0b11100},   {964,1,0b01100},   {965,0,0b10000},   {966,0,0b00101},   {967,1,0b01110},   {968,0,0b10010},   {969,1,0b11000},   {970,1,0b10110},   {971,0,0b10001},   {972,1,0b10011},   {973,1,0b01110},   {974,1,0b01101},   {975,0,0b00110},   {976,1,0b11100},   {977,1,0b00100},   {978,1,0b00010},   {979,1,0b00101},   {980,1,0b11011},   {981,1,0b11101},   {982,0,0b01000},   {983,1,0b11010},   {984,1,0b00011},   {985,1,0b00101},   {986,1,0b10001},   {987,1,0b00010},   {988,0,0b01010},   {989,1,0b01101},   {990,1,0b10010},   {991,0,0b00101},   {992,1,0b10111},   {993,1,0b10111},   {994,0,0b10000},   {995,0,0b10111},   {996,1,0b11001},   {997,0,0b00110},   {998,1,0b01001},   {999,0,0b01100},   {1000,1,0b10010},   {1001,1,0b11001},   {1002,1,0b11110},   {1003,0,0b00100},   {1004,0,0b00001},   {1005,0,0b10111},   {1006,1,0b11111},   {1007,1,0b01111},   {1008,1,0b00100},   {1009,1,0b11100},   {1010,1,0b00001},   {1011,1,0b11111},   {1012,0,0b00011},   {1013,1,0b10001},   {1014,1,0b11101},   {1015,1,0b11110},   {1016,1,0b01001},   {1017,1,0b10100},   {1018,1,0b00111},   {1019,1,0b01001},   {1020,1,0b00011},   {1021,1,0b10011},   {1022,1,0b00101},   {1023,0,0b00001},   {1024,0,0b00111},   {1025,1,0b10011},   {1026,0,0b10010},   {1027,1,0b10110},   {1028,1,0b10110},   {1029,1,0b10110},   {1030,0,0b01000},   {1031,0,0b01010},   {1032,1,0b11010},   {1033,1,0b10111},   {1034,1,0b11011},   {1035,0,0b10000},   {1036,1,0b00100},   {1037,1,0b10101},   {1038,0,0b00110},   {1039,1,0b11000},   {1040,1,0b01001},   {1041,1,0b00001},   {1042,1,0b11001},   {1043,0,0b00010},   {1044,0,0b00100},   {1045,1,0b00110},   {1046,0,0b11000},   {1047,1,0b10111},   {1048,0,0b00110},   {1049,0,0b01111},   {1050,1,0b11000},   {1051,1,0b01100},   {1052,1,0b11101},   {1053,1,0b00110},   {1054,1,0b01110},   {1055,1,0b00001},   {1056,0,0b10000},   {1057,1,0b10111},   {1058,0,0b00011},   {1059,1,0b10100},   {1060,1,0b00010},   {1061,1,0b11011},   {1062,0,0b00101},   {1063,0,0b00111},   {1064,1,0b10011},   {1065,1,0b11111},   {1066,0,0b10000},   {1067,1,0b10101},   {1068,0,0b10000},   {1069,0,0b01100},   {1070,0,0b10100},   {1071,0,0b11000},   {1072,0,0b10101},   {1073,0,0b10110},   {1074,1,0b11111},   {1075,0,0b00001},   {1076,1,0b00011}};
            AssertStoreContents(s, store, occupieds_pos, checks);
        }

        SUBCASE("end of run, shift left") {
            s.DeleteRawFromInfixStore(store, 0b000000010011111);
            const std::vector<uint32_t> occupieds_pos = {0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 22, 24, 26, 28, 29, 31, 32, 34, 36, 38, 39, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 78, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 127, 131, 135, 136, 138, 143, 144, 145, 147, 148, 152, 153, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 177, 178, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 221, 224, 226, 227, 228, 231, 232, 233, 236, 237, 240, 241, 244, 246, 247, 248, 249, 252, 254, 256, 257, 258, 259, 263, 264, 265, 266, 269, 271, 274, 276, 278, 282, 283, 284, 287, 288, 289, 290, 291, 294, 296, 297, 300, 301, 302, 303, 307, 309, 311, 313, 314, 315, 316, 317, 320, 323, 324, 325, 326, 327, 328, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 366, 370, 372, 373, 374, 376, 379, 380, 381, 385, 386, 388, 391, 394, 396, 397, 403, 405, 408, 410, 412, 413, 416, 418, 420, 421, 422, 424, 426, 427, 430, 431, 432, 433, 434, 437, 438, 440, 443, 445, 446, 447, 450, 453, 454, 458, 460, 461, 462, 464, 465, 467, 468, 471, 472, 474, 476, 478, 481, 484, 485, 486, 487, 488, 489, 491, 493, 494, 497, 501, 503, 505, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 529, 530, 531, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 547, 549, 553, 554, 562, 563, 568, 569, 570, 572, 574, 579, 581, 582, 583, 584, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 600, 601, 602, 604, 606, 607, 610, 612, 613, 616, 617, 620, 621, 624, 625, 626, 627, 630, 631, 632, 634, 637, 639, 640, 642, 643, 644, 646, 649, 652, 653, 655, 656, 657, 659, 662, 664, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 722, 723, 725, 726, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 758, 761, 763, 764, 766, 767, 769, 770, 772, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 798, 801, 804, 805, 806, 808, 811, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 828, 829, 830, 831, 836, 838, 840, 841, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 859, 861, 862, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 891, 893, 894, 895, 898, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 946, 949, 950, 952, 955, 956, 957, 959, 960, 961, 962, 963, 964, 968, 971, 972, 973, 974, 975, 976, 979, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023};
            const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  0,0,0b00010},   {  1,1,0b00001},   {  2,0,0b00010},   {  3,0,0b01010},   {  4,1,0b11101},   {  5,0,0b01101},   {  6,0,0b10010},   {  7,0,0b10110},   {  8,1,0b11101},   {  9,0,0b10100},   { 10,0,0b11000},   { 11,0,0b10110},   { 12,1,0b10101},   { 13,0,0b10101},   { 14,0,0b10111},   { 15,1,0b11001},   { 16,0,0b00001},   { 17,1,0b11000},   { 18,0,0b11011},   { 19,1,0b11011},   { 20,0,0b00001},   { 21,0,0b11011},   { 22,0,0b11101},   { 23,1,0b11111},   { 24,1,0b01101},   { 25,0,0b10100},   { 26,1,0b10110},   { 27,1,0b11101},   { 28,0,0b01000},   { 29,0,0b00001},   { 30,0,0b00011},   { 31,1,0b00111},   { 32,0,0b01111},   { 33,1,0b11001},   { 34,1,0b01001},   { 35,1,0b00010},   { 36,0,0b10101},   { 37,1,0b11111},   { 38,1,0b10010},   { 39,0,0b01000},   { 40,0,0b00111},   { 41,1,0b10011},   { 42,0,0b10001},   { 43,1,0b11001},   { 44,1,0b01001},   { 45,1,0b11110},   { 46,1,0b00010},   { 47,1,0b01101},   { 48,1,0b10000},   { 49,0,0b01000},   { 50,1,0b00110},   { 51,0,0b10000},   { 52,0,0b10100},   { 53,1,0b11011},   { 54,1,0b00010},   { 55,1,0b11000},   { 56,1,0b11111},   { 57,1,0b11111},   { 58,1,0b00111},   { 59,0,0b01011},   { 60,1,0b01110},   { 61,1,0b01010},   { 62,0,0b00100},   { 63,0,0b01100},   { 64,1,0b01101},   { 65,0,0b00010},   { 66,1,0b10001},   { 67,0,0b01101},   { 68,1,0b11001},   { 69,1,0b11000},   { 70,0,0b00011},   { 71,1,0b01010},   { 72,1,0b11111},   { 73,1,0b00010},   { 74,0,0b01000},   { 75,1,0b11001},   { 76,1,0b01100},   { 77,1,0b01100},   { 78,1,0b10110},   { 79,1,0b11011},   { 80,0,0b10100},   { 81,0,0b10001},   { 82,1,0b10101},   { 83,1,0b00011},   { 84,1,0b10001},   { 85,1,0b10110},   { 86,0,0b10100},   { 87,0,0b10101},   { 88,1,0b11100},   { 89,1,0b01000},   { 90,1,0b00101},   { 91,1,0b11111},   { 92,1,0b10110},   { 93,0,0b01100},   { 94,0,0b10010},   { 95,0,0b11100},   { 96,1,0b11110},   { 97,0,0b10000},   { 98,1,0b01010},   { 99,1,0b01011},   {100,1,0b10110},   {101,0,0b00010},   {102,1,0b11000},   {103,1,0b01001},   {104,0,0b00010},   {105,0,0b10101},   {106,0,0b11100},   {107,1,0b11110},   {108,1,0b01010},   {109,1,0b11001},   {110,0,0b01100},   {111,1,0b11100},   {112,1,0b01000},   {113,1,0b01101},   {114,1,0b10110},   {115,1,0b10011},   {116,0,0b10011},   {117,1,0b11001},   {118,1,0b10000},   {119,0,0b00001},   {120,0,0b01011},   {121,1,0b11010},   {122,0,0b00100},   {123,0,0b00100},   {124,1,0b10011},   {125,1,0b00011},   {126,0,0b00011},   {127,1,0b00011},   {128,0,0b10101},   {129,1,0b11101},   {130,1,0b01001},   {131,1,0b11110},   {132,1,0b01010},   {133,1,0b00100},   {134,0,0b01001},   {135,1,0b01101},   {136,1,0b00110},   {137,0,0b01111},   {138,1,0b10010},   {139,1,0b11101},   {140,1,0b11111},   {141,0,0b01011},   {142,1,0b11001},   {143,0,0b00110},   {144,0,0b00111},   {145,0,0b10011},   {146,1,0b10101},   {147,1,0b11100},   {148,1,0b00001},   {149,0,0b01010},   {150,1,0b10110},   {151,1,0b10101},   {152,0,0b00100},   {153,1,0b01010},   {154,0,0b00110},   {155,0,0b01100},   {156,1,0b10111},   {157,1,0b11100},   {158,0,0b11011},   {159,1,0b11011},   {160,1,0b00001},   {161,0,0b01010},   {162,1,0b11110},   {163,1,0b11110},   {164,1,0b00110},   {165,1,0b11011},   {166,1,0b11011},   {167,1,0b10001},   {168,1,0b00101},   {169,1,0b00100},   {170,0,0b10110},   {171,1,0b11111},   {172,1,0b10001},   {173,1,0b11111},   {174,0,0b01000},   {175,1,0b01101},   {176,1,0b10101},   {177,0,0b01010},   {178,1,0b10101},   {179,1,0b01010},   {180,0,0b00001},   {181,1,0b01101},   {182,1,0b11110},   {183,0,0b01001},   {184,0,0b01111},   {185,1,0b10111},   {186,1,0b11110},   {187,1,0b00101},   {190,0,0b01110},   {191,0,0b10001},   {192,1,0b10111},   {193,1,0b11100},   {194,1,0b11010},   {195,0,0b10100},   {196,1,0b11110},   {197,0,0b01110},   {198,1,0b11001},   {199,1,0b01100},   {200,1,0b00100},   {201,0,0b01000},   {202,0,0b01011},   {203,1,0b10100},   {204,1,0b11111},   {205,1,0b00111},   {206,1,0b11111},   {207,1,0b10100},   {208,0,0b10011},   {209,1,0b11010},   {210,1,0b10100},   {211,1,0b10101},   {212,0,0b01110},   {213,1,0b11011},   {214,0,0b11011},   {215,1,0b11110},   {216,1,0b10100},   {217,1,0b00101},   {218,0,0b10100},   {219,0,0b10010},   {220,1,0b10101},   {221,0,0b10000},   {222,0,0b01100},   {223,0,0b01010},   {224,1,0b01001},   {225,1,0b10001},   {226,0,0b10000},   {227,1,0b10010},   {228,1,0b11101},   {229,1,0b10011},   {230,1,0b00001},   {231,1,0b11101},   {232,0,0b00111},   {233,1,0b10001},   {234,1,0b11011},   {235,0,0b00001},   {236,0,0b00110},   {237,0,0b01010},   {238,1,0b11100},   {239,0,0b10000},   {240,1,0b11100},   {241,0,0b01001},   {242,1,0b01011},   {243,1,0b11111},   {244,1,0b01101},   {245,1,0b01110},   {246,0,0b10011},   {247,1,0b10101},   {248,0,0b01110},   {249,1,0b10100},   {250,0,0b10000},   {251,0,0b10010},   {252,0,0b10100},   {253,1,0b10011},   {254,0,0b01011},   {255,1,0b10011},   {256,1,0b00101},   {257,1,0b10101},   {258,1,0b10100},   {259,1,0b10001},   {261,1,0b01100},   {262,1,0b11100},   {265,0,0b10000},   {266,1,0b10111},   {267,1,0b10111},   {269,0,0b00010},   {270,1,0b10110},   {271,1,0b00001},   {272,1,0b01111},   {273,0,0b00101},   {274,0,0b01001},   {275,0,0b10001},   {276,1,0b11111},   {277,1,0b10110},   {278,1,0b00011},   {279,0,0b00101},   {280,1,0b10010},   {281,0,0b00001},   {282,0,0b00111},   {283,1,0b00111},   {284,1,0b01100},   {285,0,0b00001},   {286,1,0b11011},   {288,0,0b01000},   {289,0,0b01111},   {290,1,0b10100},   {291,1,0b00001},   {292,0,0b00110},   {293,1,0b11001},   {296,0,0b01011},   {297,1,0b10100},   {298,0,0b01100},   {299,1,0b10100},   {300,0,0b01100},   {301,1,0b11111},   {302,1,0b11011},   {303,0,0b00111},   {304,0,0b01110},   {305,1,0b11101},   {306,0,0b00011},   {307,0,0b01110},   {308,1,0b10011},   {309,1,0b01011},   {310,0,0b01111},   {311,1,0b11011},   {312,0,0b01100},   {313,0,0b01001},   {314,1,0b10011},   {315,1,0b00101},   {316,0,0b01010},   {317,1,0b01100},   {318,0,0b01000},   {319,1,0b01101},   {320,1,0b00101},   {321,0,0b00101},   {322,1,0b01011},   {323,0,0b01001},   {324,1,0b11011},   {325,0,0b10000},   {326,1,0b10101},   {327,0,0b00100},   {328,1,0b01111},   {329,1,0b01001},   {330,0,0b10001},   {331,0,0b11010},   {332,1,0b11011},   {333,1,0b11010},   {334,0,0b01100},   {335,0,0b11000},   {336,1,0b10011},   {337,0,0b01111},   {338,1,0b11110},   {339,0,0b01100},   {340,0,0b10001},   {341,0,0b10011},   {342,0,0b10101},   {343,0,0b11011},   {344,1,0b11111},   {345,0,0b00111},   {346,1,0b01100},   {347,1,0b01001},   {348,0,0b10111},   {349,1,0b11011},   {350,1,0b01111},   {351,1,0b00101},   {352,0,0b00011},   {353,0,0b01001},   {354,1,0b11001},   {355,0,0b00001},   {356,1,0b01100},   {357,1,0b10000},   {358,1,0b11101},   {359,1,0b00001},   {360,0,0b01010},   {361,0,0b10011},   {362,1,0b11101},   {363,0,0b10100},   {364,1,0b11011},   {365,1,0b10110},   {366,1,0b01101},   {367,1,0b10010},   {368,1,0b01110},   {369,1,0b00110},   {370,0,0b01111},   {371,0,0b10110},   {372,0,0b10110},   {373,1,0b11011},   {374,0,0b01011},   {375,1,0b10101},   {376,0,0b10000},   {377,0,0b00111},   {378,1,0b11000},   {379,1,0b10001},   {380,0,0b01110},   {381,1,0b10010},   {382,0,0b10000},   {383,0,0b00011},   {384,1,0b10001},   {385,0,0b00111},   {386,0,0b11010},   {387,1,0b11001},   {388,0,0b00100},   {389,1,0b10101},   {390,1,0b01010},   {391,1,0b11010},   {392,1,0b00101},   {393,1,0b00111},   {394,0,0b01111},   {395,0,0b10100},   {396,0,0b10100},   {397,1,0b10011},   {398,1,0b10110},   {399,1,0b00100},   {400,0,0b11100},   {401,1,0b11101},   {402,0,0b00001},   {403,1,0b10110},   {404,1,0b10011},   {405,0,0b10010},   {406,1,0b10111},   {407,0,0b11100},   {408,1,0b11010},   {409,1,0b00111},   {410,1,0b10001},   {411,1,0b10110},   {412,0,0b00011},   {413,1,0b10011},   {414,1,0b00101},   {415,0,0b01111},   {416,1,0b11111},   {417,0,0b00110},   {418,1,0b01100},   {419,1,0b10111},   {420,1,0b10110},   {421,1,0b11111},   {422,1,0b01101},   {424,1,0b01100},   {426,0,0b00010},   {427,1,0b01100},   {429,0,0b00001},   {430,0,0b00011},   {431,1,0b11001},   {432,1,0b10001},   {433,0,0b00001},   {434,1,0b11001},   {435,1,0b11010},   {437,1,0b01011},   {439,0,0b10001},   {440,1,0b11001},   {442,1,0b01001},   {443,1,0b01100},   {444,1,0b11010},   {446,1,0b10101},   {448,0,0b10000},   {449,0,0b01101},   {450,0,0b11000},   {451,1,0b11010},   {452,0,0b01111},   {453,1,0b10011},   {454,1,0b01110},   {455,1,0b01100},   {456,0,0b10111},   {457,1,0b11001},   {458,1,0b10100},   {459,1,0b10100},   {460,0,0b00011},   {461,0,0b01100},   {462,1,0b01011},   {463,1,0b11010},   {464,1,0b10000},   {466,1,0b10100},   {468,1,0b10110},   {469,1,0b01100},   {470,0,0b00101},   {471,0,0b10110},   {472,1,0b11111},   {473,0,0b11001},   {474,1,0b11110},   {476,1,0b01101},   {477,1,0b00101},   {482,1,0b11010},   {484,1,0b01001},   {485,1,0b11100},   {486,1,0b10101},   {488,1,0b10110},   {489,1,0b00011},   {491,0,0b01010},   {492,1,0b01010},   {493,1,0b00001},   {495,0,0b01001},   {496,1,0b11110},   {497,0,0b10001},   {498,1,0b11011},   {499,1,0b01000},   {501,0,0b11001},   {502,1,0b11100},   {503,0,0b00001},   {504,0,0b11010},   {505,0,0b11011},   {506,1,0b11101},   {507,1,0b00111},   {509,1,0b01101},   {510,0,0b01010},   {511,1,0b10011},   {512,0,0b00001},   {513,1,0b01010},   {514,1,0b10011},   {515,0,0b00101},   {516,1,0b11100},   {517,0,0b01010},   {518,1,0b11011},   {519,0,0b10000},   {520,1,0b10101},   {521,1,0b11010},   {522,1,0b10000},   {523,1,0b11111},   {527,0,0b01000},   {528,0,0b01001},   {529,1,0b10100},   {530,0,0b01110},   {531,0,0b01111},   {532,0,0b10011},   {533,0,0b11101},   {534,1,0b11101},   {535,1,0b11010},   {536,1,0b00110},   {537,1,0b11001},   {538,0,0b01100},   {539,0,0b10010},   {540,1,0b10001},   {541,0,0b10110},   {542,1,0b11100},   {543,0,0b01111},   {544,1,0b10010},   {545,0,0b00011},   {546,0,0b00110},   {547,1,0b10001},   {548,1,0b01011},   {549,1,0b01111},   {550,1,0b10101},   {551,1,0b00111},   {552,1,0b10011},   {553,1,0b10110},   {554,0,0b00001},   {555,1,0b00010},   {556,1,0b00011},   {557,1,0b01010},   {558,0,0b01000},   {559,1,0b01100},   {560,0,0b01010},   {561,1,0b01011},   {562,1,0b11010},   {563,1,0b01011},   {564,0,0b11010},   {565,1,0b11111},   {566,0,0b01001},   {567,1,0b10110},   {568,1,0b01111},   {569,1,0b10001},   {570,0,0b01100},   {571,1,0b10110},   {572,1,0b11110},   {573,1,0b10010},   {574,0,0b10000},   {575,0,0b01110},   {576,1,0b11101},   {577,0,0b10001},   {578,1,0b10011},   {579,1,0b10101},   {580,1,0b11011},   {582,1,0b00111},   {583,1,0b00110},   {591,1,0b00010},   {592,1,0b00101},   {597,1,0b11101},   {598,1,0b00100},   {599,1,0b10010},   {602,1,0b11110},   {604,1,0b01100},   {609,1,0b00101},   {611,1,0b10101},   {612,0,0b01001},   {613,1,0b01110},   {614,1,0b10011},   {615,1,0b01000},   {616,0,0b01111},   {617,1,0b11001},   {618,1,0b11011},   {619,1,0b10011},   {620,0,0b00101},   {621,1,0b11110},   {623,1,0b00111},   {624,0,0b10110},   {625,1,0b11101},   {626,1,0b01100},   {627,0,0b00111},   {628,0,0b11100},   {629,1,0b11001},   {630,1,0b11101},   {631,0,0b01010},   {632,0,0b10110},   {633,1,0b11110},   {634,1,0b10011},   {635,1,0b10011},   {636,1,0b01111},   {637,1,0b10111},   {638,0,0b00010},   {639,1,0b01111},   {640,1,0b01001},   {641,0,0b00011},   {642,0,0b00011},   {643,1,0b00111},   {644,1,0b10011},   {645,1,0b01001},   {646,0,0b01000},   {647,0,0b00010},   {648,0,0b00111},   {649,1,0b11000},   {650,1,0b00010},   {651,1,0b10111},   {652,1,0b00011},   {653,0,0b01110},   {654,1,0b10010},   {655,0,0b01101},   {656,1,0b01111},   {657,0,0b01001},   {658,0,0b10001},   {659,0,0b10100},   {660,0,0b10010},   {661,0,0b11010},   {662,1,0b11110},   {663,0,0b10001},   {664,1,0b11101},   {665,0,0b00001},   {666,0,0b01100},   {667,1,0b11000},   {668,1,0b00111},   {669,1,0b00100},   {670,0,0b10000},   {671,0,0b00001},   {672,1,0b01001},   {673,1,0b00101},   {674,0,0b11000},   {675,1,0b10011},   {676,0,0b01110},   {677,1,0b10001},   {678,1,0b01001},   {679,1,0b00011},   {680,1,0b00111},   {681,0,0b00010},   {682,1,0b11100},   {683,1,0b00010},   {684,0,0b01111},   {685,1,0b11010},   {686,1,0b11110},   {687,0,0b00100},   {688,0,0b10010},   {689,1,0b11110},   {690,1,0b11000},   {691,0,0b01100},   {692,0,0b01001},   {693,1,0b11110},   {694,1,0b11001},   {695,0,0b00111},   {696,1,0b01111},   {697,1,0b10001},   {698,1,0b01101},   {699,0,0b00100},   {700,1,0b00110},   {701,0,0b00100},   {702,1,0b01101},   {703,0,0b00001},   {704,0,0b01110},   {705,1,0b01110},   {706,0,0b00010},   {707,1,0b01101},   {708,0,0b00101},   {709,1,0b10100},   {710,1,0b01101},   {711,0,0b00001},   {712,1,0b10010},   {713,1,0b11110},   {714,1,0b00110},   {715,0,0b00001},   {716,0,0b01101},   {717,1,0b10001},   {718,1,0b00111},   {719,1,0b10101},   {720,1,0b01011},   {721,1,0b11111},   {722,0,0b00111},   {723,1,0b11110},   {724,0,0b00001},   {725,1,0b11110},   {726,1,0b10111},   {727,0,0b10111},   {728,1,0b11101},   {729,1,0b01000},   {730,1,0b10000},   {731,1,0b11110},   {732,0,0b01110},   {733,1,0b10010},   {734,0,0b10111},   {735,1,0b10111},   {736,1,0b01010},   {737,1,0b11111},   {738,1,0b11000},   {739,0,0b10110},   {740,1,0b10110},   {741,1,0b01111},   {742,1,0b01010},   {743,0,0b11000},   {744,1,0b11101},   {745,0,0b00101},   {746,1,0b10011},   {747,0,0b10001},   {748,0,0b10001},   {749,1,0b11010},   {750,1,0b10000},   {751,1,0b01001},   {752,0,0b11101},   {753,1,0b11101},   {754,0,0b00110},   {755,1,0b00101},   {756,1,0b01001},   {757,1,0b10000},   {758,1,0b01011},   {759,0,0b00001},   {760,1,0b10011},   {761,1,0b01011},   {762,0,0b01000},   {763,1,0b11010},   {764,1,0b00111},   {765,1,0b11011},   {766,0,0b00001},   {767,1,0b00110},   {768,1,0b10001},   {769,1,0b00001},   {770,1,0b10010},   {771,1,0b00001},   {772,1,0b00111},   {773,1,0b11110},   {774,1,0b01000},   {775,1,0b11000},   {776,1,0b01101},   {777,0,0b00010},   {778,1,0b01010},   {779,1,0b00001},   {780,1,0b01101},   {781,0,0b00011},   {782,1,0b10110},   {783,0,0b00011},   {784,0,0b10101},   {785,1,0b10110},   {786,1,0b01111},   {787,0,0b01111},   {788,1,0b11010},   {789,1,0b10000},   {790,0,0b01110},   {791,1,0b11000},   {792,1,0b10010},   {793,0,0b01110},   {794,1,0b01101},   {795,1,0b01111},   {796,1,0b10000},   {797,0,0b00100},   {798,1,0b01111},   {799,0,0b00110},   {800,1,0b10111},   {801,1,0b11011},   {802,0,0b00010},   {803,1,0b11101},   {804,1,0b01011},   {805,1,0b11000},   {806,1,0b00111},   {807,0,0b00100},   {808,1,0b10101},   {809,0,0b00010},   {810,1,0b01110},   {811,1,0b00101},   {812,0,0b01011},   {813,1,0b11100},   {814,1,0b01000},   {815,0,0b00100},   {816,0,0b10000},   {817,1,0b11001},   {818,0,0b01101},   {819,1,0b11101},   {820,1,0b00100},   {821,1,0b01011},   {822,0,0b01111},   {823,0,0b10111},   {824,0,0b11001},   {825,0,0b11110},   {826,1,0b11101},   {827,1,0b11011},   {828,1,0b00111},   {829,1,0b10100},   {830,1,0b00110},   {831,0,0b01011},   {832,1,0b11110},   {833,1,0b00100},   {834,1,0b10001},   {835,1,0b01101},   {836,0,0b00001},   {837,1,0b11001},   {838,1,0b11001},   {839,1,0b10111},   {840,0,0b00010},   {841,0,0b10010},   {842,0,0b10011},   {843,1,0b11001},   {844,0,0b00010},   {845,1,0b10010},   {846,0,0b00010},   {847,0,0b01110},   {848,1,0b11011},   {849,1,0b00011},   {850,0,0b00110},   {851,0,0b01011},   {852,1,0b11000},   {853,1,0b11001},   {854,0,0b00001},   {855,1,0b01001},   {856,1,0b01100},   {857,0,0b00001},   {858,1,0b01011},   {859,1,0b01010},   {860,0,0b00111},   {861,1,0b01100},   {862,1,0b00010},   {863,1,0b11101},   {864,0,0b00011},   {865,0,0b11100},   {866,0,0b11011},   {867,1,0b11111},   {868,1,0b10010},   {869,0,0b00111},   {870,1,0b11101},   {871,1,0b01010},   {872,0,0b01100},   {873,1,0b10100},   {874,1,0b10111},   {875,1,0b01000},   {876,1,0b00011},   {877,1,0b11011},   {878,1,0b00110},   {879,1,0b10111},   {880,1,0b10011},   {881,0,0b01000},   {882,0,0b10111},   {883,1,0b11011},   {884,1,0b11111},   {885,1,0b10111},   {886,0,0b10011},   {887,1,0b11010},   {888,1,0b00101},   {889,1,0b00001},   {890,1,0b10101},   {891,0,0b01000},   {892,1,0b10101},   {893,1,0b00011},   {894,0,0b00101},   {895,1,0b11101},   {896,0,0b01000},   {897,1,0b10110},   {898,0,0b10100},   {899,1,0b11101},   {900,0,0b00110},   {901,1,0b00111},   {902,0,0b00101},   {903,0,0b11010},   {904,1,0b11110},   {905,0,0b01100},   {906,1,0b10011},   {907,0,0b01100},   {908,1,0b11100},   {909,1,0b11011},   {910,0,0b01111},   {911,1,0b11011},   {912,0,0b00001},   {913,1,0b10100},   {914,1,0b01010},   {915,1,0b01010},   {916,0,0b00010},   {917,1,0b01000},   {918,1,0b10100},   {919,0,0b01011},   {920,0,0b11000},   {921,1,0b11011},   {922,1,0b00011},   {923,0,0b00001},   {924,1,0b00111},   {925,1,0b10100},   {926,0,0b00111},   {927,1,0b10011},   {928,1,0b01011},   {929,0,0b01000},   {930,1,0b10101},   {931,0,0b10100},   {932,1,0b10111},   {933,0,0b11100},   {934,1,0b11111},   {935,1,0b01000},   {936,1,0b11101},   {937,1,0b11001},   {938,0,0b00100},   {939,1,0b10110},   {940,1,0b01000},   {941,0,0b00010},   {942,0,0b01000},   {943,0,0b00101},   {944,0,0b01001},   {945,0,0b10101},   {946,0,0b11011},   {947,1,0b11110},   {948,1,0b11001},   {949,0,0b01001},   {950,0,0b11001},   {951,0,0b11011},   {952,0,0b11101},   {953,1,0b11101},   {954,1,0b11101},   {955,1,0b00010},   {956,1,0b11011},   {957,1,0b11110},   {958,1,0b10001},   {959,1,0b01010},   {960,1,0b00110},   {961,1,0b00101},   {962,0,0b00010},   {963,1,0b11100},   {964,1,0b01100},   {965,0,0b10000},   {966,0,0b00101},   {967,1,0b01110},   {968,0,0b10010},   {969,1,0b11000},   {970,1,0b10110},   {971,0,0b10001},   {972,1,0b10011},   {973,1,0b01110},   {974,1,0b01101},   {975,0,0b00110},   {976,1,0b11100},   {977,1,0b00100},   {978,1,0b00010},   {979,1,0b00101},   {980,1,0b11011},   {981,1,0b11101},   {982,0,0b01000},   {983,1,0b11010},   {984,1,0b00011},   {985,1,0b00101},   {986,1,0b10001},   {987,1,0b00010},   {988,0,0b01010},   {989,1,0b01101},   {990,1,0b10010},   {991,0,0b00101},   {992,1,0b10111},   {993,1,0b10111},   {994,0,0b10000},   {995,0,0b10111},   {996,1,0b11001},   {997,0,0b00110},   {998,1,0b01001},   {999,0,0b01100},   {1000,1,0b10010},   {1001,1,0b11001},   {1002,1,0b11110},   {1003,0,0b00100},   {1004,0,0b00001},   {1005,0,0b10111},   {1006,1,0b11111},   {1007,1,0b01111},   {1008,1,0b00100},   {1009,1,0b11100},   {1010,1,0b00001},   {1011,1,0b11111},   {1012,0,0b00011},   {1013,1,0b10001},   {1014,1,0b11101},   {1015,1,0b11110},   {1016,1,0b01001},   {1017,1,0b10100},   {1018,1,0b00111},   {1019,1,0b01001},   {1020,1,0b00011},   {1021,1,0b10011},   {1022,1,0b00101},   {1023,0,0b00001},   {1024,0,0b00111},   {1025,1,0b10011},   {1026,0,0b10010},   {1027,1,0b10110},   {1028,1,0b10110},   {1029,1,0b10110},   {1030,0,0b01000},   {1031,0,0b01010},   {1032,1,0b11010},   {1033,1,0b10111},   {1034,1,0b11011},   {1035,0,0b10000},   {1036,1,0b00100},   {1037,1,0b10101},   {1038,0,0b00110},   {1039,1,0b11000},   {1040,1,0b01001},   {1041,1,0b00001},   {1042,1,0b11001},   {1043,0,0b00010},   {1044,0,0b00100},   {1045,1,0b00110},   {1046,0,0b11000},   {1047,1,0b10111},   {1048,0,0b00110},   {1049,0,0b01111},   {1050,1,0b11000},   {1051,1,0b01100},   {1052,1,0b11101},   {1053,1,0b00110},   {1054,1,0b01110},   {1055,1,0b00001},   {1056,0,0b10000},   {1057,1,0b10111},   {1058,0,0b00011},   {1059,1,0b10100},   {1060,1,0b00010},   {1061,1,0b11011},   {1062,0,0b00101},   {1063,0,0b00111},   {1064,1,0b10011},   {1065,1,0b11111},   {1066,0,0b10000},   {1067,1,0b10101},   {1068,0,0b10000},   {1069,0,0b01100},   {1070,0,0b10100},   {1071,0,0b11000},   {1072,0,0b10101},   {1073,0,0b10110},   {1074,1,0b11111},   {1075,0,0b00001},   {1076,1,0b00011}};
            AssertStoreContents(s, store, occupieds_pos, checks);
        }

        SUBCASE("single match, shift right") {
            s.DeleteRawFromInfixStore(store, 0b111111111011111);
            const std::vector<uint32_t> occupieds_pos = {0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 22, 24, 26, 28, 29, 31, 32, 34, 36, 38, 39, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 78, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 127, 131, 135, 136, 138, 143, 144, 145, 147, 148, 152, 153, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 177, 178, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 221, 224, 226, 227, 228, 231, 232, 233, 236, 237, 240, 241, 244, 246, 247, 248, 249, 252, 254, 256, 257, 258, 259, 263, 264, 265, 266, 269, 271, 274, 276, 278, 282, 283, 284, 287, 288, 289, 290, 291, 294, 296, 297, 300, 301, 302, 303, 307, 309, 311, 313, 314, 315, 316, 317, 320, 323, 324, 325, 326, 327, 328, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 366, 370, 372, 373, 374, 376, 379, 380, 381, 385, 386, 388, 391, 394, 396, 397, 403, 405, 408, 410, 412, 413, 416, 418, 420, 421, 422, 424, 426, 427, 430, 431, 432, 433, 434, 437, 438, 440, 443, 445, 446, 447, 450, 453, 454, 458, 460, 461, 462, 464, 465, 467, 468, 471, 472, 474, 476, 478, 481, 484, 485, 486, 487, 488, 489, 491, 493, 494, 497, 501, 503, 505, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 529, 530, 531, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 547, 549, 553, 554, 562, 563, 568, 569, 570, 572, 574, 579, 581, 582, 583, 584, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 600, 601, 602, 604, 606, 607, 610, 612, 613, 616, 617, 620, 621, 624, 625, 626, 627, 630, 631, 632, 634, 637, 639, 640, 642, 643, 644, 646, 649, 652, 653, 655, 656, 657, 659, 662, 664, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 722, 723, 725, 726, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 758, 761, 763, 764, 766, 767, 769, 770, 772, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 798, 801, 804, 805, 806, 808, 811, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 828, 829, 830, 831, 836, 838, 840, 841, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 859, 861, 862, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 891, 893, 894, 895, 898, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 946, 949, 950, 952, 955, 956, 957, 959, 960, 961, 962, 963, 964, 968, 971, 972, 973, 974, 975, 976, 979, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023};
            const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  0,0,0b00010},   {  1,1,0b00001},   {  2,0,0b00010},   {  3,0,0b01010},   {  4,1,0b11101},   {  5,0,0b01101},   {  6,0,0b10010},   {  7,0,0b10110},   {  8,1,0b11101},   {  9,0,0b10100},   { 10,0,0b11000},   { 11,0,0b10110},   { 12,0,0b10101},   { 13,1,0b11111},   { 14,0,0b10101},   { 15,0,0b10111},   { 16,1,0b11001},   { 17,0,0b00001},   { 18,1,0b11000},   { 19,0,0b11011},   { 20,1,0b11011},   { 21,0,0b00001},   { 22,0,0b11011},   { 23,0,0b11101},   { 24,1,0b11111},   { 25,1,0b01101},   { 26,0,0b10100},   { 27,1,0b10110},   { 28,1,0b11101},   { 29,0,0b01000},   { 30,0,0b00001},   { 31,0,0b00011},   { 32,1,0b00111},   { 33,0,0b01111},   { 34,1,0b11001},   { 35,1,0b01001},   { 36,1,0b00010},   { 37,0,0b10101},   { 38,1,0b11111},   { 39,1,0b10010},   { 40,0,0b01000},   { 41,0,0b00111},   { 42,1,0b10011},   { 43,0,0b10001},   { 44,1,0b11001},   { 45,1,0b01001},   { 46,1,0b11110},   { 47,1,0b00010},   { 48,1,0b01101},   { 49,1,0b10000},   { 50,0,0b01000},   { 51,1,0b00110},   { 52,0,0b10000},   { 53,0,0b10100},   { 54,1,0b11011},   { 55,1,0b00010},   { 56,1,0b11000},   { 57,1,0b11111},   { 58,1,0b11111},   { 59,1,0b00111},   { 60,0,0b01011},   { 61,1,0b01110},   { 62,1,0b01010},   { 63,0,0b00100},   { 64,0,0b01100},   { 65,1,0b01101},   { 66,0,0b00010},   { 67,1,0b10001},   { 68,0,0b01101},   { 69,1,0b11001},   { 70,1,0b11000},   { 71,0,0b00011},   { 72,1,0b01010},   { 73,1,0b11111},   { 74,1,0b00010},   { 75,0,0b01000},   { 76,1,0b11001},   { 77,1,0b01100},   { 78,1,0b01100},   { 79,1,0b10110},   { 80,1,0b11011},   { 81,0,0b10100},   { 82,0,0b10001},   { 83,1,0b10101},   { 84,1,0b00011},   { 85,1,0b10001},   { 86,1,0b10110},   { 87,0,0b10100},   { 88,0,0b10101},   { 89,1,0b11100},   { 90,1,0b01000},   { 91,1,0b00101},   { 92,1,0b11111},   { 93,1,0b10110},   { 94,0,0b01100},   { 95,0,0b10010},   { 96,0,0b11100},   { 97,1,0b11110},   { 98,0,0b10000},   { 99,1,0b01010},   {100,1,0b01011},   {101,1,0b10110},   {102,0,0b00010},   {103,1,0b11000},   {104,1,0b01001},   {105,0,0b00010},   {106,0,0b10101},   {107,0,0b11100},   {108,1,0b11110},   {109,1,0b01010},   {110,1,0b11001},   {111,0,0b01100},   {112,1,0b11100},   {113,1,0b01000},   {114,1,0b01101},   {115,1,0b10110},   {116,1,0b10011},   {117,0,0b10011},   {118,1,0b11001},   {119,1,0b10000},   {120,0,0b00001},   {121,0,0b01011},   {122,1,0b11010},   {123,0,0b00100},   {124,0,0b00100},   {125,1,0b10011},   {126,1,0b00011},   {127,0,0b00011},   {128,1,0b00011},   {129,0,0b10101},   {130,1,0b11101},   {131,1,0b01001},   {132,1,0b11110},   {133,1,0b01010},   {134,1,0b00100},   {135,0,0b01001},   {136,1,0b01101},   {137,1,0b00110},   {138,0,0b01111},   {139,1,0b10010},   {140,1,0b11101},   {141,1,0b11111},   {142,0,0b01011},   {143,1,0b11001},   {144,0,0b00110},   {145,0,0b00111},   {146,0,0b10011},   {147,1,0b10101},   {148,1,0b11100},   {149,1,0b00001},   {150,0,0b01010},   {151,1,0b10110},   {152,1,0b10101},   {153,0,0b00100},   {154,1,0b01010},   {155,0,0b00110},   {156,0,0b01100},   {157,1,0b10111},   {158,1,0b11100},   {159,0,0b11011},   {160,1,0b11011},   {161,1,0b00001},   {162,0,0b01010},   {163,1,0b11110},   {164,1,0b11110},   {165,1,0b00110},   {166,1,0b11011},   {167,1,0b11011},   {168,1,0b10001},   {169,1,0b00101},   {170,1,0b00100},   {171,0,0b10110},   {172,1,0b11111},   {173,1,0b10001},   {174,1,0b11111},   {175,0,0b01000},   {176,1,0b01101},   {177,1,0b10101},   {178,0,0b01010},   {179,1,0b10101},   {180,1,0b01010},   {181,0,0b00001},   {182,1,0b01101},   {183,1,0b11110},   {184,0,0b01001},   {185,0,0b01111},   {186,1,0b10111},   {187,1,0b11110},   {188,1,0b00101},   {190,0,0b01110},   {191,0,0b10001},   {192,1,0b10111},   {193,1,0b11100},   {194,1,0b11010},   {195,0,0b10100},   {196,1,0b11110},   {197,0,0b01110},   {198,1,0b11001},   {199,1,0b01100},   {200,1,0b00100},   {201,0,0b01000},   {202,0,0b01011},   {203,1,0b10100},   {204,1,0b11111},   {205,1,0b00111},   {206,1,0b11111},   {207,1,0b10100},   {208,0,0b10011},   {209,1,0b11010},   {210,1,0b10100},   {211,1,0b10101},   {212,0,0b01110},   {213,1,0b11011},   {214,0,0b11011},   {215,1,0b11110},   {216,1,0b10100},   {217,1,0b00101},   {218,0,0b10100},   {219,0,0b10010},   {220,1,0b10101},   {221,0,0b10000},   {222,0,0b01100},   {223,0,0b01010},   {224,1,0b01001},   {225,1,0b10001},   {226,0,0b10000},   {227,1,0b10010},   {228,1,0b11101},   {229,1,0b10011},   {230,1,0b00001},   {231,1,0b11101},   {232,0,0b00111},   {233,1,0b10001},   {234,1,0b11011},   {235,0,0b00001},   {236,0,0b00110},   {237,0,0b01010},   {238,1,0b11100},   {239,0,0b10000},   {240,1,0b11100},   {241,0,0b01001},   {242,1,0b01011},   {243,1,0b11111},   {244,1,0b01101},   {245,1,0b01110},   {246,0,0b10011},   {247,1,0b10101},   {248,0,0b01110},   {249,1,0b10100},   {250,0,0b10000},   {251,0,0b10010},   {252,0,0b10100},   {253,1,0b10011},   {254,0,0b01011},   {255,1,0b10011},   {256,1,0b00101},   {257,1,0b10101},   {258,1,0b10100},   {259,1,0b10001},   {261,1,0b01100},   {262,1,0b11100},   {265,0,0b10000},   {266,1,0b10111},   {267,1,0b10111},   {269,0,0b00010},   {270,1,0b10110},   {271,1,0b00001},   {272,1,0b01111},   {273,0,0b00101},   {274,0,0b01001},   {275,0,0b10001},   {276,1,0b11111},   {277,1,0b10110},   {278,1,0b00011},   {279,0,0b00101},   {280,1,0b10010},   {281,0,0b00001},   {282,0,0b00111},   {283,1,0b00111},   {284,1,0b01100},   {285,0,0b00001},   {286,1,0b11011},   {288,0,0b01000},   {289,0,0b01111},   {290,1,0b10100},   {291,1,0b00001},   {292,0,0b00110},   {293,1,0b11001},   {296,0,0b01011},   {297,1,0b10100},   {298,0,0b01100},   {299,1,0b10100},   {300,0,0b01100},   {301,1,0b11111},   {302,1,0b11011},   {303,0,0b00111},   {304,0,0b01110},   {305,1,0b11101},   {306,0,0b00011},   {307,0,0b01110},   {308,1,0b10011},   {309,1,0b01011},   {310,0,0b01111},   {311,1,0b11011},   {312,0,0b01100},   {313,0,0b01001},   {314,1,0b10011},   {315,1,0b00101},   {316,0,0b01010},   {317,1,0b01100},   {318,0,0b01000},   {319,1,0b01101},   {320,1,0b00101},   {321,0,0b00101},   {322,1,0b01011},   {323,0,0b01001},   {324,1,0b11011},   {325,0,0b10000},   {326,1,0b10101},   {327,0,0b00100},   {328,1,0b01111},   {329,1,0b01001},   {330,0,0b10001},   {331,0,0b11010},   {332,1,0b11011},   {333,1,0b11010},   {334,0,0b01100},   {335,0,0b11000},   {336,1,0b10011},   {337,0,0b01111},   {338,1,0b11110},   {339,0,0b01100},   {340,0,0b10001},   {341,0,0b10011},   {342,0,0b10101},   {343,0,0b11011},   {344,1,0b11111},   {345,0,0b00111},   {346,1,0b01100},   {347,1,0b01001},   {348,0,0b10111},   {349,1,0b11011},   {350,1,0b01111},   {351,1,0b00101},   {352,0,0b00011},   {353,0,0b01001},   {354,1,0b11001},   {355,0,0b00001},   {356,1,0b01100},   {357,1,0b10000},   {358,1,0b11101},   {359,1,0b00001},   {360,0,0b01010},   {361,0,0b10011},   {362,1,0b11101},   {363,0,0b10100},   {364,1,0b11011},   {365,1,0b10110},   {366,1,0b01101},   {367,1,0b10010},   {368,1,0b01110},   {369,1,0b00110},   {370,0,0b01111},   {371,0,0b10110},   {372,0,0b10110},   {373,1,0b11011},   {374,0,0b01011},   {375,1,0b10101},   {376,0,0b10000},   {377,0,0b00111},   {378,1,0b11000},   {379,1,0b10001},   {380,0,0b01110},   {381,1,0b10010},   {382,0,0b10000},   {383,0,0b00011},   {384,1,0b10001},   {385,0,0b00111},   {386,0,0b11010},   {387,1,0b11001},   {388,0,0b00100},   {389,1,0b10101},   {390,1,0b01010},   {391,1,0b11010},   {392,1,0b00101},   {393,1,0b00111},   {394,0,0b01111},   {395,0,0b10100},   {396,0,0b10100},   {397,1,0b10011},   {398,1,0b10110},   {399,1,0b00100},   {400,0,0b11100},   {401,1,0b11101},   {402,0,0b00001},   {403,1,0b10110},   {404,1,0b10011},   {405,0,0b10010},   {406,1,0b10111},   {407,0,0b11100},   {408,1,0b11010},   {409,1,0b00111},   {410,1,0b10001},   {411,1,0b10110},   {412,0,0b00011},   {413,1,0b10011},   {414,1,0b00101},   {415,0,0b01111},   {416,1,0b11111},   {417,0,0b00110},   {418,1,0b01100},   {419,1,0b10111},   {420,1,0b10110},   {421,1,0b11111},   {422,1,0b01101},   {424,1,0b01100},   {426,0,0b00010},   {427,1,0b01100},   {429,0,0b00001},   {430,0,0b00011},   {431,1,0b11001},   {432,1,0b10001},   {433,0,0b00001},   {434,1,0b11001},   {435,1,0b11010},   {437,1,0b01011},   {439,0,0b10001},   {440,1,0b11001},   {442,1,0b01001},   {443,1,0b01100},   {444,1,0b11010},   {446,1,0b10101},   {448,0,0b10000},   {449,0,0b01101},   {450,0,0b11000},   {451,1,0b11010},   {452,0,0b01111},   {453,1,0b10011},   {454,1,0b01110},   {455,1,0b01100},   {456,0,0b10111},   {457,1,0b11001},   {458,1,0b10100},   {459,1,0b10100},   {460,0,0b00011},   {461,0,0b01100},   {462,1,0b01011},   {463,1,0b11010},   {464,1,0b10000},   {466,1,0b10100},   {468,1,0b10110},   {469,1,0b01100},   {470,0,0b00101},   {471,0,0b10110},   {472,1,0b11111},   {473,0,0b11001},   {474,1,0b11110},   {476,1,0b01101},   {477,1,0b00101},   {482,1,0b11010},   {484,1,0b01001},   {485,1,0b11100},   {486,1,0b10101},   {488,1,0b10110},   {489,1,0b00011},   {491,0,0b01010},   {492,1,0b01010},   {493,1,0b00001},   {495,0,0b01001},   {496,1,0b11110},   {497,0,0b10001},   {498,1,0b11011},   {499,1,0b01000},   {501,0,0b11001},   {502,1,0b11100},   {503,0,0b00001},   {504,0,0b11010},   {505,0,0b11011},   {506,1,0b11101},   {507,1,0b00111},   {509,1,0b01101},   {510,0,0b01010},   {511,1,0b10011},   {512,0,0b00001},   {513,1,0b01010},   {514,1,0b10011},   {515,0,0b00101},   {516,1,0b11100},   {517,0,0b01010},   {518,1,0b11011},   {519,0,0b10000},   {520,1,0b10101},   {521,1,0b11010},   {522,1,0b10000},   {523,1,0b11111},   {527,0,0b01000},   {528,0,0b01001},   {529,1,0b10100},   {530,0,0b01110},   {531,0,0b01111},   {532,0,0b10011},   {533,0,0b11101},   {534,1,0b11101},   {535,1,0b11010},   {536,1,0b00110},   {537,1,0b11001},   {538,0,0b01100},   {539,0,0b10010},   {540,1,0b10001},   {541,0,0b10110},   {542,1,0b11100},   {543,0,0b01111},   {544,1,0b10010},   {545,0,0b00011},   {546,0,0b00110},   {547,1,0b10001},   {548,1,0b01011},   {549,1,0b01111},   {550,1,0b10101},   {551,1,0b00111},   {552,1,0b10011},   {553,1,0b10110},   {554,0,0b00001},   {555,1,0b00010},   {556,1,0b00011},   {557,1,0b01010},   {558,0,0b01000},   {559,1,0b01100},   {560,0,0b01010},   {561,1,0b01011},   {562,1,0b11010},   {563,1,0b01011},   {564,0,0b11010},   {565,1,0b11111},   {566,0,0b01001},   {567,1,0b10110},   {568,1,0b01111},   {569,1,0b10001},   {570,0,0b01100},   {571,1,0b10110},   {572,1,0b11110},   {573,1,0b10010},   {574,0,0b10000},   {575,0,0b01110},   {576,1,0b11101},   {577,0,0b10001},   {578,1,0b10011},   {579,1,0b10101},   {580,1,0b11011},   {582,1,0b00111},   {583,1,0b00110},   {591,1,0b00010},   {592,1,0b00101},   {597,1,0b11101},   {598,1,0b00100},   {599,1,0b10010},   {602,1,0b11110},   {604,1,0b01100},   {609,1,0b00101},   {611,1,0b10101},   {612,0,0b01001},   {613,1,0b01110},   {614,1,0b10011},   {615,1,0b01000},   {616,0,0b01111},   {617,1,0b11001},   {618,1,0b11011},   {619,1,0b10011},   {620,0,0b00101},   {621,1,0b11110},   {623,1,0b00111},   {624,0,0b10110},   {625,1,0b11101},   {626,1,0b01100},   {627,0,0b00111},   {628,0,0b11100},   {629,1,0b11001},   {630,1,0b11101},   {631,0,0b01010},   {632,0,0b10110},   {633,1,0b11110},   {634,1,0b10011},   {635,1,0b10011},   {636,1,0b01111},   {637,1,0b10111},   {638,0,0b00010},   {639,1,0b01111},   {640,1,0b01001},   {642,0,0b00011},   {643,0,0b00011},   {644,1,0b00111},   {645,1,0b10011},   {646,1,0b01001},   {647,0,0b01000},   {648,0,0b00010},   {649,0,0b00111},   {650,1,0b11000},   {651,1,0b00010},   {652,1,0b10111},   {653,1,0b00011},   {654,0,0b01110},   {655,1,0b10010},   {656,0,0b01101},   {657,1,0b01111},   {658,0,0b01001},   {659,0,0b10001},   {660,0,0b10100},   {661,0,0b10010},   {662,0,0b11010},   {663,1,0b11110},   {664,0,0b10001},   {665,1,0b11101},   {666,0,0b00001},   {667,0,0b01100},   {668,1,0b11000},   {669,1,0b00111},   {670,1,0b00100},   {671,0,0b10000},   {672,0,0b00001},   {673,1,0b01001},   {674,1,0b00101},   {675,0,0b11000},   {676,1,0b10011},   {677,0,0b01110},   {678,1,0b10001},   {679,1,0b01001},   {680,1,0b00011},   {681,1,0b00111},   {682,0,0b00010},   {683,1,0b11100},   {684,1,0b00010},   {685,0,0b01111},   {686,1,0b11010},   {687,1,0b11110},   {688,0,0b00100},   {689,0,0b10010},   {690,1,0b11110},   {691,1,0b11000},   {692,0,0b01100},   {693,0,0b01001},   {694,1,0b11110},   {695,1,0b11001},   {696,0,0b00111},   {697,1,0b01111},   {698,1,0b10001},   {699,1,0b01101},   {700,0,0b00100},   {701,1,0b00110},   {702,0,0b00100},   {703,1,0b01101},   {704,0,0b00001},   {705,0,0b01110},   {706,1,0b01110},   {707,0,0b00010},   {708,1,0b01101},   {709,0,0b00101},   {710,1,0b10100},   {711,1,0b01101},   {712,0,0b00001},   {713,1,0b10010},   {714,1,0b11110},   {715,1,0b00110},   {716,0,0b00001},   {717,0,0b01101},   {718,1,0b10001},   {719,1,0b00111},   {720,1,0b10101},   {721,1,0b01011},   {722,1,0b11111},   {723,0,0b00111},   {724,1,0b11110},   {725,0,0b00001},   {726,1,0b11110},   {727,1,0b10111},   {728,0,0b10111},   {729,1,0b11101},   {730,1,0b01000},   {731,1,0b10000},   {732,1,0b11110},   {733,0,0b01110},   {734,1,0b10010},   {735,0,0b10111},   {736,1,0b10111},   {737,1,0b01010},   {738,1,0b11111},   {739,1,0b11000},   {740,0,0b10110},   {741,1,0b10110},   {742,1,0b01111},   {743,1,0b01010},   {744,0,0b11000},   {745,1,0b11101},   {746,0,0b00101},   {747,1,0b10011},   {748,0,0b10001},   {749,0,0b10001},   {750,1,0b11010},   {751,1,0b10000},   {752,1,0b01001},   {753,0,0b11101},   {754,1,0b11101},   {755,0,0b00110},   {756,1,0b00101},   {757,1,0b01001},   {758,1,0b10000},   {759,1,0b01011},   {760,0,0b00001},   {761,1,0b10011},   {762,1,0b01011},   {763,0,0b01000},   {764,1,0b11010},   {765,1,0b00111},   {766,1,0b11011},   {767,0,0b00001},   {768,1,0b00110},   {769,1,0b10001},   {770,1,0b00001},   {771,1,0b10010},   {772,1,0b00001},   {773,1,0b00111},   {774,1,0b11110},   {775,1,0b01000},   {776,1,0b11000},   {777,1,0b01101},   {778,0,0b00010},   {779,1,0b01010},   {780,1,0b00001},   {781,1,0b01101},   {782,0,0b00011},   {783,1,0b10110},   {784,0,0b00011},   {785,0,0b10101},   {786,1,0b10110},   {787,1,0b01111},   {788,0,0b01111},   {789,1,0b11010},   {790,1,0b10000},   {791,0,0b01110},   {792,1,0b11000},   {793,1,0b10010},   {794,0,0b01110},   {795,1,0b01101},   {796,1,0b01111},   {797,1,0b10000},   {798,0,0b00100},   {799,1,0b01111},   {800,0,0b00110},   {801,1,0b10111},   {802,1,0b11011},   {803,0,0b00010},   {804,1,0b11101},   {805,1,0b01011},   {806,1,0b11000},   {807,1,0b00111},   {808,0,0b00100},   {809,1,0b10101},   {810,0,0b00010},   {811,1,0b01110},   {812,1,0b00101},   {813,0,0b01011},   {814,1,0b11100},   {815,1,0b01000},   {816,0,0b00100},   {817,0,0b10000},   {818,1,0b11001},   {819,0,0b01101},   {820,1,0b11101},   {821,1,0b00100},   {822,1,0b01011},   {823,0,0b01111},   {824,0,0b10111},   {825,0,0b11001},   {826,0,0b11110},   {827,1,0b11101},   {828,1,0b11011},   {829,1,0b00111},   {830,1,0b10100},   {831,1,0b00110},   {832,0,0b01011},   {833,1,0b11110},   {834,1,0b00100},   {835,1,0b10001},   {836,1,0b01101},   {837,0,0b00001},   {838,1,0b11001},   {839,1,0b11001},   {840,1,0b10111},   {841,0,0b00010},   {842,0,0b10010},   {843,0,0b10011},   {844,1,0b11001},   {845,0,0b00010},   {846,1,0b10010},   {847,0,0b00010},   {848,0,0b01110},   {849,1,0b11011},   {850,1,0b00011},   {851,0,0b00110},   {852,0,0b01011},   {853,1,0b11000},   {854,1,0b11001},   {855,0,0b00001},   {856,1,0b01001},   {857,1,0b01100},   {858,0,0b00001},   {859,1,0b01011},   {860,1,0b01010},   {861,0,0b00111},   {862,1,0b01100},   {863,1,0b00010},   {864,1,0b11101},   {865,0,0b00011},   {866,0,0b11100},   {867,0,0b11011},   {868,1,0b11111},   {869,1,0b10010},   {870,0,0b00111},   {871,1,0b11101},   {872,1,0b01010},   {873,0,0b01100},   {874,1,0b10100},   {875,1,0b10111},   {876,1,0b01000},   {877,1,0b00011},   {878,1,0b11011},   {879,1,0b00110},   {880,1,0b10111},   {881,1,0b10011},   {882,0,0b01000},   {883,0,0b10111},   {884,1,0b11011},   {885,1,0b11111},   {886,1,0b10111},   {887,0,0b10011},   {888,1,0b11010},   {889,1,0b00101},   {890,1,0b00001},   {891,1,0b10101},   {892,0,0b01000},   {893,1,0b10101},   {894,1,0b00011},   {895,0,0b00101},   {896,1,0b11101},   {897,0,0b01000},   {898,1,0b10110},   {899,0,0b10100},   {900,1,0b11101},   {901,0,0b00110},   {902,1,0b00111},   {903,0,0b00101},   {904,0,0b11010},   {905,1,0b11110},   {906,0,0b01100},   {907,1,0b10011},   {908,0,0b01100},   {909,1,0b11100},   {910,1,0b11011},   {911,0,0b01111},   {912,1,0b11011},   {913,0,0b00001},   {914,1,0b10100},   {915,1,0b01010},   {916,1,0b01010},   {917,0,0b00010},   {918,1,0b01000},   {919,1,0b10100},   {920,0,0b01011},   {921,0,0b11000},   {922,1,0b11011},   {923,1,0b00011},   {924,0,0b00001},   {925,1,0b00111},   {926,1,0b10100},   {927,0,0b00111},   {928,1,0b10011},   {929,1,0b01011},   {930,0,0b01000},   {931,1,0b10101},   {932,0,0b10100},   {933,1,0b10111},   {934,0,0b11100},   {935,1,0b11111},   {936,1,0b01000},   {937,1,0b11101},   {938,1,0b11001},   {939,0,0b00100},   {940,1,0b10110},   {941,1,0b01000},   {942,0,0b00010},   {943,0,0b01000},   {944,0,0b00101},   {945,0,0b01001},   {946,0,0b10101},   {947,0,0b11011},   {948,1,0b11110},   {949,1,0b11001},   {950,0,0b01001},   {951,0,0b11001},   {952,0,0b11011},   {953,0,0b11101},   {954,1,0b11101},   {955,1,0b11101},   {956,1,0b00010},   {957,1,0b11011},   {958,1,0b11110},   {959,1,0b10001},   {960,1,0b01010},   {961,1,0b00110},   {962,1,0b00101},   {963,0,0b00010},   {964,1,0b11100},   {965,1,0b01100},   {966,0,0b10000},   {967,0,0b00101},   {968,1,0b01110},   {969,0,0b10010},   {970,1,0b11000},   {971,1,0b10110},   {972,0,0b10001},   {973,1,0b10011},   {974,1,0b01110},   {975,1,0b01101},   {976,0,0b00110},   {977,1,0b11100},   {978,1,0b00100},   {979,1,0b00010},   {980,1,0b00101},   {981,1,0b11011},   {982,1,0b11101},   {983,0,0b01000},   {984,1,0b11010},   {985,1,0b00011},   {986,1,0b00101},   {987,1,0b10001},   {988,1,0b00010},   {989,0,0b01010},   {990,1,0b01101},   {991,1,0b10010},   {992,0,0b00101},   {993,1,0b10111},   {994,1,0b10111},   {995,0,0b10000},   {996,0,0b10111},   {997,1,0b11001},   {998,0,0b00110},   {999,1,0b01001},   {1000,0,0b01100},   {1001,1,0b10010},   {1002,1,0b11001},   {1003,1,0b11110},   {1004,0,0b00100},   {1005,0,0b00001},   {1006,0,0b10111},   {1007,1,0b11111},   {1008,1,0b01111},   {1009,1,0b00100},   {1010,1,0b11100},   {1011,1,0b00001},   {1012,1,0b11111},   {1013,0,0b00011},   {1014,1,0b10001},   {1015,1,0b11101},   {1016,1,0b11110},   {1017,1,0b01001},   {1018,1,0b10100},   {1019,1,0b00111},   {1020,1,0b01001},   {1021,1,0b00011},   {1022,1,0b10011},   {1023,1,0b00101},   {1024,0,0b00001},   {1025,0,0b00111},   {1026,1,0b10011},   {1027,0,0b10010},   {1028,1,0b10110},   {1029,1,0b10110},   {1030,1,0b10110},   {1031,0,0b01000},   {1032,0,0b01010},   {1033,1,0b11010},   {1034,1,0b10111},   {1035,1,0b11011},   {1036,0,0b10000},   {1037,1,0b00100},   {1038,1,0b10101},   {1039,0,0b00110},   {1040,1,0b11000},   {1041,1,0b01001},   {1042,1,0b00001},   {1043,1,0b11001},   {1044,0,0b00010},   {1045,0,0b00100},   {1046,1,0b00110},   {1047,0,0b11000},   {1048,1,0b10111},   {1049,0,0b00110},   {1050,0,0b01111},   {1051,1,0b11000},   {1052,1,0b01100},   {1053,1,0b11101},   {1054,1,0b00110},   {1055,1,0b01110},   {1056,1,0b00001},   {1057,0,0b10000},   {1058,1,0b10111},   {1059,0,0b00011},   {1060,1,0b10100},   {1061,1,0b00010},   {1062,1,0b11011},   {1063,0,0b00101},   {1064,0,0b00111},   {1065,1,0b10011},   {1066,1,0b11111},   {1067,0,0b10000},   {1068,1,0b10101},   {1069,0,0b10000},   {1070,0,0b01100},   {1071,0,0b10100},   {1072,0,0b11000},   {1073,0,0b10101},   {1074,1,0b10110},   {1075,0,0b00001},   {1076,1,0b00011}};
            AssertStoreContents(s, store, occupieds_pos, checks);
        }

        SUBCASE("multiple matches, shift right") {
            s.DeleteRawFromInfixStore(store, 0b111111111010101);
            {
                const std::vector<uint32_t> occupieds_pos = {0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 22, 24, 26, 28, 29, 31, 32, 34, 36, 38, 39, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 78, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 127, 131, 135, 136, 138, 143, 144, 145, 147, 148, 152, 153, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 177, 178, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 221, 224, 226, 227, 228, 231, 232, 233, 236, 237, 240, 241, 244, 246, 247, 248, 249, 252, 254, 256, 257, 258, 259, 263, 264, 265, 266, 269, 271, 274, 276, 278, 282, 283, 284, 287, 288, 289, 290, 291, 294, 296, 297, 300, 301, 302, 303, 307, 309, 311, 313, 314, 315, 316, 317, 320, 323, 324, 325, 326, 327, 328, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 366, 370, 372, 373, 374, 376, 379, 380, 381, 385, 386, 388, 391, 394, 396, 397, 403, 405, 408, 410, 412, 413, 416, 418, 420, 421, 422, 424, 426, 427, 430, 431, 432, 433, 434, 437, 438, 440, 443, 445, 446, 447, 450, 453, 454, 458, 460, 461, 462, 464, 465, 467, 468, 471, 472, 474, 476, 478, 481, 484, 485, 486, 487, 488, 489, 491, 493, 494, 497, 501, 503, 505, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 529, 530, 531, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 547, 549, 553, 554, 562, 563, 568, 569, 570, 572, 574, 579, 581, 582, 583, 584, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 600, 601, 602, 604, 606, 607, 610, 612, 613, 616, 617, 620, 621, 624, 625, 626, 627, 630, 631, 632, 634, 637, 639, 640, 642, 643, 644, 646, 649, 652, 653, 655, 656, 657, 659, 662, 664, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 722, 723, 725, 726, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 758, 761, 763, 764, 766, 767, 769, 770, 772, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 798, 801, 804, 805, 806, 808, 811, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 828, 829, 830, 831, 836, 838, 840, 841, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 859, 861, 862, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 891, 893, 894, 895, 898, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 946, 949, 950, 952, 955, 956, 957, 959, 960, 961, 962, 963, 964, 968, 971, 972, 973, 974, 975, 976, 979, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023};
                const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  0,0,0b00010},   {  1,1,0b00001},   {  2,0,0b00010},   {  3,0,0b01010},   {  4,1,0b11101},   {  5,0,0b01101},   {  6,0,0b10010},   {  7,0,0b10110},   {  8,1,0b11101},   {  9,0,0b10100},   { 10,0,0b11000},   { 11,0,0b10110},   { 12,0,0b10101},   { 13,1,0b11111},   { 14,0,0b10101},   { 15,0,0b10111},   { 16,1,0b11001},   { 17,0,0b00001},   { 18,1,0b11000},   { 19,0,0b11011},   { 20,1,0b11011},   { 21,0,0b00001},   { 22,0,0b11011},   { 23,0,0b11101},   { 24,1,0b11111},   { 25,1,0b01101},   { 26,0,0b10100},   { 27,1,0b10110},   { 28,1,0b11101},   { 29,0,0b01000},   { 30,0,0b00001},   { 31,0,0b00011},   { 32,1,0b00111},   { 33,0,0b01111},   { 34,1,0b11001},   { 35,1,0b01001},   { 36,1,0b00010},   { 37,0,0b10101},   { 38,1,0b11111},   { 39,1,0b10010},   { 40,0,0b01000},   { 41,0,0b00111},   { 42,1,0b10011},   { 43,0,0b10001},   { 44,1,0b11001},   { 45,1,0b01001},   { 46,1,0b11110},   { 47,1,0b00010},   { 48,1,0b01101},   { 49,1,0b10000},   { 50,0,0b01000},   { 51,1,0b00110},   { 52,0,0b10000},   { 53,0,0b10100},   { 54,1,0b11011},   { 55,1,0b00010},   { 56,1,0b11000},   { 57,1,0b11111},   { 58,1,0b11111},   { 59,1,0b00111},   { 60,0,0b01011},   { 61,1,0b01110},   { 62,1,0b01010},   { 63,0,0b00100},   { 64,0,0b01100},   { 65,1,0b01101},   { 66,0,0b00010},   { 67,1,0b10001},   { 68,0,0b01101},   { 69,1,0b11001},   { 70,1,0b11000},   { 71,0,0b00011},   { 72,1,0b01010},   { 73,1,0b11111},   { 74,1,0b00010},   { 75,0,0b01000},   { 76,1,0b11001},   { 77,1,0b01100},   { 78,1,0b01100},   { 79,1,0b10110},   { 80,1,0b11011},   { 81,0,0b10100},   { 82,0,0b10001},   { 83,1,0b10101},   { 84,1,0b00011},   { 85,1,0b10001},   { 86,1,0b10110},   { 87,0,0b10100},   { 88,0,0b10101},   { 89,1,0b11100},   { 90,1,0b01000},   { 91,1,0b00101},   { 92,1,0b11111},   { 93,1,0b10110},   { 94,0,0b01100},   { 95,0,0b10010},   { 96,0,0b11100},   { 97,1,0b11110},   { 98,0,0b10000},   { 99,1,0b01010},   {100,1,0b01011},   {101,1,0b10110},   {102,0,0b00010},   {103,1,0b11000},   {104,1,0b01001},   {105,0,0b00010},   {106,0,0b10101},   {107,0,0b11100},   {108,1,0b11110},   {109,1,0b01010},   {110,1,0b11001},   {111,0,0b01100},   {112,1,0b11100},   {113,1,0b01000},   {114,1,0b01101},   {115,1,0b10110},   {116,1,0b10011},   {117,0,0b10011},   {118,1,0b11001},   {119,1,0b10000},   {120,0,0b00001},   {121,0,0b01011},   {122,1,0b11010},   {123,0,0b00100},   {124,0,0b00100},   {125,1,0b10011},   {126,1,0b00011},   {127,0,0b00011},   {128,1,0b00011},   {129,0,0b10101},   {130,1,0b11101},   {131,1,0b01001},   {132,1,0b11110},   {133,1,0b01010},   {134,1,0b00100},   {135,0,0b01001},   {136,1,0b01101},   {137,1,0b00110},   {138,0,0b01111},   {139,1,0b10010},   {140,1,0b11101},   {141,1,0b11111},   {142,0,0b01011},   {143,1,0b11001},   {144,0,0b00110},   {145,0,0b00111},   {146,0,0b10011},   {147,1,0b10101},   {148,1,0b11100},   {149,1,0b00001},   {150,0,0b01010},   {151,1,0b10110},   {152,1,0b10101},   {153,0,0b00100},   {154,1,0b01010},   {155,0,0b00110},   {156,0,0b01100},   {157,1,0b10111},   {158,1,0b11100},   {159,0,0b11011},   {160,1,0b11011},   {161,1,0b00001},   {162,0,0b01010},   {163,1,0b11110},   {164,1,0b11110},   {165,1,0b00110},   {166,1,0b11011},   {167,1,0b11011},   {168,1,0b10001},   {169,1,0b00101},   {170,1,0b00100},   {171,0,0b10110},   {172,1,0b11111},   {173,1,0b10001},   {174,1,0b11111},   {175,0,0b01000},   {176,1,0b01101},   {177,1,0b10101},   {178,0,0b01010},   {179,1,0b10101},   {180,1,0b01010},   {181,0,0b00001},   {182,1,0b01101},   {183,1,0b11110},   {184,0,0b01001},   {185,0,0b01111},   {186,1,0b10111},   {187,1,0b11110},   {188,1,0b00101},   {190,0,0b01110},   {191,0,0b10001},   {192,1,0b10111},   {193,1,0b11100},   {194,1,0b11010},   {195,0,0b10100},   {196,1,0b11110},   {197,0,0b01110},   {198,1,0b11001},   {199,1,0b01100},   {200,1,0b00100},   {201,0,0b01000},   {202,0,0b01011},   {203,1,0b10100},   {204,1,0b11111},   {205,1,0b00111},   {206,1,0b11111},   {207,1,0b10100},   {208,0,0b10011},   {209,1,0b11010},   {210,1,0b10100},   {211,1,0b10101},   {212,0,0b01110},   {213,1,0b11011},   {214,0,0b11011},   {215,1,0b11110},   {216,1,0b10100},   {217,1,0b00101},   {218,0,0b10100},   {219,0,0b10010},   {220,1,0b10101},   {221,0,0b10000},   {222,0,0b01100},   {223,0,0b01010},   {224,1,0b01001},   {225,1,0b10001},   {226,0,0b10000},   {227,1,0b10010},   {228,1,0b11101},   {229,1,0b10011},   {230,1,0b00001},   {231,1,0b11101},   {232,0,0b00111},   {233,1,0b10001},   {234,1,0b11011},   {235,0,0b00001},   {236,0,0b00110},   {237,0,0b01010},   {238,1,0b11100},   {239,0,0b10000},   {240,1,0b11100},   {241,0,0b01001},   {242,1,0b01011},   {243,1,0b11111},   {244,1,0b01101},   {245,1,0b01110},   {246,0,0b10011},   {247,1,0b10101},   {248,0,0b01110},   {249,1,0b10100},   {250,0,0b10000},   {251,0,0b10010},   {252,0,0b10100},   {253,1,0b10011},   {254,0,0b01011},   {255,1,0b10011},   {256,1,0b00101},   {257,1,0b10101},   {258,1,0b10100},   {259,1,0b10001},   {261,1,0b01100},   {262,1,0b11100},   {265,0,0b10000},   {266,1,0b10111},   {267,1,0b10111},   {269,0,0b00010},   {270,1,0b10110},   {271,1,0b00001},   {272,1,0b01111},   {273,0,0b00101},   {274,0,0b01001},   {275,0,0b10001},   {276,1,0b11111},   {277,1,0b10110},   {278,1,0b00011},   {279,0,0b00101},   {280,1,0b10010},   {281,0,0b00001},   {282,0,0b00111},   {283,1,0b00111},   {284,1,0b01100},   {285,0,0b00001},   {286,1,0b11011},   {288,0,0b01000},   {289,0,0b01111},   {290,1,0b10100},   {291,1,0b00001},   {292,0,0b00110},   {293,1,0b11001},   {296,0,0b01011},   {297,1,0b10100},   {298,0,0b01100},   {299,1,0b10100},   {300,0,0b01100},   {301,1,0b11111},   {302,1,0b11011},   {303,0,0b00111},   {304,0,0b01110},   {305,1,0b11101},   {306,0,0b00011},   {307,0,0b01110},   {308,1,0b10011},   {309,1,0b01011},   {310,0,0b01111},   {311,1,0b11011},   {312,0,0b01100},   {313,0,0b01001},   {314,1,0b10011},   {315,1,0b00101},   {316,0,0b01010},   {317,1,0b01100},   {318,0,0b01000},   {319,1,0b01101},   {320,1,0b00101},   {321,0,0b00101},   {322,1,0b01011},   {323,0,0b01001},   {324,1,0b11011},   {325,0,0b10000},   {326,1,0b10101},   {327,0,0b00100},   {328,1,0b01111},   {329,1,0b01001},   {330,0,0b10001},   {331,0,0b11010},   {332,1,0b11011},   {333,1,0b11010},   {334,0,0b01100},   {335,0,0b11000},   {336,1,0b10011},   {337,0,0b01111},   {338,1,0b11110},   {339,0,0b01100},   {340,0,0b10001},   {341,0,0b10011},   {342,0,0b10101},   {343,0,0b11011},   {344,1,0b11111},   {345,0,0b00111},   {346,1,0b01100},   {347,1,0b01001},   {348,0,0b10111},   {349,1,0b11011},   {350,1,0b01111},   {351,1,0b00101},   {352,0,0b00011},   {353,0,0b01001},   {354,1,0b11001},   {355,0,0b00001},   {356,1,0b01100},   {357,1,0b10000},   {358,1,0b11101},   {359,1,0b00001},   {360,0,0b01010},   {361,0,0b10011},   {362,1,0b11101},   {363,0,0b10100},   {364,1,0b11011},   {365,1,0b10110},   {366,1,0b01101},   {367,1,0b10010},   {368,1,0b01110},   {369,1,0b00110},   {370,0,0b01111},   {371,0,0b10110},   {372,0,0b10110},   {373,1,0b11011},   {374,0,0b01011},   {375,1,0b10101},   {376,0,0b10000},   {377,0,0b00111},   {378,1,0b11000},   {379,1,0b10001},   {380,0,0b01110},   {381,1,0b10010},   {382,0,0b10000},   {383,0,0b00011},   {384,1,0b10001},   {385,0,0b00111},   {386,0,0b11010},   {387,1,0b11001},   {388,0,0b00100},   {389,1,0b10101},   {390,1,0b01010},   {391,1,0b11010},   {392,1,0b00101},   {393,1,0b00111},   {394,0,0b01111},   {395,0,0b10100},   {396,0,0b10100},   {397,1,0b10011},   {398,1,0b10110},   {399,1,0b00100},   {400,0,0b11100},   {401,1,0b11101},   {402,0,0b00001},   {403,1,0b10110},   {404,1,0b10011},   {405,0,0b10010},   {406,1,0b10111},   {407,0,0b11100},   {408,1,0b11010},   {409,1,0b00111},   {410,1,0b10001},   {411,1,0b10110},   {412,0,0b00011},   {413,1,0b10011},   {414,1,0b00101},   {415,0,0b01111},   {416,1,0b11111},   {417,0,0b00110},   {418,1,0b01100},   {419,1,0b10111},   {420,1,0b10110},   {421,1,0b11111},   {422,1,0b01101},   {424,1,0b01100},   {426,0,0b00010},   {427,1,0b01100},   {429,0,0b00001},   {430,0,0b00011},   {431,1,0b11001},   {432,1,0b10001},   {433,0,0b00001},   {434,1,0b11001},   {435,1,0b11010},   {437,1,0b01011},   {439,0,0b10001},   {440,1,0b11001},   {442,1,0b01001},   {443,1,0b01100},   {444,1,0b11010},   {446,1,0b10101},   {448,0,0b10000},   {449,0,0b01101},   {450,0,0b11000},   {451,1,0b11010},   {452,0,0b01111},   {453,1,0b10011},   {454,1,0b01110},   {455,1,0b01100},   {456,0,0b10111},   {457,1,0b11001},   {458,1,0b10100},   {459,1,0b10100},   {460,0,0b00011},   {461,0,0b01100},   {462,1,0b01011},   {463,1,0b11010},   {464,1,0b10000},   {466,1,0b10100},   {468,1,0b10110},   {469,1,0b01100},   {470,0,0b00101},   {471,0,0b10110},   {472,1,0b11111},   {473,0,0b11001},   {474,1,0b11110},   {476,1,0b01101},   {477,1,0b00101},   {482,1,0b11010},   {484,1,0b01001},   {485,1,0b11100},   {486,1,0b10101},   {488,1,0b10110},   {489,1,0b00011},   {491,0,0b01010},   {492,1,0b01010},   {493,1,0b00001},   {495,0,0b01001},   {496,1,0b11110},   {497,0,0b10001},   {498,1,0b11011},   {499,1,0b01000},   {501,0,0b11001},   {502,1,0b11100},   {503,0,0b00001},   {504,0,0b11010},   {505,0,0b11011},   {506,1,0b11101},   {507,1,0b00111},   {509,1,0b01101},   {510,0,0b01010},   {511,1,0b10011},   {512,0,0b00001},   {513,1,0b01010},   {514,1,0b10011},   {515,0,0b00101},   {516,1,0b11100},   {517,0,0b01010},   {518,1,0b11011},   {519,0,0b10000},   {520,1,0b10101},   {521,1,0b11010},   {522,1,0b10000},   {523,1,0b11111},   {527,0,0b01000},   {528,0,0b01001},   {529,1,0b10100},   {530,0,0b01110},   {531,0,0b01111},   {532,0,0b10011},   {533,0,0b11101},   {534,1,0b11101},   {535,1,0b11010},   {536,1,0b00110},   {537,1,0b11001},   {538,0,0b01100},   {539,0,0b10010},   {540,1,0b10001},   {541,0,0b10110},   {542,1,0b11100},   {543,0,0b01111},   {544,1,0b10010},   {545,0,0b00011},   {546,0,0b00110},   {547,1,0b10001},   {548,1,0b01011},   {549,1,0b01111},   {550,1,0b10101},   {551,1,0b00111},   {552,1,0b10011},   {553,1,0b10110},   {554,0,0b00001},   {555,1,0b00010},   {556,1,0b00011},   {557,1,0b01010},   {558,0,0b01000},   {559,1,0b01100},   {560,0,0b01010},   {561,1,0b01011},   {562,1,0b11010},   {563,1,0b01011},   {564,0,0b11010},   {565,1,0b11111},   {566,0,0b01001},   {567,1,0b10110},   {568,1,0b01111},   {569,1,0b10001},   {570,0,0b01100},   {571,1,0b10110},   {572,1,0b11110},   {573,1,0b10010},   {574,0,0b10000},   {575,0,0b01110},   {576,1,0b11101},   {577,0,0b10001},   {578,1,0b10011},   {579,1,0b10101},   {580,1,0b11011},   {582,1,0b00111},   {583,1,0b00110},   {591,1,0b00010},   {592,1,0b00101},   {597,1,0b11101},   {598,1,0b00100},   {599,1,0b10010},   {602,1,0b11110},   {604,1,0b01100},   {609,1,0b00101},   {611,1,0b10101},   {612,0,0b01001},   {613,1,0b01110},   {614,1,0b10011},   {615,1,0b01000},   {616,0,0b01111},   {617,1,0b11001},   {618,1,0b11011},   {619,1,0b10011},   {620,0,0b00101},   {621,1,0b11110},   {623,1,0b00111},   {624,0,0b10110},   {625,1,0b11101},   {626,1,0b01100},   {627,0,0b00111},   {628,0,0b11100},   {629,1,0b11001},   {630,1,0b11101},   {631,0,0b01010},   {632,0,0b10110},   {633,1,0b11110},   {634,1,0b10011},   {635,1,0b10011},   {636,1,0b01111},   {637,1,0b10111},   {638,0,0b00010},   {639,1,0b01111},   {640,1,0b01001},   {642,0,0b00011},   {643,0,0b00011},   {644,1,0b00111},   {645,1,0b10011},   {646,1,0b01001},   {647,0,0b01000},   {648,0,0b00010},   {649,0,0b00111},   {650,1,0b11000},   {651,1,0b00010},   {652,1,0b10111},   {653,1,0b00011},   {654,0,0b01110},   {655,1,0b10010},   {656,0,0b01101},   {657,1,0b01111},   {658,0,0b01001},   {659,0,0b10001},   {660,0,0b10100},   {661,0,0b10010},   {662,0,0b11010},   {663,1,0b11110},   {664,0,0b10001},   {665,1,0b11101},   {666,0,0b00001},   {667,0,0b01100},   {668,1,0b11000},   {669,1,0b00111},   {670,1,0b00100},   {671,0,0b10000},   {672,0,0b00001},   {673,1,0b01001},   {674,1,0b00101},   {675,0,0b11000},   {676,1,0b10011},   {677,0,0b01110},   {678,1,0b10001},   {679,1,0b01001},   {680,1,0b00011},   {681,1,0b00111},   {682,0,0b00010},   {683,1,0b11100},   {684,1,0b00010},   {685,0,0b01111},   {686,1,0b11010},   {687,1,0b11110},   {688,0,0b00100},   {689,0,0b10010},   {690,1,0b11110},   {691,1,0b11000},   {692,0,0b01100},   {693,0,0b01001},   {694,1,0b11110},   {695,1,0b11001},   {696,0,0b00111},   {697,1,0b01111},   {698,1,0b10001},   {699,1,0b01101},   {700,0,0b00100},   {701,1,0b00110},   {702,0,0b00100},   {703,1,0b01101},   {704,0,0b00001},   {705,0,0b01110},   {706,1,0b01110},   {707,0,0b00010},   {708,1,0b01101},   {709,0,0b00101},   {710,1,0b10100},   {711,1,0b01101},   {712,0,0b00001},   {713,1,0b10010},   {714,1,0b11110},   {715,1,0b00110},   {716,0,0b00001},   {717,0,0b01101},   {718,1,0b10001},   {719,1,0b00111},   {720,1,0b10101},   {721,1,0b01011},   {722,1,0b11111},   {723,0,0b00111},   {724,1,0b11110},   {725,0,0b00001},   {726,1,0b11110},   {727,1,0b10111},   {728,0,0b10111},   {729,1,0b11101},   {730,1,0b01000},   {731,1,0b10000},   {732,1,0b11110},   {733,0,0b01110},   {734,1,0b10010},   {735,0,0b10111},   {736,1,0b10111},   {737,1,0b01010},   {738,1,0b11111},   {739,1,0b11000},   {740,0,0b10110},   {741,1,0b10110},   {742,1,0b01111},   {743,1,0b01010},   {744,0,0b11000},   {745,1,0b11101},   {746,0,0b00101},   {747,1,0b10011},   {748,0,0b10001},   {749,0,0b10001},   {750,1,0b11010},   {751,1,0b10000},   {752,1,0b01001},   {753,0,0b11101},   {754,1,0b11101},   {755,0,0b00110},   {756,1,0b00101},   {757,1,0b01001},   {758,1,0b10000},   {759,1,0b01011},   {760,0,0b00001},   {761,1,0b10011},   {762,1,0b01011},   {763,0,0b01000},   {764,1,0b11010},   {765,1,0b00111},   {766,1,0b11011},   {767,0,0b00001},   {768,1,0b00110},   {769,1,0b10001},   {770,1,0b00001},   {771,1,0b10010},   {772,1,0b00001},   {773,1,0b00111},   {774,1,0b11110},   {775,1,0b01000},   {776,1,0b11000},   {777,1,0b01101},   {778,0,0b00010},   {779,1,0b01010},   {780,1,0b00001},   {781,1,0b01101},   {782,0,0b00011},   {783,1,0b10110},   {784,0,0b00011},   {785,0,0b10101},   {786,1,0b10110},   {787,1,0b01111},   {788,0,0b01111},   {789,1,0b11010},   {790,1,0b10000},   {791,0,0b01110},   {792,1,0b11000},   {793,1,0b10010},   {794,0,0b01110},   {795,1,0b01101},   {796,1,0b01111},   {797,1,0b10000},   {798,0,0b00100},   {799,1,0b01111},   {800,0,0b00110},   {801,1,0b10111},   {802,1,0b11011},   {803,0,0b00010},   {804,1,0b11101},   {805,1,0b01011},   {806,1,0b11000},   {807,1,0b00111},   {808,0,0b00100},   {809,1,0b10101},   {810,0,0b00010},   {811,1,0b01110},   {812,1,0b00101},   {813,0,0b01011},   {814,1,0b11100},   {815,1,0b01000},   {816,0,0b00100},   {817,0,0b10000},   {818,1,0b11001},   {819,0,0b01101},   {820,1,0b11101},   {821,1,0b00100},   {822,1,0b01011},   {823,0,0b01111},   {824,0,0b10111},   {825,0,0b11001},   {826,0,0b11110},   {827,1,0b11101},   {828,1,0b11011},   {829,1,0b00111},   {830,1,0b10100},   {831,1,0b00110},   {832,0,0b01011},   {833,1,0b11110},   {834,1,0b00100},   {835,1,0b10001},   {836,1,0b01101},   {837,0,0b00001},   {838,1,0b11001},   {839,1,0b11001},   {840,1,0b10111},   {841,0,0b00010},   {842,0,0b10010},   {843,0,0b10011},   {844,1,0b11001},   {845,0,0b00010},   {846,1,0b10010},   {847,0,0b00010},   {848,0,0b01110},   {849,1,0b11011},   {850,1,0b00011},   {851,0,0b00110},   {852,0,0b01011},   {853,1,0b11000},   {854,1,0b11001},   {855,0,0b00001},   {856,1,0b01001},   {857,1,0b01100},   {858,0,0b00001},   {859,1,0b01011},   {860,1,0b01010},   {861,0,0b00111},   {862,1,0b01100},   {863,1,0b00010},   {864,1,0b11101},   {865,0,0b00011},   {866,0,0b11100},   {867,0,0b11011},   {868,1,0b11111},   {869,1,0b10010},   {870,0,0b00111},   {871,1,0b11101},   {872,1,0b01010},   {873,0,0b01100},   {874,1,0b10100},   {875,1,0b10111},   {876,1,0b01000},   {877,1,0b00011},   {878,1,0b11011},   {879,1,0b00110},   {880,1,0b10111},   {881,1,0b10011},   {882,0,0b01000},   {883,0,0b10111},   {884,1,0b11011},   {885,1,0b11111},   {886,1,0b10111},   {887,0,0b10011},   {888,1,0b11010},   {889,1,0b00101},   {890,1,0b00001},   {891,1,0b10101},   {892,0,0b01000},   {893,1,0b10101},   {894,1,0b00011},   {895,0,0b00101},   {896,1,0b11101},   {897,0,0b01000},   {898,1,0b10110},   {899,0,0b10100},   {900,1,0b11101},   {901,0,0b00110},   {902,1,0b00111},   {903,0,0b00101},   {904,0,0b11010},   {905,1,0b11110},   {906,0,0b01100},   {907,1,0b10011},   {908,0,0b01100},   {909,1,0b11100},   {910,1,0b11011},   {911,0,0b01111},   {912,1,0b11011},   {913,0,0b00001},   {914,1,0b10100},   {915,1,0b01010},   {916,1,0b01010},   {917,0,0b00010},   {918,1,0b01000},   {919,1,0b10100},   {920,0,0b01011},   {921,0,0b11000},   {922,1,0b11011},   {923,1,0b00011},   {924,0,0b00001},   {925,1,0b00111},   {926,1,0b10100},   {927,0,0b00111},   {928,1,0b10011},   {929,1,0b01011},   {930,0,0b01000},   {931,1,0b10101},   {932,0,0b10100},   {933,1,0b10111},   {934,0,0b11100},   {935,1,0b11111},   {936,1,0b01000},   {937,1,0b11101},   {938,1,0b11001},   {939,0,0b00100},   {940,1,0b10110},   {941,1,0b01000},   {942,0,0b00010},   {943,0,0b01000},   {944,0,0b00101},   {945,0,0b01001},   {946,0,0b10101},   {947,0,0b11011},   {948,1,0b11110},   {949,1,0b11001},   {950,0,0b01001},   {951,0,0b11001},   {952,0,0b11011},   {953,0,0b11101},   {954,1,0b11101},   {955,1,0b11101},   {956,1,0b00010},   {957,1,0b11011},   {958,1,0b11110},   {959,1,0b10001},   {960,1,0b01010},   {961,1,0b00110},   {962,1,0b00101},   {963,0,0b00010},   {964,1,0b11100},   {965,1,0b01100},   {966,0,0b10000},   {967,0,0b00101},   {968,1,0b01110},   {969,0,0b10010},   {970,1,0b11000},   {971,1,0b10110},   {972,0,0b10001},   {973,1,0b10011},   {974,1,0b01110},   {975,1,0b01101},   {976,0,0b00110},   {977,1,0b11100},   {978,1,0b00100},   {979,1,0b00010},   {980,1,0b00101},   {981,1,0b11011},   {982,1,0b11101},   {983,0,0b01000},   {984,1,0b11010},   {985,1,0b00011},   {986,1,0b00101},   {987,1,0b10001},   {988,1,0b00010},   {989,0,0b01010},   {990,1,0b01101},   {991,1,0b10010},   {992,0,0b00101},   {993,1,0b10111},   {994,1,0b10111},   {995,0,0b10000},   {996,0,0b10111},   {997,1,0b11001},   {998,0,0b00110},   {999,1,0b01001},   {1000,0,0b01100},   {1001,1,0b10010},   {1002,1,0b11001},   {1003,1,0b11110},   {1004,0,0b00100},   {1005,0,0b00001},   {1006,0,0b10111},   {1007,1,0b11111},   {1008,1,0b01111},   {1009,1,0b00100},   {1010,1,0b11100},   {1011,1,0b00001},   {1012,1,0b11111},   {1013,0,0b00011},   {1014,1,0b10001},   {1015,1,0b11101},   {1016,1,0b11110},   {1017,1,0b01001},   {1018,1,0b10100},   {1019,1,0b00111},   {1020,1,0b01001},   {1021,1,0b00011},   {1022,1,0b10011},   {1023,1,0b00101},   {1024,0,0b00001},   {1025,0,0b00111},   {1026,1,0b10011},   {1027,0,0b10010},   {1028,1,0b10110},   {1029,1,0b10110},   {1030,1,0b10110},   {1031,0,0b01000},   {1032,0,0b01010},   {1033,1,0b11010},   {1034,1,0b10111},   {1035,1,0b11011},   {1036,0,0b10000},   {1037,1,0b00100},   {1038,1,0b10101},   {1039,0,0b00110},   {1040,1,0b11000},   {1041,1,0b01001},   {1042,1,0b00001},   {1043,1,0b11001},   {1044,0,0b00010},   {1045,0,0b00100},   {1046,1,0b00110},   {1047,0,0b11000},   {1048,1,0b10111},   {1049,0,0b00110},   {1050,0,0b01111},   {1051,1,0b11000},   {1052,1,0b01100},   {1053,1,0b11101},   {1054,1,0b00110},   {1055,1,0b01110},   {1056,1,0b00001},   {1057,0,0b10000},   {1058,1,0b10111},   {1059,0,0b00011},   {1060,1,0b10100},   {1061,1,0b00010},   {1062,1,0b11011},   {1063,0,0b00101},   {1064,0,0b00111},   {1065,1,0b10011},   {1066,1,0b11111},   {1067,0,0b10000},   {1068,1,0b10101},   {1069,0,0b10000},   {1070,0,0b01100},   {1071,0,0b10100},   {1072,0,0b11000},   {1073,0,0b10101},   {1074,1,0b11111},   {1075,0,0b00001},   {1076,1,0b00011}};
                AssertStoreContents(s, store, occupieds_pos, checks);
            }
            s.DeleteRawFromInfixStore(store, 0b111111111010101);
            {
                const std::vector<uint32_t> occupieds_pos = {0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 22, 24, 26, 28, 29, 31, 32, 34, 36, 38, 39, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 78, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 127, 131, 135, 136, 138, 143, 144, 145, 147, 148, 152, 153, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 177, 178, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 221, 224, 226, 227, 228, 231, 232, 233, 236, 237, 240, 241, 244, 246, 247, 248, 249, 252, 254, 256, 257, 258, 259, 263, 264, 265, 266, 269, 271, 274, 276, 278, 282, 283, 284, 287, 288, 289, 290, 291, 294, 296, 297, 300, 301, 302, 303, 307, 309, 311, 313, 314, 315, 316, 317, 320, 323, 324, 325, 326, 327, 328, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 366, 370, 372, 373, 374, 376, 379, 380, 381, 385, 386, 388, 391, 394, 396, 397, 403, 405, 408, 410, 412, 413, 416, 418, 420, 421, 422, 424, 426, 427, 430, 431, 432, 433, 434, 437, 438, 440, 443, 445, 446, 447, 450, 453, 454, 458, 460, 461, 462, 464, 465, 467, 468, 471, 472, 474, 476, 478, 481, 484, 485, 486, 487, 488, 489, 491, 493, 494, 497, 501, 503, 505, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 529, 530, 531, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 547, 549, 553, 554, 562, 563, 568, 569, 570, 572, 574, 579, 581, 582, 583, 584, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 600, 601, 602, 604, 606, 607, 610, 612, 613, 616, 617, 620, 621, 624, 625, 626, 627, 630, 631, 632, 634, 637, 639, 640, 642, 643, 644, 646, 649, 652, 653, 655, 656, 657, 659, 662, 664, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 722, 723, 725, 726, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 758, 761, 763, 764, 766, 767, 769, 770, 772, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 798, 801, 804, 805, 806, 808, 811, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 828, 829, 830, 831, 836, 838, 840, 841, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 859, 861, 862, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 891, 893, 894, 895, 898, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 946, 949, 950, 952, 955, 956, 957, 959, 960, 961, 962, 963, 964, 968, 971, 972, 973, 974, 975, 976, 979, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023};
                const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  0,0,0b00010},   {  1,1,0b00001},   {  2,0,0b00010},   {  3,0,0b01010},   {  4,1,0b11101},   {  5,0,0b01101},   {  6,0,0b10010},   {  7,0,0b10110},   {  8,1,0b11101},   {  9,0,0b10100},   { 10,0,0b11000},   { 11,0,0b10110},   { 12,0,0b10101},   { 13,1,0b11111},   { 14,0,0b10101},   { 15,0,0b10111},   { 16,1,0b11001},   { 17,0,0b00001},   { 18,1,0b11000},   { 19,0,0b11011},   { 20,1,0b11011},   { 21,0,0b00001},   { 22,0,0b11011},   { 23,0,0b11101},   { 24,1,0b11111},   { 25,1,0b01101},   { 26,0,0b10100},   { 27,1,0b10110},   { 28,1,0b11101},   { 29,0,0b01000},   { 30,0,0b00001},   { 31,0,0b00011},   { 32,1,0b00111},   { 33,0,0b01111},   { 34,1,0b11001},   { 35,1,0b01001},   { 36,1,0b00010},   { 37,0,0b10101},   { 38,1,0b11111},   { 39,1,0b10010},   { 40,0,0b01000},   { 41,0,0b00111},   { 42,1,0b10011},   { 43,0,0b10001},   { 44,1,0b11001},   { 45,1,0b01001},   { 46,1,0b11110},   { 47,1,0b00010},   { 48,1,0b01101},   { 49,1,0b10000},   { 50,0,0b01000},   { 51,1,0b00110},   { 52,0,0b10000},   { 53,0,0b10100},   { 54,1,0b11011},   { 55,1,0b00010},   { 56,1,0b11000},   { 57,1,0b11111},   { 58,1,0b11111},   { 59,1,0b00111},   { 60,0,0b01011},   { 61,1,0b01110},   { 62,1,0b01010},   { 63,0,0b00100},   { 64,0,0b01100},   { 65,1,0b01101},   { 66,0,0b00010},   { 67,1,0b10001},   { 68,0,0b01101},   { 69,1,0b11001},   { 70,1,0b11000},   { 71,0,0b00011},   { 72,1,0b01010},   { 73,1,0b11111},   { 74,1,0b00010},   { 75,0,0b01000},   { 76,1,0b11001},   { 77,1,0b01100},   { 78,1,0b01100},   { 79,1,0b10110},   { 80,1,0b11011},   { 81,0,0b10100},   { 82,0,0b10001},   { 83,1,0b10101},   { 84,1,0b00011},   { 85,1,0b10001},   { 86,1,0b10110},   { 87,0,0b10100},   { 88,0,0b10101},   { 89,1,0b11100},   { 90,1,0b01000},   { 91,1,0b00101},   { 92,1,0b11111},   { 93,1,0b10110},   { 94,0,0b01100},   { 95,0,0b10010},   { 96,0,0b11100},   { 97,1,0b11110},   { 98,0,0b10000},   { 99,1,0b01010},   {100,1,0b01011},   {101,1,0b10110},   {102,0,0b00010},   {103,1,0b11000},   {104,1,0b01001},   {105,0,0b00010},   {106,0,0b10101},   {107,0,0b11100},   {108,1,0b11110},   {109,1,0b01010},   {110,1,0b11001},   {111,0,0b01100},   {112,1,0b11100},   {113,1,0b01000},   {114,1,0b01101},   {115,1,0b10110},   {116,1,0b10011},   {117,0,0b10011},   {118,1,0b11001},   {119,1,0b10000},   {120,0,0b00001},   {121,0,0b01011},   {122,1,0b11010},   {123,0,0b00100},   {124,0,0b00100},   {125,1,0b10011},   {126,1,0b00011},   {127,0,0b00011},   {128,1,0b00011},   {129,0,0b10101},   {130,1,0b11101},   {131,1,0b01001},   {132,1,0b11110},   {133,1,0b01010},   {134,1,0b00100},   {135,0,0b01001},   {136,1,0b01101},   {137,1,0b00110},   {138,0,0b01111},   {139,1,0b10010},   {140,1,0b11101},   {141,1,0b11111},   {142,0,0b01011},   {143,1,0b11001},   {144,0,0b00110},   {145,0,0b00111},   {146,0,0b10011},   {147,1,0b10101},   {148,1,0b11100},   {149,1,0b00001},   {150,0,0b01010},   {151,1,0b10110},   {152,1,0b10101},   {153,0,0b00100},   {154,1,0b01010},   {155,0,0b00110},   {156,0,0b01100},   {157,1,0b10111},   {158,1,0b11100},   {159,0,0b11011},   {160,1,0b11011},   {161,1,0b00001},   {162,0,0b01010},   {163,1,0b11110},   {164,1,0b11110},   {165,1,0b00110},   {166,1,0b11011},   {167,1,0b11011},   {168,1,0b10001},   {169,1,0b00101},   {170,1,0b00100},   {171,0,0b10110},   {172,1,0b11111},   {173,1,0b10001},   {174,1,0b11111},   {175,0,0b01000},   {176,1,0b01101},   {177,1,0b10101},   {178,0,0b01010},   {179,1,0b10101},   {180,1,0b01010},   {181,0,0b00001},   {182,1,0b01101},   {183,1,0b11110},   {184,0,0b01001},   {185,0,0b01111},   {186,1,0b10111},   {187,1,0b11110},   {188,1,0b00101},   {190,0,0b01110},   {191,0,0b10001},   {192,1,0b10111},   {193,1,0b11100},   {194,1,0b11010},   {195,0,0b10100},   {196,1,0b11110},   {197,0,0b01110},   {198,1,0b11001},   {199,1,0b01100},   {200,1,0b00100},   {201,0,0b01000},   {202,0,0b01011},   {203,1,0b10100},   {204,1,0b11111},   {205,1,0b00111},   {206,1,0b11111},   {207,1,0b10100},   {208,0,0b10011},   {209,1,0b11010},   {210,1,0b10100},   {211,1,0b10101},   {212,0,0b01110},   {213,1,0b11011},   {214,0,0b11011},   {215,1,0b11110},   {216,1,0b10100},   {217,1,0b00101},   {218,0,0b10100},   {219,0,0b10010},   {220,1,0b10101},   {221,0,0b10000},   {222,0,0b01100},   {223,0,0b01010},   {224,1,0b01001},   {225,1,0b10001},   {226,0,0b10000},   {227,1,0b10010},   {228,1,0b11101},   {229,1,0b10011},   {230,1,0b00001},   {231,1,0b11101},   {232,0,0b00111},   {233,1,0b10001},   {234,1,0b11011},   {235,0,0b00001},   {236,0,0b00110},   {237,0,0b01010},   {238,1,0b11100},   {239,0,0b10000},   {240,1,0b11100},   {241,0,0b01001},   {242,1,0b01011},   {243,1,0b11111},   {244,1,0b01101},   {245,1,0b01110},   {246,0,0b10011},   {247,1,0b10101},   {248,0,0b01110},   {249,1,0b10100},   {250,0,0b10000},   {251,0,0b10010},   {252,0,0b10100},   {253,1,0b10011},   {254,0,0b01011},   {255,1,0b10011},   {256,1,0b00101},   {257,1,0b10101},   {258,1,0b10100},   {259,1,0b10001},   {261,1,0b01100},   {262,1,0b11100},   {265,0,0b10000},   {266,1,0b10111},   {267,1,0b10111},   {269,0,0b00010},   {270,1,0b10110},   {271,1,0b00001},   {272,1,0b01111},   {273,0,0b00101},   {274,0,0b01001},   {275,0,0b10001},   {276,1,0b11111},   {277,1,0b10110},   {278,1,0b00011},   {279,0,0b00101},   {280,1,0b10010},   {281,0,0b00001},   {282,0,0b00111},   {283,1,0b00111},   {284,1,0b01100},   {285,0,0b00001},   {286,1,0b11011},   {288,0,0b01000},   {289,0,0b01111},   {290,1,0b10100},   {291,1,0b00001},   {292,0,0b00110},   {293,1,0b11001},   {296,0,0b01011},   {297,1,0b10100},   {298,0,0b01100},   {299,1,0b10100},   {300,0,0b01100},   {301,1,0b11111},   {302,1,0b11011},   {303,0,0b00111},   {304,0,0b01110},   {305,1,0b11101},   {306,0,0b00011},   {307,0,0b01110},   {308,1,0b10011},   {309,1,0b01011},   {310,0,0b01111},   {311,1,0b11011},   {312,0,0b01100},   {313,0,0b01001},   {314,1,0b10011},   {315,1,0b00101},   {316,0,0b01010},   {317,1,0b01100},   {318,0,0b01000},   {319,1,0b01101},   {320,1,0b00101},   {321,0,0b00101},   {322,1,0b01011},   {323,0,0b01001},   {324,1,0b11011},   {325,0,0b10000},   {326,1,0b10101},   {327,0,0b00100},   {328,1,0b01111},   {329,1,0b01001},   {330,0,0b10001},   {331,0,0b11010},   {332,1,0b11011},   {333,1,0b11010},   {334,0,0b01100},   {335,0,0b11000},   {336,1,0b10011},   {337,0,0b01111},   {338,1,0b11110},   {339,0,0b01100},   {340,0,0b10001},   {341,0,0b10011},   {342,0,0b10101},   {343,0,0b11011},   {344,1,0b11111},   {345,0,0b00111},   {346,1,0b01100},   {347,1,0b01001},   {348,0,0b10111},   {349,1,0b11011},   {350,1,0b01111},   {351,1,0b00101},   {352,0,0b00011},   {353,0,0b01001},   {354,1,0b11001},   {355,0,0b00001},   {356,1,0b01100},   {357,1,0b10000},   {358,1,0b11101},   {359,1,0b00001},   {360,0,0b01010},   {361,0,0b10011},   {362,1,0b11101},   {363,0,0b10100},   {364,1,0b11011},   {365,1,0b10110},   {366,1,0b01101},   {367,1,0b10010},   {368,1,0b01110},   {369,1,0b00110},   {370,0,0b01111},   {371,0,0b10110},   {372,0,0b10110},   {373,1,0b11011},   {374,0,0b01011},   {375,1,0b10101},   {376,0,0b10000},   {377,0,0b00111},   {378,1,0b11000},   {379,1,0b10001},   {380,0,0b01110},   {381,1,0b10010},   {382,0,0b10000},   {383,0,0b00011},   {384,1,0b10001},   {385,0,0b00111},   {386,0,0b11010},   {387,1,0b11001},   {388,0,0b00100},   {389,1,0b10101},   {390,1,0b01010},   {391,1,0b11010},   {392,1,0b00101},   {393,1,0b00111},   {394,0,0b01111},   {395,0,0b10100},   {396,0,0b10100},   {397,1,0b10011},   {398,1,0b10110},   {399,1,0b00100},   {400,0,0b11100},   {401,1,0b11101},   {402,0,0b00001},   {403,1,0b10110},   {404,1,0b10011},   {405,0,0b10010},   {406,1,0b10111},   {407,0,0b11100},   {408,1,0b11010},   {409,1,0b00111},   {410,1,0b10001},   {411,1,0b10110},   {412,0,0b00011},   {413,1,0b10011},   {414,1,0b00101},   {415,0,0b01111},   {416,1,0b11111},   {417,0,0b00110},   {418,1,0b01100},   {419,1,0b10111},   {420,1,0b10110},   {421,1,0b11111},   {422,1,0b01101},   {424,1,0b01100},   {426,0,0b00010},   {427,1,0b01100},   {429,0,0b00001},   {430,0,0b00011},   {431,1,0b11001},   {432,1,0b10001},   {433,0,0b00001},   {434,1,0b11001},   {435,1,0b11010},   {437,1,0b01011},   {439,0,0b10001},   {440,1,0b11001},   {442,1,0b01001},   {443,1,0b01100},   {444,1,0b11010},   {446,1,0b10101},   {448,0,0b10000},   {449,0,0b01101},   {450,0,0b11000},   {451,1,0b11010},   {452,0,0b01111},   {453,1,0b10011},   {454,1,0b01110},   {455,1,0b01100},   {456,0,0b10111},   {457,1,0b11001},   {458,1,0b10100},   {459,1,0b10100},   {460,0,0b00011},   {461,0,0b01100},   {462,1,0b01011},   {463,1,0b11010},   {464,1,0b10000},   {466,1,0b10100},   {468,1,0b10110},   {469,1,0b01100},   {470,0,0b00101},   {471,0,0b10110},   {472,1,0b11111},   {473,0,0b11001},   {474,1,0b11110},   {476,1,0b01101},   {477,1,0b00101},   {482,1,0b11010},   {484,1,0b01001},   {485,1,0b11100},   {486,1,0b10101},   {488,1,0b10110},   {489,1,0b00011},   {491,0,0b01010},   {492,1,0b01010},   {493,1,0b00001},   {495,0,0b01001},   {496,1,0b11110},   {497,0,0b10001},   {498,1,0b11011},   {499,1,0b01000},   {501,0,0b11001},   {502,1,0b11100},   {503,0,0b00001},   {504,0,0b11010},   {505,0,0b11011},   {506,1,0b11101},   {507,1,0b00111},   {509,1,0b01101},   {510,0,0b01010},   {511,1,0b10011},   {512,0,0b00001},   {513,1,0b01010},   {514,1,0b10011},   {515,0,0b00101},   {516,1,0b11100},   {517,0,0b01010},   {518,1,0b11011},   {519,0,0b10000},   {520,1,0b10101},   {521,1,0b11010},   {522,1,0b10000},   {523,1,0b11111},   {527,0,0b01000},   {528,0,0b01001},   {529,1,0b10100},   {530,0,0b01110},   {531,0,0b01111},   {532,0,0b10011},   {533,0,0b11101},   {534,1,0b11101},   {535,1,0b11010},   {536,1,0b00110},   {537,1,0b11001},   {538,0,0b01100},   {539,0,0b10010},   {540,1,0b10001},   {541,0,0b10110},   {542,1,0b11100},   {543,0,0b01111},   {544,1,0b10010},   {545,0,0b00011},   {546,0,0b00110},   {547,1,0b10001},   {548,1,0b01011},   {549,1,0b01111},   {550,1,0b10101},   {551,1,0b00111},   {552,1,0b10011},   {553,1,0b10110},   {554,0,0b00001},   {555,1,0b00010},   {556,1,0b00011},   {557,1,0b01010},   {558,0,0b01000},   {559,1,0b01100},   {560,0,0b01010},   {561,1,0b01011},   {562,1,0b11010},   {563,1,0b01011},   {564,0,0b11010},   {565,1,0b11111},   {566,0,0b01001},   {567,1,0b10110},   {568,1,0b01111},   {569,1,0b10001},   {570,0,0b01100},   {571,1,0b10110},   {572,1,0b11110},   {573,1,0b10010},   {574,0,0b10000},   {575,0,0b01110},   {576,1,0b11101},   {577,0,0b10001},   {578,1,0b10011},   {579,1,0b10101},   {580,1,0b11011},   {582,1,0b00111},   {583,1,0b00110},   {591,1,0b00010},   {592,1,0b00101},   {597,1,0b11101},   {598,1,0b00100},   {599,1,0b10010},   {602,1,0b11110},   {604,1,0b01100},   {609,1,0b00101},   {611,1,0b10101},   {612,0,0b01001},   {613,1,0b01110},   {614,1,0b10011},   {615,1,0b01000},   {616,0,0b01111},   {617,1,0b11001},   {618,1,0b11011},   {619,1,0b10011},   {620,0,0b00101},   {621,1,0b11110},   {623,1,0b00111},   {624,0,0b10110},   {625,1,0b11101},   {626,1,0b01100},   {627,0,0b00111},   {628,0,0b11100},   {629,1,0b11001},   {630,1,0b11101},   {631,0,0b01010},   {632,0,0b10110},   {633,1,0b11110},   {634,1,0b10011},   {635,1,0b10011},   {636,1,0b01111},   {637,1,0b10111},   {638,0,0b00010},   {639,1,0b01111},   {640,1,0b01001},   {642,0,0b00011},   {643,0,0b00011},   {644,1,0b00111},   {645,1,0b10011},   {646,1,0b01001},   {648,0,0b01000},   {649,0,0b00010},   {650,0,0b00111},   {651,1,0b11000},   {652,1,0b00010},   {653,1,0b10111},   {654,1,0b00011},   {655,0,0b01110},   {656,1,0b10010},   {657,0,0b01101},   {658,1,0b01111},   {659,0,0b01001},   {660,0,0b10001},   {661,0,0b10100},   {662,0,0b10010},   {663,0,0b11010},   {664,1,0b11110},   {665,0,0b10001},   {666,1,0b11101},   {667,0,0b00001},   {668,0,0b01100},   {669,1,0b11000},   {670,1,0b00111},   {671,1,0b00100},   {672,0,0b10000},   {673,0,0b00001},   {674,1,0b01001},   {675,1,0b00101},   {676,0,0b11000},   {677,1,0b10011},   {678,0,0b01110},   {679,1,0b10001},   {680,1,0b01001},   {681,1,0b00011},   {682,1,0b00111},   {683,0,0b00010},   {684,1,0b11100},   {685,1,0b00010},   {686,0,0b01111},   {687,1,0b11010},   {688,1,0b11110},   {689,0,0b00100},   {690,0,0b10010},   {691,1,0b11110},   {692,1,0b11000},   {693,0,0b01100},   {694,0,0b01001},   {695,1,0b11110},   {696,1,0b11001},   {697,0,0b00111},   {698,1,0b01111},   {699,1,0b10001},   {700,1,0b01101},   {701,0,0b00100},   {702,1,0b00110},   {703,0,0b00100},   {704,1,0b01101},   {705,0,0b00001},   {706,0,0b01110},   {707,1,0b01110},   {708,0,0b00010},   {709,1,0b01101},   {710,0,0b00101},   {711,1,0b10100},   {712,1,0b01101},   {713,0,0b00001},   {714,1,0b10010},   {715,1,0b11110},   {716,1,0b00110},   {717,0,0b00001},   {718,0,0b01101},   {719,1,0b10001},   {720,1,0b00111},   {721,1,0b10101},   {722,1,0b01011},   {723,1,0b11111},   {724,0,0b00111},   {725,1,0b11110},   {726,0,0b00001},   {727,1,0b11110},   {728,1,0b10111},   {729,0,0b10111},   {730,1,0b11101},   {731,1,0b01000},   {732,1,0b10000},   {733,1,0b11110},   {734,0,0b01110},   {735,1,0b10010},   {736,0,0b10111},   {737,1,0b10111},   {738,1,0b01010},   {739,1,0b11111},   {740,1,0b11000},   {741,0,0b10110},   {742,1,0b10110},   {743,1,0b01111},   {744,1,0b01010},   {745,0,0b11000},   {746,1,0b11101},   {747,0,0b00101},   {748,1,0b10011},   {749,0,0b10001},   {750,0,0b10001},   {751,1,0b11010},   {752,1,0b10000},   {753,1,0b01001},   {754,0,0b11101},   {755,1,0b11101},   {756,0,0b00110},   {757,1,0b00101},   {758,1,0b01001},   {759,1,0b10000},   {760,1,0b01011},   {761,0,0b00001},   {762,1,0b10011},   {763,1,0b01011},   {764,0,0b01000},   {765,1,0b11010},   {766,1,0b00111},   {767,1,0b11011},   {768,0,0b00001},   {769,1,0b00110},   {770,1,0b10001},   {771,1,0b00001},   {772,1,0b10010},   {773,1,0b00001},   {774,1,0b00111},   {775,1,0b11110},   {776,1,0b01000},   {777,1,0b11000},   {778,1,0b01101},   {779,0,0b00010},   {780,1,0b01010},   {781,1,0b00001},   {782,1,0b01101},   {783,0,0b00011},   {784,1,0b10110},   {785,0,0b00011},   {786,0,0b10101},   {787,1,0b10110},   {788,1,0b01111},   {789,0,0b01111},   {790,1,0b11010},   {791,1,0b10000},   {792,0,0b01110},   {793,1,0b11000},   {794,1,0b10010},   {795,0,0b01110},   {796,1,0b01101},   {797,1,0b01111},   {798,1,0b10000},   {799,0,0b00100},   {800,1,0b01111},   {801,0,0b00110},   {802,1,0b10111},   {803,1,0b11011},   {804,0,0b00010},   {805,1,0b11101},   {806,1,0b01011},   {807,1,0b11000},   {808,1,0b00111},   {809,0,0b00100},   {810,1,0b10101},   {811,0,0b00010},   {812,1,0b01110},   {813,1,0b00101},   {814,0,0b01011},   {815,1,0b11100},   {816,1,0b01000},   {817,0,0b00100},   {818,0,0b10000},   {819,1,0b11001},   {820,0,0b01101},   {821,1,0b11101},   {822,1,0b00100},   {823,1,0b01011},   {824,0,0b01111},   {825,0,0b10111},   {826,0,0b11001},   {827,0,0b11110},   {828,1,0b11101},   {829,1,0b11011},   {830,1,0b00111},   {831,1,0b10100},   {832,1,0b00110},   {833,0,0b01011},   {834,1,0b11110},   {835,1,0b00100},   {836,1,0b10001},   {837,1,0b01101},   {838,0,0b00001},   {839,1,0b11001},   {840,1,0b11001},   {841,1,0b10111},   {842,0,0b00010},   {843,0,0b10010},   {844,0,0b10011},   {845,1,0b11001},   {846,0,0b00010},   {847,1,0b10010},   {848,0,0b00010},   {849,0,0b01110},   {850,1,0b11011},   {851,1,0b00011},   {852,0,0b00110},   {853,0,0b01011},   {854,1,0b11000},   {855,1,0b11001},   {856,0,0b00001},   {857,1,0b01001},   {858,1,0b01100},   {859,0,0b00001},   {860,1,0b01011},   {861,1,0b01010},   {862,0,0b00111},   {863,1,0b01100},   {864,1,0b00010},   {865,1,0b11101},   {866,0,0b00011},   {867,0,0b11100},   {868,0,0b11011},   {869,1,0b11111},   {870,1,0b10010},   {871,0,0b00111},   {872,1,0b11101},   {873,1,0b01010},   {874,0,0b01100},   {875,1,0b10100},   {876,1,0b10111},   {877,1,0b01000},   {878,1,0b00011},   {879,1,0b11011},   {880,1,0b00110},   {881,1,0b10111},   {882,1,0b10011},   {883,0,0b01000},   {884,0,0b10111},   {885,1,0b11011},   {886,1,0b11111},   {887,1,0b10111},   {888,0,0b10011},   {889,1,0b11010},   {890,1,0b00101},   {891,1,0b00001},   {892,1,0b10101},   {893,0,0b01000},   {894,1,0b10101},   {895,1,0b00011},   {896,0,0b00101},   {897,1,0b11101},   {898,0,0b01000},   {899,1,0b10110},   {900,0,0b10100},   {901,1,0b11101},   {902,0,0b00110},   {903,1,0b00111},   {904,0,0b00101},   {905,0,0b11010},   {906,1,0b11110},   {907,0,0b01100},   {908,1,0b10011},   {909,0,0b01100},   {910,1,0b11100},   {911,1,0b11011},   {912,0,0b01111},   {913,1,0b11011},   {914,0,0b00001},   {915,1,0b10100},   {916,1,0b01010},   {917,1,0b01010},   {918,0,0b00010},   {919,1,0b01000},   {920,1,0b10100},   {921,0,0b01011},   {922,0,0b11000},   {923,1,0b11011},   {924,1,0b00011},   {925,0,0b00001},   {926,1,0b00111},   {927,1,0b10100},   {928,0,0b00111},   {929,1,0b10011},   {930,1,0b01011},   {931,0,0b01000},   {932,1,0b10101},   {933,0,0b10100},   {934,1,0b10111},   {935,0,0b11100},   {936,1,0b11111},   {937,1,0b01000},   {938,1,0b11101},   {939,1,0b11001},   {940,0,0b00100},   {941,1,0b10110},   {942,1,0b01000},   {943,0,0b00010},   {944,0,0b01000},   {945,0,0b00101},   {946,0,0b01001},   {947,0,0b10101},   {948,0,0b11011},   {949,1,0b11110},   {950,1,0b11001},   {951,0,0b01001},   {952,0,0b11001},   {953,0,0b11011},   {954,0,0b11101},   {955,1,0b11101},   {956,1,0b11101},   {957,1,0b00010},   {958,1,0b11011},   {959,1,0b11110},   {960,1,0b10001},   {961,1,0b01010},   {962,1,0b00110},   {963,1,0b00101},   {964,0,0b00010},   {965,1,0b11100},   {966,1,0b01100},   {967,0,0b10000},   {968,0,0b00101},   {969,1,0b01110},   {970,0,0b10010},   {971,1,0b11000},   {972,1,0b10110},   {973,0,0b10001},   {974,1,0b10011},   {975,1,0b01110},   {976,1,0b01101},   {977,0,0b00110},   {978,1,0b11100},   {979,1,0b00100},   {980,1,0b00010},   {981,1,0b00101},   {982,1,0b11011},   {983,1,0b11101},   {984,0,0b01000},   {985,1,0b11010},   {986,1,0b00011},   {987,1,0b00101},   {988,1,0b10001},   {989,1,0b00010},   {990,0,0b01010},   {991,1,0b01101},   {992,1,0b10010},   {993,0,0b00101},   {994,1,0b10111},   {995,1,0b10111},   {996,0,0b10000},   {997,0,0b10111},   {998,1,0b11001},   {999,0,0b00110},   {1000,1,0b01001},   {1001,0,0b01100},   {1002,1,0b10010},   {1003,1,0b11001},   {1004,1,0b11110},   {1005,0,0b00100},   {1006,0,0b00001},   {1007,0,0b10111},   {1008,1,0b11111},   {1009,1,0b01111},   {1010,1,0b00100},   {1011,1,0b11100},   {1012,1,0b00001},   {1013,1,0b11111},   {1014,0,0b00011},   {1015,1,0b10001},   {1016,1,0b11101},   {1017,1,0b11110},   {1018,1,0b01001},   {1019,1,0b10100},   {1020,1,0b00111},   {1021,1,0b01001},   {1022,1,0b00011},   {1023,1,0b10011},   {1024,1,0b00101},   {1025,0,0b00001},   {1026,0,0b00111},   {1027,1,0b10011},   {1028,0,0b10010},   {1029,1,0b10110},   {1030,1,0b10110},   {1031,1,0b10110},   {1032,0,0b01000},   {1033,0,0b01010},   {1034,1,0b11010},   {1035,1,0b10111},   {1036,1,0b11011},   {1037,0,0b10000},   {1038,1,0b00100},   {1039,1,0b10101},   {1040,0,0b00110},   {1041,1,0b11000},   {1042,1,0b01001},   {1043,1,0b00001},   {1044,1,0b11001},   {1045,0,0b00010},   {1046,0,0b00100},   {1047,1,0b00110},   {1048,0,0b11000},   {1049,1,0b10111},   {1050,0,0b00110},   {1051,0,0b01111},   {1052,1,0b11000},   {1053,1,0b01100},   {1054,1,0b11101},   {1055,1,0b00110},   {1056,1,0b01110},   {1057,1,0b00001},   {1058,0,0b10000},   {1059,1,0b10111},   {1060,0,0b00011},   {1061,1,0b10100},   {1062,1,0b00010},   {1063,1,0b11011},   {1064,0,0b00101},   {1065,0,0b00111},   {1066,1,0b10011},   {1067,1,0b11111},   {1068,0,0b10000},   {1069,1,0b10101},   {1070,0,0b10000},   {1071,0,0b01100},   {1072,0,0b10100},   {1073,0,0b11000},   {1074,1,0b11111},   {1075,0,0b00001},   {1076,1,0b00011}};
                AssertStoreContents(s, store, occupieds_pos, checks);
            }
        }

        SUBCASE("destroy run, shift right") {
            s.DeleteRawFromInfixStore(store, 0b111111110110101);
            const std::vector<uint32_t> occupieds_pos = {0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 22, 24, 26, 28, 29, 31, 32, 34, 36, 38, 39, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 78, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 127, 131, 135, 136, 138, 143, 144, 145, 147, 148, 152, 153, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 177, 178, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 221, 224, 226, 227, 228, 231, 232, 233, 236, 237, 240, 241, 244, 246, 247, 248, 249, 252, 254, 256, 257, 258, 259, 263, 264, 265, 266, 269, 271, 274, 276, 278, 282, 283, 284, 287, 288, 289, 290, 291, 294, 296, 297, 300, 301, 302, 303, 307, 309, 311, 313, 314, 315, 316, 317, 320, 323, 324, 325, 326, 327, 328, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 366, 370, 372, 373, 374, 376, 379, 380, 381, 385, 386, 388, 391, 394, 396, 397, 403, 405, 408, 410, 412, 413, 416, 418, 420, 421, 422, 424, 426, 427, 430, 431, 432, 433, 434, 437, 438, 440, 443, 445, 446, 447, 450, 453, 454, 458, 460, 461, 462, 464, 465, 467, 468, 471, 472, 474, 476, 478, 481, 484, 485, 486, 487, 488, 489, 491, 493, 494, 497, 501, 503, 505, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 529, 530, 531, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 547, 549, 553, 554, 562, 563, 568, 569, 570, 572, 574, 579, 581, 582, 583, 584, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 600, 601, 602, 604, 606, 607, 610, 612, 613, 616, 617, 620, 621, 624, 625, 626, 627, 630, 631, 632, 634, 637, 639, 640, 642, 643, 644, 646, 649, 652, 653, 655, 656, 657, 659, 662, 664, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 722, 723, 725, 726, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 758, 761, 763, 764, 766, 767, 769, 770, 772, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 798, 801, 804, 805, 806, 808, 811, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 828, 829, 830, 831, 836, 838, 840, 841, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 859, 861, 862, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 891, 893, 894, 895, 898, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 946, 949, 950, 952, 955, 956, 957, 959, 960, 961, 962, 963, 964, 968, 971, 972, 973, 974, 975, 976, 979, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023};
            const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  0,0,0b00010},   {  1,1,0b00001},   {  2,0,0b00010},   {  3,0,0b01010},   {  4,1,0b11101},   {  5,0,0b01101},   {  6,0,0b10010},   {  7,0,0b10110},   {  8,1,0b11101},   {  9,0,0b10100},   { 10,0,0b11000},   { 11,0,0b10110},   { 12,0,0b10101},   { 13,1,0b11111},   { 14,0,0b10101},   { 15,0,0b10111},   { 16,1,0b11001},   { 17,0,0b00001},   { 18,1,0b11000},   { 19,0,0b11011},   { 20,1,0b11011},   { 21,0,0b00001},   { 22,0,0b11011},   { 23,0,0b11101},   { 24,1,0b11111},   { 25,1,0b01101},   { 26,0,0b10100},   { 27,1,0b10110},   { 28,1,0b11101},   { 29,0,0b01000},   { 30,0,0b00001},   { 31,0,0b00011},   { 32,1,0b00111},   { 33,0,0b01111},   { 34,1,0b11001},   { 35,1,0b01001},   { 36,1,0b00010},   { 37,0,0b10101},   { 38,1,0b11111},   { 39,1,0b10010},   { 40,0,0b01000},   { 41,0,0b00111},   { 42,1,0b10011},   { 43,0,0b10001},   { 44,1,0b11001},   { 45,1,0b01001},   { 46,1,0b11110},   { 47,1,0b00010},   { 48,1,0b01101},   { 49,1,0b10000},   { 50,0,0b01000},   { 51,1,0b00110},   { 52,0,0b10000},   { 53,0,0b10100},   { 54,1,0b11011},   { 55,1,0b00010},   { 56,1,0b11000},   { 57,1,0b11111},   { 58,1,0b11111},   { 59,1,0b00111},   { 60,0,0b01011},   { 61,1,0b01110},   { 62,1,0b01010},   { 63,0,0b00100},   { 64,0,0b01100},   { 65,1,0b01101},   { 66,0,0b00010},   { 67,1,0b10001},   { 68,0,0b01101},   { 69,1,0b11001},   { 70,1,0b11000},   { 71,0,0b00011},   { 72,1,0b01010},   { 73,1,0b11111},   { 74,1,0b00010},   { 75,0,0b01000},   { 76,1,0b11001},   { 77,1,0b01100},   { 78,1,0b01100},   { 79,1,0b10110},   { 80,1,0b11011},   { 81,0,0b10100},   { 82,0,0b10001},   { 83,1,0b10101},   { 84,1,0b00011},   { 85,1,0b10001},   { 86,1,0b10110},   { 87,0,0b10100},   { 88,0,0b10101},   { 89,1,0b11100},   { 90,1,0b01000},   { 91,1,0b00101},   { 92,1,0b11111},   { 93,1,0b10110},   { 94,0,0b01100},   { 95,0,0b10010},   { 96,0,0b11100},   { 97,1,0b11110},   { 98,0,0b10000},   { 99,1,0b01010},   {100,1,0b01011},   {101,1,0b10110},   {102,0,0b00010},   {103,1,0b11000},   {104,1,0b01001},   {105,0,0b00010},   {106,0,0b10101},   {107,0,0b11100},   {108,1,0b11110},   {109,1,0b01010},   {110,1,0b11001},   {111,0,0b01100},   {112,1,0b11100},   {113,1,0b01000},   {114,1,0b01101},   {115,1,0b10110},   {116,1,0b10011},   {117,0,0b10011},   {118,1,0b11001},   {119,1,0b10000},   {120,0,0b00001},   {121,0,0b01011},   {122,1,0b11010},   {123,0,0b00100},   {124,0,0b00100},   {125,1,0b10011},   {126,1,0b00011},   {127,0,0b00011},   {128,1,0b00011},   {129,0,0b10101},   {130,1,0b11101},   {131,1,0b01001},   {132,1,0b11110},   {133,1,0b01010},   {134,1,0b00100},   {135,0,0b01001},   {136,1,0b01101},   {137,1,0b00110},   {138,0,0b01111},   {139,1,0b10010},   {140,1,0b11101},   {141,1,0b11111},   {142,0,0b01011},   {143,1,0b11001},   {144,0,0b00110},   {145,0,0b00111},   {146,0,0b10011},   {147,1,0b10101},   {148,1,0b11100},   {149,1,0b00001},   {150,0,0b01010},   {151,1,0b10110},   {152,1,0b10101},   {153,0,0b00100},   {154,1,0b01010},   {155,0,0b00110},   {156,0,0b01100},   {157,1,0b10111},   {158,1,0b11100},   {159,0,0b11011},   {160,1,0b11011},   {161,1,0b00001},   {162,0,0b01010},   {163,1,0b11110},   {164,1,0b11110},   {165,1,0b00110},   {166,1,0b11011},   {167,1,0b11011},   {168,1,0b10001},   {169,1,0b00101},   {170,1,0b00100},   {171,0,0b10110},   {172,1,0b11111},   {173,1,0b10001},   {174,1,0b11111},   {175,0,0b01000},   {176,1,0b01101},   {177,1,0b10101},   {178,0,0b01010},   {179,1,0b10101},   {180,1,0b01010},   {181,0,0b00001},   {182,1,0b01101},   {183,1,0b11110},   {184,0,0b01001},   {185,0,0b01111},   {186,1,0b10111},   {187,1,0b11110},   {188,1,0b00101},   {190,0,0b01110},   {191,0,0b10001},   {192,1,0b10111},   {193,1,0b11100},   {194,1,0b11010},   {195,0,0b10100},   {196,1,0b11110},   {197,0,0b01110},   {198,1,0b11001},   {199,1,0b01100},   {200,1,0b00100},   {201,0,0b01000},   {202,0,0b01011},   {203,1,0b10100},   {204,1,0b11111},   {205,1,0b00111},   {206,1,0b11111},   {207,1,0b10100},   {208,0,0b10011},   {209,1,0b11010},   {210,1,0b10100},   {211,1,0b10101},   {212,0,0b01110},   {213,1,0b11011},   {214,0,0b11011},   {215,1,0b11110},   {216,1,0b10100},   {217,1,0b00101},   {218,0,0b10100},   {219,0,0b10010},   {220,1,0b10101},   {221,0,0b10000},   {222,0,0b01100},   {223,0,0b01010},   {224,1,0b01001},   {225,1,0b10001},   {226,0,0b10000},   {227,1,0b10010},   {228,1,0b11101},   {229,1,0b10011},   {230,1,0b00001},   {231,1,0b11101},   {232,0,0b00111},   {233,1,0b10001},   {234,1,0b11011},   {235,0,0b00001},   {236,0,0b00110},   {237,0,0b01010},   {238,1,0b11100},   {239,0,0b10000},   {240,1,0b11100},   {241,0,0b01001},   {242,1,0b01011},   {243,1,0b11111},   {244,1,0b01101},   {245,1,0b01110},   {246,0,0b10011},   {247,1,0b10101},   {248,0,0b01110},   {249,1,0b10100},   {250,0,0b10000},   {251,0,0b10010},   {252,0,0b10100},   {253,1,0b10011},   {254,0,0b01011},   {255,1,0b10011},   {256,1,0b00101},   {257,1,0b10101},   {258,1,0b10100},   {259,1,0b10001},   {261,1,0b01100},   {262,1,0b11100},   {265,0,0b10000},   {266,1,0b10111},   {267,1,0b10111},   {269,0,0b00010},   {270,1,0b10110},   {271,1,0b00001},   {272,1,0b01111},   {273,0,0b00101},   {274,0,0b01001},   {275,0,0b10001},   {276,1,0b11111},   {277,1,0b10110},   {278,1,0b00011},   {279,0,0b00101},   {280,1,0b10010},   {281,0,0b00001},   {282,0,0b00111},   {283,1,0b00111},   {284,1,0b01100},   {285,0,0b00001},   {286,1,0b11011},   {288,0,0b01000},   {289,0,0b01111},   {290,1,0b10100},   {291,1,0b00001},   {292,0,0b00110},   {293,1,0b11001},   {296,0,0b01011},   {297,1,0b10100},   {298,0,0b01100},   {299,1,0b10100},   {300,0,0b01100},   {301,1,0b11111},   {302,1,0b11011},   {303,0,0b00111},   {304,0,0b01110},   {305,1,0b11101},   {306,0,0b00011},   {307,0,0b01110},   {308,1,0b10011},   {309,1,0b01011},   {310,0,0b01111},   {311,1,0b11011},   {312,0,0b01100},   {313,0,0b01001},   {314,1,0b10011},   {315,1,0b00101},   {316,0,0b01010},   {317,1,0b01100},   {318,0,0b01000},   {319,1,0b01101},   {320,1,0b00101},   {321,0,0b00101},   {322,1,0b01011},   {323,0,0b01001},   {324,1,0b11011},   {325,0,0b10000},   {326,1,0b10101},   {327,0,0b00100},   {328,1,0b01111},   {329,1,0b01001},   {330,0,0b10001},   {331,0,0b11010},   {332,1,0b11011},   {333,1,0b11010},   {334,0,0b01100},   {335,0,0b11000},   {336,1,0b10011},   {337,0,0b01111},   {338,1,0b11110},   {339,0,0b01100},   {340,0,0b10001},   {341,0,0b10011},   {342,0,0b10101},   {343,0,0b11011},   {344,1,0b11111},   {345,0,0b00111},   {346,1,0b01100},   {347,1,0b01001},   {348,0,0b10111},   {349,1,0b11011},   {350,1,0b01111},   {351,1,0b00101},   {352,0,0b00011},   {353,0,0b01001},   {354,1,0b11001},   {355,0,0b00001},   {356,1,0b01100},   {357,1,0b10000},   {358,1,0b11101},   {359,1,0b00001},   {360,0,0b01010},   {361,0,0b10011},   {362,1,0b11101},   {363,0,0b10100},   {364,1,0b11011},   {365,1,0b10110},   {366,1,0b01101},   {367,1,0b10010},   {368,1,0b01110},   {369,1,0b00110},   {370,0,0b01111},   {371,0,0b10110},   {372,0,0b10110},   {373,1,0b11011},   {374,0,0b01011},   {375,1,0b10101},   {376,0,0b10000},   {377,0,0b00111},   {378,1,0b11000},   {379,1,0b10001},   {380,0,0b01110},   {381,1,0b10010},   {382,0,0b10000},   {383,0,0b00011},   {384,1,0b10001},   {385,0,0b00111},   {386,0,0b11010},   {387,1,0b11001},   {388,0,0b00100},   {389,1,0b10101},   {390,1,0b01010},   {391,1,0b11010},   {392,1,0b00101},   {393,1,0b00111},   {394,0,0b01111},   {395,0,0b10100},   {396,0,0b10100},   {397,1,0b10011},   {398,1,0b10110},   {399,1,0b00100},   {400,0,0b11100},   {401,1,0b11101},   {402,0,0b00001},   {403,1,0b10110},   {404,1,0b10011},   {405,0,0b10010},   {406,1,0b10111},   {407,0,0b11100},   {408,1,0b11010},   {409,1,0b00111},   {410,1,0b10001},   {411,1,0b10110},   {412,0,0b00011},   {413,1,0b10011},   {414,1,0b00101},   {415,0,0b01111},   {416,1,0b11111},   {417,0,0b00110},   {418,1,0b01100},   {419,1,0b10111},   {420,1,0b10110},   {421,1,0b11111},   {422,1,0b01101},   {424,1,0b01100},   {426,0,0b00010},   {427,1,0b01100},   {429,0,0b00001},   {430,0,0b00011},   {431,1,0b11001},   {432,1,0b10001},   {433,0,0b00001},   {434,1,0b11001},   {435,1,0b11010},   {437,1,0b01011},   {439,0,0b10001},   {440,1,0b11001},   {442,1,0b01001},   {443,1,0b01100},   {444,1,0b11010},   {446,1,0b10101},   {448,0,0b10000},   {449,0,0b01101},   {450,0,0b11000},   {451,1,0b11010},   {452,0,0b01111},   {453,1,0b10011},   {454,1,0b01110},   {455,1,0b01100},   {456,0,0b10111},   {457,1,0b11001},   {458,1,0b10100},   {459,1,0b10100},   {460,0,0b00011},   {461,0,0b01100},   {462,1,0b01011},   {463,1,0b11010},   {464,1,0b10000},   {466,1,0b10100},   {468,1,0b10110},   {469,1,0b01100},   {470,0,0b00101},   {471,0,0b10110},   {472,1,0b11111},   {473,0,0b11001},   {474,1,0b11110},   {476,1,0b01101},   {477,1,0b00101},   {482,1,0b11010},   {484,1,0b01001},   {485,1,0b11100},   {486,1,0b10101},   {488,1,0b10110},   {489,1,0b00011},   {491,0,0b01010},   {492,1,0b01010},   {493,1,0b00001},   {495,0,0b01001},   {496,1,0b11110},   {497,0,0b10001},   {498,1,0b11011},   {499,1,0b01000},   {501,0,0b11001},   {502,1,0b11100},   {503,0,0b00001},   {504,0,0b11010},   {505,0,0b11011},   {506,1,0b11101},   {507,1,0b00111},   {509,1,0b01101},   {510,0,0b01010},   {511,1,0b10011},   {512,0,0b00001},   {513,1,0b01010},   {514,1,0b10011},   {515,0,0b00101},   {516,1,0b11100},   {517,0,0b01010},   {518,1,0b11011},   {519,0,0b10000},   {520,1,0b10101},   {521,1,0b11010},   {522,1,0b10000},   {523,1,0b11111},   {527,0,0b01000},   {528,0,0b01001},   {529,1,0b10100},   {530,0,0b01110},   {531,0,0b01111},   {532,0,0b10011},   {533,0,0b11101},   {534,1,0b11101},   {535,1,0b11010},   {536,1,0b00110},   {537,1,0b11001},   {538,0,0b01100},   {539,0,0b10010},   {540,1,0b10001},   {541,0,0b10110},   {542,1,0b11100},   {543,0,0b01111},   {544,1,0b10010},   {545,0,0b00011},   {546,0,0b00110},   {547,1,0b10001},   {548,1,0b01011},   {549,1,0b01111},   {550,1,0b10101},   {551,1,0b00111},   {552,1,0b10011},   {553,1,0b10110},   {554,0,0b00001},   {555,1,0b00010},   {556,1,0b00011},   {557,1,0b01010},   {558,0,0b01000},   {559,1,0b01100},   {560,0,0b01010},   {561,1,0b01011},   {562,1,0b11010},   {563,1,0b01011},   {564,0,0b11010},   {565,1,0b11111},   {566,0,0b01001},   {567,1,0b10110},   {568,1,0b01111},   {569,1,0b10001},   {570,0,0b01100},   {571,1,0b10110},   {572,1,0b11110},   {573,1,0b10010},   {574,0,0b10000},   {575,0,0b01110},   {576,1,0b11101},   {577,0,0b10001},   {578,1,0b10011},   {579,1,0b10101},   {580,1,0b11011},   {582,1,0b00111},   {583,1,0b00110},   {591,1,0b00010},   {592,1,0b00101},   {597,1,0b11101},   {598,1,0b00100},   {599,1,0b10010},   {602,1,0b11110},   {604,1,0b01100},   {609,1,0b00101},   {611,1,0b10101},   {612,0,0b01001},   {613,1,0b01110},   {614,1,0b10011},   {615,1,0b01000},   {616,0,0b01111},   {617,1,0b11001},   {618,1,0b11011},   {619,1,0b10011},   {620,0,0b00101},   {621,1,0b11110},   {623,1,0b00111},   {624,0,0b10110},   {625,1,0b11101},   {626,1,0b01100},   {627,0,0b00111},   {628,0,0b11100},   {629,1,0b11001},   {630,1,0b11101},   {631,0,0b01010},   {632,0,0b10110},   {633,1,0b11110},   {634,1,0b10011},   {635,1,0b10011},   {636,1,0b01111},   {637,1,0b10111},   {638,0,0b00010},   {639,1,0b01111},   {640,1,0b01001},   {642,0,0b00011},   {643,0,0b00011},   {644,1,0b00111},   {645,1,0b10011},   {646,1,0b01001},   {647,0,0b01000},   {648,0,0b00010},   {649,0,0b00111},   {650,1,0b11000},   {651,1,0b00010},   {652,1,0b10111},   {653,1,0b00011},   {654,0,0b01110},   {655,1,0b10010},   {656,0,0b01101},   {657,1,0b01111},   {658,0,0b01001},   {659,0,0b10001},   {660,0,0b10100},   {661,0,0b10010},   {662,0,0b11010},   {663,1,0b11110},   {664,0,0b10001},   {665,1,0b11101},   {666,0,0b00001},   {667,0,0b01100},   {668,1,0b11000},   {669,1,0b00111},   {670,1,0b00100},   {671,0,0b10000},   {672,0,0b00001},   {673,1,0b01001},   {674,1,0b00101},   {675,0,0b11000},   {676,1,0b10011},   {677,0,0b01110},   {678,1,0b10001},   {679,1,0b01001},   {680,1,0b00011},   {681,1,0b00111},   {682,0,0b00010},   {683,1,0b11100},   {684,1,0b00010},   {685,0,0b01111},   {686,1,0b11010},   {687,1,0b11110},   {688,0,0b00100},   {689,0,0b10010},   {690,1,0b11110},   {691,1,0b11000},   {692,0,0b01100},   {693,0,0b01001},   {694,1,0b11110},   {695,1,0b11001},   {696,0,0b00111},   {697,1,0b01111},   {698,1,0b10001},   {699,1,0b01101},   {700,0,0b00100},   {701,1,0b00110},   {702,0,0b00100},   {703,1,0b01101},   {704,0,0b00001},   {705,0,0b01110},   {706,1,0b01110},   {707,0,0b00010},   {708,1,0b01101},   {709,0,0b00101},   {710,1,0b10100},   {711,1,0b01101},   {712,0,0b00001},   {713,1,0b10010},   {714,1,0b11110},   {715,1,0b00110},   {716,0,0b00001},   {717,0,0b01101},   {718,1,0b10001},   {719,1,0b00111},   {720,1,0b10101},   {721,1,0b01011},   {722,1,0b11111},   {723,0,0b00111},   {724,1,0b11110},   {725,0,0b00001},   {726,1,0b11110},   {727,1,0b10111},   {728,0,0b10111},   {729,1,0b11101},   {730,1,0b01000},   {731,1,0b10000},   {732,1,0b11110},   {733,0,0b01110},   {734,1,0b10010},   {735,0,0b10111},   {736,1,0b10111},   {737,1,0b01010},   {738,1,0b11111},   {739,1,0b11000},   {740,0,0b10110},   {741,1,0b10110},   {742,1,0b01111},   {743,1,0b01010},   {744,0,0b11000},   {745,1,0b11101},   {746,0,0b00101},   {747,1,0b10011},   {748,0,0b10001},   {749,0,0b10001},   {750,1,0b11010},   {751,1,0b10000},   {752,1,0b01001},   {753,0,0b11101},   {754,1,0b11101},   {755,0,0b00110},   {756,1,0b00101},   {757,1,0b01001},   {758,1,0b10000},   {759,1,0b01011},   {760,0,0b00001},   {761,1,0b10011},   {762,1,0b01011},   {763,0,0b01000},   {764,1,0b11010},   {765,1,0b00111},   {766,1,0b11011},   {767,0,0b00001},   {768,1,0b00110},   {769,1,0b10001},   {770,1,0b00001},   {771,1,0b10010},   {772,1,0b00001},   {773,1,0b00111},   {774,1,0b11110},   {775,1,0b01000},   {776,1,0b11000},   {777,1,0b01101},   {778,0,0b00010},   {779,1,0b01010},   {780,1,0b00001},   {781,1,0b01101},   {782,0,0b00011},   {783,1,0b10110},   {784,0,0b00011},   {785,0,0b10101},   {786,1,0b10110},   {787,1,0b01111},   {788,0,0b01111},   {789,1,0b11010},   {790,1,0b10000},   {791,0,0b01110},   {792,1,0b11000},   {793,1,0b10010},   {794,0,0b01110},   {795,1,0b01101},   {796,1,0b01111},   {797,1,0b10000},   {798,0,0b00100},   {799,1,0b01111},   {800,0,0b00110},   {801,1,0b10111},   {802,1,0b11011},   {803,0,0b00010},   {804,1,0b11101},   {805,1,0b01011},   {806,1,0b11000},   {807,1,0b00111},   {808,0,0b00100},   {809,1,0b10101},   {810,0,0b00010},   {811,1,0b01110},   {812,1,0b00101},   {813,0,0b01011},   {814,1,0b11100},   {815,1,0b01000},   {816,0,0b00100},   {817,0,0b10000},   {818,1,0b11001},   {819,0,0b01101},   {820,1,0b11101},   {821,1,0b00100},   {822,1,0b01011},   {823,0,0b01111},   {824,0,0b10111},   {825,0,0b11001},   {826,0,0b11110},   {827,1,0b11101},   {828,1,0b11011},   {829,1,0b00111},   {830,1,0b10100},   {831,1,0b00110},   {832,0,0b01011},   {833,1,0b11110},   {834,1,0b00100},   {835,1,0b10001},   {836,1,0b01101},   {837,0,0b00001},   {838,1,0b11001},   {839,1,0b11001},   {840,1,0b10111},   {841,0,0b00010},   {842,0,0b10010},   {843,0,0b10011},   {844,1,0b11001},   {845,0,0b00010},   {846,1,0b10010},   {847,0,0b00010},   {848,0,0b01110},   {849,1,0b11011},   {850,1,0b00011},   {851,0,0b00110},   {852,0,0b01011},   {853,1,0b11000},   {854,1,0b11001},   {855,0,0b00001},   {856,1,0b01001},   {857,1,0b01100},   {858,0,0b00001},   {859,1,0b01011},   {860,1,0b01010},   {861,0,0b00111},   {862,1,0b01100},   {863,1,0b00010},   {864,1,0b11101},   {865,0,0b00011},   {866,0,0b11100},   {867,0,0b11011},   {868,1,0b11111},   {869,1,0b10010},   {870,0,0b00111},   {871,1,0b11101},   {872,1,0b01010},   {873,0,0b01100},   {874,1,0b10100},   {875,1,0b10111},   {876,1,0b01000},   {877,1,0b00011},   {878,1,0b11011},   {879,1,0b00110},   {880,1,0b10111},   {881,1,0b10011},   {882,0,0b01000},   {883,0,0b10111},   {884,1,0b11011},   {885,1,0b11111},   {886,1,0b10111},   {887,0,0b10011},   {888,1,0b11010},   {889,1,0b00101},   {890,1,0b00001},   {891,1,0b10101},   {892,0,0b01000},   {893,1,0b10101},   {894,1,0b00011},   {895,0,0b00101},   {896,1,0b11101},   {897,0,0b01000},   {898,1,0b10110},   {899,0,0b10100},   {900,1,0b11101},   {901,0,0b00110},   {902,1,0b00111},   {903,0,0b00101},   {904,0,0b11010},   {905,1,0b11110},   {906,0,0b01100},   {907,1,0b10011},   {908,0,0b01100},   {909,1,0b11100},   {910,1,0b11011},   {911,0,0b01111},   {912,1,0b11011},   {913,0,0b00001},   {914,1,0b10100},   {915,1,0b01010},   {916,1,0b01010},   {917,0,0b00010},   {918,1,0b01000},   {919,1,0b10100},   {920,0,0b01011},   {921,0,0b11000},   {922,1,0b11011},   {923,1,0b00011},   {924,0,0b00001},   {925,1,0b00111},   {926,1,0b10100},   {927,0,0b00111},   {928,1,0b10011},   {929,1,0b01011},   {930,0,0b01000},   {931,1,0b10101},   {932,0,0b10100},   {933,1,0b10111},   {934,0,0b11100},   {935,1,0b11111},   {936,1,0b01000},   {937,1,0b11101},   {938,1,0b11001},   {939,0,0b00100},   {940,1,0b10110},   {941,1,0b01000},   {942,0,0b00010},   {943,0,0b01000},   {944,0,0b00101},   {945,0,0b01001},   {946,0,0b10101},   {947,0,0b11011},   {948,1,0b11110},   {949,1,0b11001},   {950,0,0b01001},   {951,0,0b11001},   {952,0,0b11011},   {953,0,0b11101},   {954,1,0b11101},   {955,1,0b11101},   {956,1,0b00010},   {957,1,0b11011},   {958,1,0b11110},   {959,1,0b10001},   {960,1,0b01010},   {961,1,0b00110},   {962,1,0b00101},   {963,0,0b00010},   {964,1,0b11100},   {965,1,0b01100},   {966,0,0b10000},   {967,0,0b00101},   {968,1,0b01110},   {969,0,0b10010},   {970,1,0b11000},   {971,1,0b10110},   {972,0,0b10001},   {973,1,0b10011},   {974,1,0b01110},   {975,1,0b01101},   {976,0,0b00110},   {977,1,0b11100},   {978,1,0b00100},   {979,1,0b00010},   {980,1,0b00101},   {981,1,0b11011},   {982,1,0b11101},   {983,0,0b01000},   {984,1,0b11010},   {985,1,0b00011},   {986,1,0b00101},   {987,1,0b10001},   {988,1,0b00010},   {989,0,0b01010},   {990,1,0b01101},   {991,1,0b10010},   {992,0,0b00101},   {993,1,0b10111},   {994,1,0b10111},   {995,0,0b10000},   {996,0,0b10111},   {997,1,0b11001},   {998,0,0b00110},   {999,1,0b01001},   {1000,0,0b01100},   {1001,1,0b10010},   {1002,1,0b11001},   {1003,1,0b11110},   {1004,0,0b00100},   {1005,0,0b00001},   {1006,0,0b10111},   {1007,1,0b11111},   {1008,1,0b01111},   {1009,1,0b00100},   {1010,1,0b11100},   {1011,1,0b00001},   {1012,1,0b11111},   {1013,0,0b00011},   {1014,1,0b10001},   {1015,1,0b11101},   {1016,1,0b11110},   {1017,1,0b01001},   {1018,1,0b10100},   {1019,1,0b00111},   {1020,1,0b01001},   {1021,1,0b00011},   {1022,1,0b10011},   {1023,1,0b00101},   {1024,0,0b00001},   {1025,0,0b00111},   {1026,1,0b10011},   {1027,0,0b10010},   {1028,1,0b10110},   {1029,1,0b10110},   {1030,1,0b10110},   {1031,0,0b01000},   {1032,0,0b01010},   {1033,1,0b11010},   {1034,1,0b10111},   {1035,1,0b11011},   {1036,0,0b10000},   {1037,1,0b00100},   {1038,1,0b10101},   {1039,0,0b00110},   {1040,1,0b11000},   {1041,1,0b01001},   {1042,1,0b00001},   {1043,1,0b11001},   {1044,0,0b00010},   {1045,0,0b00100},   {1046,1,0b00110},   {1047,0,0b11000},   {1048,1,0b10111},   {1049,0,0b00110},   {1050,0,0b01111},   {1051,1,0b11000},   {1052,1,0b01100},   {1053,1,0b11101},   {1054,1,0b00110},   {1055,1,0b01110},   {1056,1,0b00001},   {1057,0,0b10000},   {1058,1,0b10111},   {1059,0,0b00011},   {1060,1,0b10100},   {1061,1,0b00010},   {1062,1,0b11011},   {1063,0,0b00101},   {1064,0,0b00111},   {1065,1,0b10011},   {1066,1,0b11111},   {1067,1,0b10000},   {1068,0,0b10000},   {1069,0,0b01100},   {1070,0,0b10100},   {1071,0,0b11000},   {1072,0,0b10101},   {1073,0,0b10110},   {1074,1,0b11111},   {1075,0,0b00001},   {1076,1,0b00011}};
            AssertStoreContents(s, store, occupieds_pos, checks);
        }

        SUBCASE("end of run, shift right") {
            s.DeleteRawFromInfixStore(store, 0b111111111100011);
            const std::vector<uint32_t> occupieds_pos = {0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 22, 24, 26, 28, 29, 31, 32, 34, 36, 38, 39, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 78, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 127, 131, 135, 136, 138, 143, 144, 145, 147, 148, 152, 153, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 177, 178, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 221, 224, 226, 227, 228, 231, 232, 233, 236, 237, 240, 241, 244, 246, 247, 248, 249, 252, 254, 256, 257, 258, 259, 263, 264, 265, 266, 269, 271, 274, 276, 278, 282, 283, 284, 287, 288, 289, 290, 291, 294, 296, 297, 300, 301, 302, 303, 307, 309, 311, 313, 314, 315, 316, 317, 320, 323, 324, 325, 326, 327, 328, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 366, 370, 372, 373, 374, 376, 379, 380, 381, 385, 386, 388, 391, 394, 396, 397, 403, 405, 408, 410, 412, 413, 416, 418, 420, 421, 422, 424, 426, 427, 430, 431, 432, 433, 434, 437, 438, 440, 443, 445, 446, 447, 450, 453, 454, 458, 460, 461, 462, 464, 465, 467, 468, 471, 472, 474, 476, 478, 481, 484, 485, 486, 487, 488, 489, 491, 493, 494, 497, 501, 503, 505, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 529, 530, 531, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 547, 549, 553, 554, 562, 563, 568, 569, 570, 572, 574, 579, 581, 582, 583, 584, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 600, 601, 602, 604, 606, 607, 610, 612, 613, 616, 617, 620, 621, 624, 625, 626, 627, 630, 631, 632, 634, 637, 639, 640, 642, 643, 644, 646, 649, 652, 653, 655, 656, 657, 659, 662, 664, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 722, 723, 725, 726, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 758, 761, 763, 764, 766, 767, 769, 770, 772, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 798, 801, 804, 805, 806, 808, 811, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 828, 829, 830, 831, 836, 838, 840, 841, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 859, 861, 862, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 891, 893, 894, 895, 898, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 946, 949, 950, 952, 955, 956, 957, 959, 960, 961, 962, 963, 964, 968, 971, 972, 973, 974, 975, 976, 979, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023};
            const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  0,0,0b00010},   {  1,1,0b00001},   {  2,0,0b00010},   {  3,0,0b01010},   {  4,1,0b11101},   {  5,0,0b01101},   {  6,0,0b10010},   {  7,0,0b10110},   {  8,1,0b11101},   {  9,0,0b10100},   { 10,0,0b11000},   { 11,0,0b10110},   { 12,0,0b10101},   { 13,1,0b11111},   { 14,0,0b10101},   { 15,0,0b10111},   { 16,1,0b11001},   { 17,0,0b00001},   { 18,1,0b11000},   { 19,0,0b11011},   { 20,1,0b11011},   { 21,0,0b00001},   { 22,0,0b11011},   { 23,0,0b11101},   { 24,1,0b11111},   { 25,1,0b01101},   { 26,0,0b10100},   { 27,1,0b10110},   { 28,1,0b11101},   { 29,0,0b01000},   { 30,0,0b00001},   { 31,0,0b00011},   { 32,1,0b00111},   { 33,0,0b01111},   { 34,1,0b11001},   { 35,1,0b01001},   { 36,1,0b00010},   { 37,0,0b10101},   { 38,1,0b11111},   { 39,1,0b10010},   { 40,0,0b01000},   { 41,0,0b00111},   { 42,1,0b10011},   { 43,0,0b10001},   { 44,1,0b11001},   { 45,1,0b01001},   { 46,1,0b11110},   { 47,1,0b00010},   { 48,1,0b01101},   { 49,1,0b10000},   { 50,0,0b01000},   { 51,1,0b00110},   { 52,0,0b10000},   { 53,0,0b10100},   { 54,1,0b11011},   { 55,1,0b00010},   { 56,1,0b11000},   { 57,1,0b11111},   { 58,1,0b11111},   { 59,1,0b00111},   { 60,0,0b01011},   { 61,1,0b01110},   { 62,1,0b01010},   { 63,0,0b00100},   { 64,0,0b01100},   { 65,1,0b01101},   { 66,0,0b00010},   { 67,1,0b10001},   { 68,0,0b01101},   { 69,1,0b11001},   { 70,1,0b11000},   { 71,0,0b00011},   { 72,1,0b01010},   { 73,1,0b11111},   { 74,1,0b00010},   { 75,0,0b01000},   { 76,1,0b11001},   { 77,1,0b01100},   { 78,1,0b01100},   { 79,1,0b10110},   { 80,1,0b11011},   { 81,0,0b10100},   { 82,0,0b10001},   { 83,1,0b10101},   { 84,1,0b00011},   { 85,1,0b10001},   { 86,1,0b10110},   { 87,0,0b10100},   { 88,0,0b10101},   { 89,1,0b11100},   { 90,1,0b01000},   { 91,1,0b00101},   { 92,1,0b11111},   { 93,1,0b10110},   { 94,0,0b01100},   { 95,0,0b10010},   { 96,0,0b11100},   { 97,1,0b11110},   { 98,0,0b10000},   { 99,1,0b01010},   {100,1,0b01011},   {101,1,0b10110},   {102,0,0b00010},   {103,1,0b11000},   {104,1,0b01001},   {105,0,0b00010},   {106,0,0b10101},   {107,0,0b11100},   {108,1,0b11110},   {109,1,0b01010},   {110,1,0b11001},   {111,0,0b01100},   {112,1,0b11100},   {113,1,0b01000},   {114,1,0b01101},   {115,1,0b10110},   {116,1,0b10011},   {117,0,0b10011},   {118,1,0b11001},   {119,1,0b10000},   {120,0,0b00001},   {121,0,0b01011},   {122,1,0b11010},   {123,0,0b00100},   {124,0,0b00100},   {125,1,0b10011},   {126,1,0b00011},   {127,0,0b00011},   {128,1,0b00011},   {129,0,0b10101},   {130,1,0b11101},   {131,1,0b01001},   {132,1,0b11110},   {133,1,0b01010},   {134,1,0b00100},   {135,0,0b01001},   {136,1,0b01101},   {137,1,0b00110},   {138,0,0b01111},   {139,1,0b10010},   {140,1,0b11101},   {141,1,0b11111},   {142,0,0b01011},   {143,1,0b11001},   {144,0,0b00110},   {145,0,0b00111},   {146,0,0b10011},   {147,1,0b10101},   {148,1,0b11100},   {149,1,0b00001},   {150,0,0b01010},   {151,1,0b10110},   {152,1,0b10101},   {153,0,0b00100},   {154,1,0b01010},   {155,0,0b00110},   {156,0,0b01100},   {157,1,0b10111},   {158,1,0b11100},   {159,0,0b11011},   {160,1,0b11011},   {161,1,0b00001},   {162,0,0b01010},   {163,1,0b11110},   {164,1,0b11110},   {165,1,0b00110},   {166,1,0b11011},   {167,1,0b11011},   {168,1,0b10001},   {169,1,0b00101},   {170,1,0b00100},   {171,0,0b10110},   {172,1,0b11111},   {173,1,0b10001},   {174,1,0b11111},   {175,0,0b01000},   {176,1,0b01101},   {177,1,0b10101},   {178,0,0b01010},   {179,1,0b10101},   {180,1,0b01010},   {181,0,0b00001},   {182,1,0b01101},   {183,1,0b11110},   {184,0,0b01001},   {185,0,0b01111},   {186,1,0b10111},   {187,1,0b11110},   {188,1,0b00101},   {190,0,0b01110},   {191,0,0b10001},   {192,1,0b10111},   {193,1,0b11100},   {194,1,0b11010},   {195,0,0b10100},   {196,1,0b11110},   {197,0,0b01110},   {198,1,0b11001},   {199,1,0b01100},   {200,1,0b00100},   {201,0,0b01000},   {202,0,0b01011},   {203,1,0b10100},   {204,1,0b11111},   {205,1,0b00111},   {206,1,0b11111},   {207,1,0b10100},   {208,0,0b10011},   {209,1,0b11010},   {210,1,0b10100},   {211,1,0b10101},   {212,0,0b01110},   {213,1,0b11011},   {214,0,0b11011},   {215,1,0b11110},   {216,1,0b10100},   {217,1,0b00101},   {218,0,0b10100},   {219,0,0b10010},   {220,1,0b10101},   {221,0,0b10000},   {222,0,0b01100},   {223,0,0b01010},   {224,1,0b01001},   {225,1,0b10001},   {226,0,0b10000},   {227,1,0b10010},   {228,1,0b11101},   {229,1,0b10011},   {230,1,0b00001},   {231,1,0b11101},   {232,0,0b00111},   {233,1,0b10001},   {234,1,0b11011},   {235,0,0b00001},   {236,0,0b00110},   {237,0,0b01010},   {238,1,0b11100},   {239,0,0b10000},   {240,1,0b11100},   {241,0,0b01001},   {242,1,0b01011},   {243,1,0b11111},   {244,1,0b01101},   {245,1,0b01110},   {246,0,0b10011},   {247,1,0b10101},   {248,0,0b01110},   {249,1,0b10100},   {250,0,0b10000},   {251,0,0b10010},   {252,0,0b10100},   {253,1,0b10011},   {254,0,0b01011},   {255,1,0b10011},   {256,1,0b00101},   {257,1,0b10101},   {258,1,0b10100},   {259,1,0b10001},   {261,1,0b01100},   {262,1,0b11100},   {265,0,0b10000},   {266,1,0b10111},   {267,1,0b10111},   {269,0,0b00010},   {270,1,0b10110},   {271,1,0b00001},   {272,1,0b01111},   {273,0,0b00101},   {274,0,0b01001},   {275,0,0b10001},   {276,1,0b11111},   {277,1,0b10110},   {278,1,0b00011},   {279,0,0b00101},   {280,1,0b10010},   {281,0,0b00001},   {282,0,0b00111},   {283,1,0b00111},   {284,1,0b01100},   {285,0,0b00001},   {286,1,0b11011},   {288,0,0b01000},   {289,0,0b01111},   {290,1,0b10100},   {291,1,0b00001},   {292,0,0b00110},   {293,1,0b11001},   {296,0,0b01011},   {297,1,0b10100},   {298,0,0b01100},   {299,1,0b10100},   {300,0,0b01100},   {301,1,0b11111},   {302,1,0b11011},   {303,0,0b00111},   {304,0,0b01110},   {305,1,0b11101},   {306,0,0b00011},   {307,0,0b01110},   {308,1,0b10011},   {309,1,0b01011},   {310,0,0b01111},   {311,1,0b11011},   {312,0,0b01100},   {313,0,0b01001},   {314,1,0b10011},   {315,1,0b00101},   {316,0,0b01010},   {317,1,0b01100},   {318,0,0b01000},   {319,1,0b01101},   {320,1,0b00101},   {321,0,0b00101},   {322,1,0b01011},   {323,0,0b01001},   {324,1,0b11011},   {325,0,0b10000},   {326,1,0b10101},   {327,0,0b00100},   {328,1,0b01111},   {329,1,0b01001},   {330,0,0b10001},   {331,0,0b11010},   {332,1,0b11011},   {333,1,0b11010},   {334,0,0b01100},   {335,0,0b11000},   {336,1,0b10011},   {337,0,0b01111},   {338,1,0b11110},   {339,0,0b01100},   {340,0,0b10001},   {341,0,0b10011},   {342,0,0b10101},   {343,0,0b11011},   {344,1,0b11111},   {345,0,0b00111},   {346,1,0b01100},   {347,1,0b01001},   {348,0,0b10111},   {349,1,0b11011},   {350,1,0b01111},   {351,1,0b00101},   {352,0,0b00011},   {353,0,0b01001},   {354,1,0b11001},   {355,0,0b00001},   {356,1,0b01100},   {357,1,0b10000},   {358,1,0b11101},   {359,1,0b00001},   {360,0,0b01010},   {361,0,0b10011},   {362,1,0b11101},   {363,0,0b10100},   {364,1,0b11011},   {365,1,0b10110},   {366,1,0b01101},   {367,1,0b10010},   {368,1,0b01110},   {369,1,0b00110},   {370,0,0b01111},   {371,0,0b10110},   {372,0,0b10110},   {373,1,0b11011},   {374,0,0b01011},   {375,1,0b10101},   {376,0,0b10000},   {377,0,0b00111},   {378,1,0b11000},   {379,1,0b10001},   {380,0,0b01110},   {381,1,0b10010},   {382,0,0b10000},   {383,0,0b00011},   {384,1,0b10001},   {385,0,0b00111},   {386,0,0b11010},   {387,1,0b11001},   {388,0,0b00100},   {389,1,0b10101},   {390,1,0b01010},   {391,1,0b11010},   {392,1,0b00101},   {393,1,0b00111},   {394,0,0b01111},   {395,0,0b10100},   {396,0,0b10100},   {397,1,0b10011},   {398,1,0b10110},   {399,1,0b00100},   {400,0,0b11100},   {401,1,0b11101},   {402,0,0b00001},   {403,1,0b10110},   {404,1,0b10011},   {405,0,0b10010},   {406,1,0b10111},   {407,0,0b11100},   {408,1,0b11010},   {409,1,0b00111},   {410,1,0b10001},   {411,1,0b10110},   {412,0,0b00011},   {413,1,0b10011},   {414,1,0b00101},   {415,0,0b01111},   {416,1,0b11111},   {417,0,0b00110},   {418,1,0b01100},   {419,1,0b10111},   {420,1,0b10110},   {421,1,0b11111},   {422,1,0b01101},   {424,1,0b01100},   {426,0,0b00010},   {427,1,0b01100},   {429,0,0b00001},   {430,0,0b00011},   {431,1,0b11001},   {432,1,0b10001},   {433,0,0b00001},   {434,1,0b11001},   {435,1,0b11010},   {437,1,0b01011},   {439,0,0b10001},   {440,1,0b11001},   {442,1,0b01001},   {443,1,0b01100},   {444,1,0b11010},   {446,1,0b10101},   {448,0,0b10000},   {449,0,0b01101},   {450,0,0b11000},   {451,1,0b11010},   {452,0,0b01111},   {453,1,0b10011},   {454,1,0b01110},   {455,1,0b01100},   {456,0,0b10111},   {457,1,0b11001},   {458,1,0b10100},   {459,1,0b10100},   {460,0,0b00011},   {461,0,0b01100},   {462,1,0b01011},   {463,1,0b11010},   {464,1,0b10000},   {466,1,0b10100},   {468,1,0b10110},   {469,1,0b01100},   {470,0,0b00101},   {471,0,0b10110},   {472,1,0b11111},   {473,0,0b11001},   {474,1,0b11110},   {476,1,0b01101},   {477,1,0b00101},   {482,1,0b11010},   {484,1,0b01001},   {485,1,0b11100},   {486,1,0b10101},   {488,1,0b10110},   {489,1,0b00011},   {491,0,0b01010},   {492,1,0b01010},   {493,1,0b00001},   {495,0,0b01001},   {496,1,0b11110},   {497,0,0b10001},   {498,1,0b11011},   {499,1,0b01000},   {501,0,0b11001},   {502,1,0b11100},   {503,0,0b00001},   {504,0,0b11010},   {505,0,0b11011},   {506,1,0b11101},   {507,1,0b00111},   {509,1,0b01101},   {510,0,0b01010},   {511,1,0b10011},   {512,0,0b00001},   {513,1,0b01010},   {514,1,0b10011},   {515,0,0b00101},   {516,1,0b11100},   {517,0,0b01010},   {518,1,0b11011},   {519,0,0b10000},   {520,1,0b10101},   {521,1,0b11010},   {522,1,0b10000},   {523,1,0b11111},   {527,0,0b01000},   {528,0,0b01001},   {529,1,0b10100},   {530,0,0b01110},   {531,0,0b01111},   {532,0,0b10011},   {533,0,0b11101},   {534,1,0b11101},   {535,1,0b11010},   {536,1,0b00110},   {537,1,0b11001},   {538,0,0b01100},   {539,0,0b10010},   {540,1,0b10001},   {541,0,0b10110},   {542,1,0b11100},   {543,0,0b01111},   {544,1,0b10010},   {545,0,0b00011},   {546,0,0b00110},   {547,1,0b10001},   {548,1,0b01011},   {549,1,0b01111},   {550,1,0b10101},   {551,1,0b00111},   {552,1,0b10011},   {553,1,0b10110},   {554,0,0b00001},   {555,1,0b00010},   {556,1,0b00011},   {557,1,0b01010},   {558,0,0b01000},   {559,1,0b01100},   {560,0,0b01010},   {561,1,0b01011},   {562,1,0b11010},   {563,1,0b01011},   {564,0,0b11010},   {565,1,0b11111},   {566,0,0b01001},   {567,1,0b10110},   {568,1,0b01111},   {569,1,0b10001},   {570,0,0b01100},   {571,1,0b10110},   {572,1,0b11110},   {573,1,0b10010},   {574,0,0b10000},   {575,0,0b01110},   {576,1,0b11101},   {577,0,0b10001},   {578,1,0b10011},   {579,1,0b10101},   {580,1,0b11011},   {582,1,0b00111},   {583,1,0b00110},   {591,1,0b00010},   {592,1,0b00101},   {597,1,0b11101},   {598,1,0b00100},   {599,1,0b10010},   {602,1,0b11110},   {604,1,0b01100},   {609,1,0b00101},   {611,1,0b10101},   {612,0,0b01001},   {613,1,0b01110},   {614,1,0b10011},   {615,1,0b01000},   {616,0,0b01111},   {617,1,0b11001},   {618,1,0b11011},   {619,1,0b10011},   {620,0,0b00101},   {621,1,0b11110},   {623,1,0b00111},   {624,0,0b10110},   {625,1,0b11101},   {626,1,0b01100},   {627,0,0b00111},   {628,0,0b11100},   {629,1,0b11001},   {630,1,0b11101},   {631,0,0b01010},   {632,0,0b10110},   {633,1,0b11110},   {634,1,0b10011},   {635,1,0b10011},   {636,1,0b01111},   {637,1,0b10111},   {638,0,0b00010},   {639,1,0b01111},   {640,1,0b01001},   {642,0,0b00011},   {643,0,0b00011},   {644,1,0b00111},   {645,1,0b10011},   {646,1,0b01001},   {647,0,0b01000},   {648,0,0b00010},   {649,0,0b00111},   {650,1,0b11000},   {651,1,0b00010},   {652,1,0b10111},   {653,1,0b00011},   {654,0,0b01110},   {655,1,0b10010},   {656,0,0b01101},   {657,1,0b01111},   {658,0,0b01001},   {659,0,0b10001},   {660,0,0b10100},   {661,0,0b10010},   {662,0,0b11010},   {663,1,0b11110},   {664,0,0b10001},   {665,1,0b11101},   {666,0,0b00001},   {667,0,0b01100},   {668,1,0b11000},   {669,1,0b00111},   {670,1,0b00100},   {671,0,0b10000},   {672,0,0b00001},   {673,1,0b01001},   {674,1,0b00101},   {675,0,0b11000},   {676,1,0b10011},   {677,0,0b01110},   {678,1,0b10001},   {679,1,0b01001},   {680,1,0b00011},   {681,1,0b00111},   {682,0,0b00010},   {683,1,0b11100},   {684,1,0b00010},   {685,0,0b01111},   {686,1,0b11010},   {687,1,0b11110},   {688,0,0b00100},   {689,0,0b10010},   {690,1,0b11110},   {691,1,0b11000},   {692,0,0b01100},   {693,0,0b01001},   {694,1,0b11110},   {695,1,0b11001},   {696,0,0b00111},   {697,1,0b01111},   {698,1,0b10001},   {699,1,0b01101},   {700,0,0b00100},   {701,1,0b00110},   {702,0,0b00100},   {703,1,0b01101},   {704,0,0b00001},   {705,0,0b01110},   {706,1,0b01110},   {707,0,0b00010},   {708,1,0b01101},   {709,0,0b00101},   {710,1,0b10100},   {711,1,0b01101},   {712,0,0b00001},   {713,1,0b10010},   {714,1,0b11110},   {715,1,0b00110},   {716,0,0b00001},   {717,0,0b01101},   {718,1,0b10001},   {719,1,0b00111},   {720,1,0b10101},   {721,1,0b01011},   {722,1,0b11111},   {723,0,0b00111},   {724,1,0b11110},   {725,0,0b00001},   {726,1,0b11110},   {727,1,0b10111},   {728,0,0b10111},   {729,1,0b11101},   {730,1,0b01000},   {731,1,0b10000},   {732,1,0b11110},   {733,0,0b01110},   {734,1,0b10010},   {735,0,0b10111},   {736,1,0b10111},   {737,1,0b01010},   {738,1,0b11111},   {739,1,0b11000},   {740,0,0b10110},   {741,1,0b10110},   {742,1,0b01111},   {743,1,0b01010},   {744,0,0b11000},   {745,1,0b11101},   {746,0,0b00101},   {747,1,0b10011},   {748,0,0b10001},   {749,0,0b10001},   {750,1,0b11010},   {751,1,0b10000},   {752,1,0b01001},   {753,0,0b11101},   {754,1,0b11101},   {755,0,0b00110},   {756,1,0b00101},   {757,1,0b01001},   {758,1,0b10000},   {759,1,0b01011},   {760,0,0b00001},   {761,1,0b10011},   {762,1,0b01011},   {763,0,0b01000},   {764,1,0b11010},   {765,1,0b00111},   {766,1,0b11011},   {767,0,0b00001},   {768,1,0b00110},   {769,1,0b10001},   {770,1,0b00001},   {771,1,0b10010},   {772,1,0b00001},   {773,1,0b00111},   {774,1,0b11110},   {775,1,0b01000},   {776,1,0b11000},   {777,1,0b01101},   {778,0,0b00010},   {779,1,0b01010},   {780,1,0b00001},   {781,1,0b01101},   {782,0,0b00011},   {783,1,0b10110},   {784,0,0b00011},   {785,0,0b10101},   {786,1,0b10110},   {787,1,0b01111},   {788,0,0b01111},   {789,1,0b11010},   {790,1,0b10000},   {791,0,0b01110},   {792,1,0b11000},   {793,1,0b10010},   {794,0,0b01110},   {795,1,0b01101},   {796,1,0b01111},   {797,1,0b10000},   {798,0,0b00100},   {799,1,0b01111},   {800,0,0b00110},   {801,1,0b10111},   {802,1,0b11011},   {803,0,0b00010},   {804,1,0b11101},   {805,1,0b01011},   {806,1,0b11000},   {807,1,0b00111},   {808,0,0b00100},   {809,1,0b10101},   {810,0,0b00010},   {811,1,0b01110},   {812,1,0b00101},   {813,0,0b01011},   {814,1,0b11100},   {815,1,0b01000},   {816,0,0b00100},   {817,0,0b10000},   {818,1,0b11001},   {819,0,0b01101},   {820,1,0b11101},   {821,1,0b00100},   {822,1,0b01011},   {823,0,0b01111},   {824,0,0b10111},   {825,0,0b11001},   {826,0,0b11110},   {827,1,0b11101},   {828,1,0b11011},   {829,1,0b00111},   {830,1,0b10100},   {831,1,0b00110},   {832,0,0b01011},   {833,1,0b11110},   {834,1,0b00100},   {835,1,0b10001},   {836,1,0b01101},   {837,0,0b00001},   {838,1,0b11001},   {839,1,0b11001},   {840,1,0b10111},   {841,0,0b00010},   {842,0,0b10010},   {843,0,0b10011},   {844,1,0b11001},   {845,0,0b00010},   {846,1,0b10010},   {847,0,0b00010},   {848,0,0b01110},   {849,1,0b11011},   {850,1,0b00011},   {851,0,0b00110},   {852,0,0b01011},   {853,1,0b11000},   {854,1,0b11001},   {855,0,0b00001},   {856,1,0b01001},   {857,1,0b01100},   {858,0,0b00001},   {859,1,0b01011},   {860,1,0b01010},   {861,0,0b00111},   {862,1,0b01100},   {863,1,0b00010},   {864,1,0b11101},   {865,0,0b00011},   {866,0,0b11100},   {867,0,0b11011},   {868,1,0b11111},   {869,1,0b10010},   {870,0,0b00111},   {871,1,0b11101},   {872,1,0b01010},   {873,0,0b01100},   {874,1,0b10100},   {875,1,0b10111},   {876,1,0b01000},   {877,1,0b00011},   {878,1,0b11011},   {879,1,0b00110},   {880,1,0b10111},   {881,1,0b10011},   {882,0,0b01000},   {883,0,0b10111},   {884,1,0b11011},   {885,1,0b11111},   {886,1,0b10111},   {887,0,0b10011},   {888,1,0b11010},   {889,1,0b00101},   {890,1,0b00001},   {891,1,0b10101},   {892,0,0b01000},   {893,1,0b10101},   {894,1,0b00011},   {895,0,0b00101},   {896,1,0b11101},   {897,0,0b01000},   {898,1,0b10110},   {899,0,0b10100},   {900,1,0b11101},   {901,0,0b00110},   {902,1,0b00111},   {903,0,0b00101},   {904,0,0b11010},   {905,1,0b11110},   {906,0,0b01100},   {907,1,0b10011},   {908,0,0b01100},   {909,1,0b11100},   {910,1,0b11011},   {911,0,0b01111},   {912,1,0b11011},   {913,0,0b00001},   {914,1,0b10100},   {915,1,0b01010},   {916,1,0b01010},   {917,0,0b00010},   {918,1,0b01000},   {919,1,0b10100},   {920,0,0b01011},   {921,0,0b11000},   {922,1,0b11011},   {923,1,0b00011},   {924,0,0b00001},   {925,1,0b00111},   {926,1,0b10100},   {927,0,0b00111},   {928,1,0b10011},   {929,1,0b01011},   {930,0,0b01000},   {931,1,0b10101},   {932,0,0b10100},   {933,1,0b10111},   {934,0,0b11100},   {935,1,0b11111},   {936,1,0b01000},   {937,1,0b11101},   {938,1,0b11001},   {939,0,0b00100},   {940,1,0b10110},   {941,1,0b01000},   {942,0,0b00010},   {943,0,0b01000},   {944,0,0b00101},   {945,0,0b01001},   {946,0,0b10101},   {947,0,0b11011},   {948,1,0b11110},   {949,1,0b11001},   {950,0,0b01001},   {951,0,0b11001},   {952,0,0b11011},   {953,0,0b11101},   {954,1,0b11101},   {955,1,0b11101},   {956,1,0b00010},   {957,1,0b11011},   {958,1,0b11110},   {959,1,0b10001},   {960,1,0b01010},   {961,1,0b00110},   {962,1,0b00101},   {963,0,0b00010},   {964,1,0b11100},   {965,1,0b01100},   {966,0,0b10000},   {967,0,0b00101},   {968,1,0b01110},   {969,0,0b10010},   {970,1,0b11000},   {971,1,0b10110},   {972,0,0b10001},   {973,1,0b10011},   {974,1,0b01110},   {975,1,0b01101},   {976,0,0b00110},   {977,1,0b11100},   {978,1,0b00100},   {979,1,0b00010},   {980,1,0b00101},   {981,1,0b11011},   {982,1,0b11101},   {983,0,0b01000},   {984,1,0b11010},   {985,1,0b00011},   {986,1,0b00101},   {987,1,0b10001},   {988,1,0b00010},   {989,0,0b01010},   {990,1,0b01101},   {991,1,0b10010},   {992,0,0b00101},   {993,1,0b10111},   {994,1,0b10111},   {995,0,0b10000},   {996,0,0b10111},   {997,1,0b11001},   {998,0,0b00110},   {999,1,0b01001},   {1000,0,0b01100},   {1001,1,0b10010},   {1002,1,0b11001},   {1003,1,0b11110},   {1004,0,0b00100},   {1005,0,0b00001},   {1006,0,0b10111},   {1007,1,0b11111},   {1008,1,0b01111},   {1009,1,0b00100},   {1010,1,0b11100},   {1011,1,0b00001},   {1012,1,0b11111},   {1013,0,0b00011},   {1014,1,0b10001},   {1015,1,0b11101},   {1016,1,0b11110},   {1017,1,0b01001},   {1018,1,0b10100},   {1019,1,0b00111},   {1020,1,0b01001},   {1021,1,0b00011},   {1022,1,0b10011},   {1023,1,0b00101},   {1024,0,0b00001},   {1025,0,0b00111},   {1026,1,0b10011},   {1027,0,0b10010},   {1028,1,0b10110},   {1029,1,0b10110},   {1030,1,0b10110},   {1031,0,0b01000},   {1032,0,0b01010},   {1033,1,0b11010},   {1034,1,0b10111},   {1035,1,0b11011},   {1036,0,0b10000},   {1037,1,0b00100},   {1038,1,0b10101},   {1039,0,0b00110},   {1040,1,0b11000},   {1041,1,0b01001},   {1042,1,0b00001},   {1043,1,0b11001},   {1044,0,0b00010},   {1045,0,0b00100},   {1046,1,0b00110},   {1047,0,0b11000},   {1048,1,0b10111},   {1049,0,0b00110},   {1050,0,0b01111},   {1051,1,0b11000},   {1052,1,0b01100},   {1053,1,0b11101},   {1054,1,0b00110},   {1055,1,0b01110},   {1056,1,0b00001},   {1057,0,0b10000},   {1058,1,0b10111},   {1059,0,0b00011},   {1060,1,0b10100},   {1061,1,0b00010},   {1062,1,0b11011},   {1063,0,0b00101},   {1064,0,0b00111},   {1065,1,0b10011},   {1066,1,0b11111},   {1067,0,0b10000},   {1068,1,0b10101},   {1069,0,0b10000},   {1070,0,0b01100},   {1071,0,0b10100},   {1072,0,0b11000},   {1073,0,0b10101},   {1074,0,0b10110},   {1075,1,0b11111},   {1076,1,0b00001}};
            AssertStoreContents(s, store, occupieds_pos, checks);
        }

        s.InsertRawIntoInfixStore(store, 0b010000000010101);
        SUBCASE("lone run with single slot") {
            s.DeleteRawFromInfixStore(store, 0b010000000010101);
            const std::vector<uint32_t> occupieds_pos = {0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 22, 24, 26, 28, 29, 31, 32, 34, 36, 38, 39, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 78, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 127, 131, 135, 136, 138, 143, 144, 145, 147, 148, 152, 153, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 177, 178, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 221, 224, 226, 227, 228, 231, 232, 233, 236, 237, 240, 241, 244, 246, 247, 248, 249, 252, 254, 256, 257, 258, 259, 263, 264, 265, 266, 269, 271, 274, 276, 278, 282, 283, 284, 287, 288, 289, 290, 291, 294, 296, 297, 300, 301, 302, 303, 307, 309, 311, 313, 314, 315, 316, 317, 320, 323, 324, 325, 326, 327, 328, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 366, 370, 372, 373, 374, 376, 379, 380, 381, 385, 386, 388, 391, 394, 396, 397, 403, 405, 408, 410, 412, 413, 416, 418, 420, 421, 422, 424, 426, 427, 430, 431, 432, 433, 434, 437, 438, 440, 443, 445, 446, 447, 450, 453, 454, 458, 460, 461, 462, 464, 465, 467, 468, 471, 472, 474, 476, 478, 481, 484, 485, 486, 487, 488, 489, 491, 493, 494, 497, 501, 503, 505, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 529, 530, 531, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 547, 549, 553, 554, 562, 563, 568, 569, 570, 572, 574, 579, 581, 582, 583, 584, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 600, 601, 602, 604, 606, 607, 610, 612, 613, 616, 617, 620, 621, 624, 625, 626, 627, 630, 631, 632, 634, 637, 639, 640, 642, 643, 644, 646, 649, 652, 653, 655, 656, 657, 659, 662, 664, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 722, 723, 725, 726, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 758, 761, 763, 764, 766, 767, 769, 770, 772, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 798, 801, 804, 805, 806, 808, 811, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 828, 829, 830, 831, 836, 838, 840, 841, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 859, 861, 862, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 891, 893, 894, 895, 898, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 946, 949, 950, 952, 955, 956, 957, 959, 960, 961, 962, 963, 964, 968, 971, 972, 973, 974, 975, 976, 979, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023};
            const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  0,0,0b00010},   {  1,1,0b00001},   {  2,0,0b00010},   {  3,0,0b01010},   {  4,1,0b11101},   {  5,0,0b01101},   {  6,0,0b10010},   {  7,0,0b10110},   {  8,1,0b11101},   {  9,0,0b10100},   { 10,0,0b11000},   { 11,0,0b10110},   { 12,0,0b10101},   { 13,1,0b11111},   { 14,0,0b10101},   { 15,0,0b10111},   { 16,1,0b11001},   { 17,0,0b00001},   { 18,1,0b11000},   { 19,0,0b11011},   { 20,1,0b11011},   { 21,0,0b00001},   { 22,0,0b11011},   { 23,0,0b11101},   { 24,1,0b11111},   { 25,1,0b01101},   { 26,0,0b10100},   { 27,1,0b10110},   { 28,1,0b11101},   { 29,0,0b01000},   { 30,0,0b00001},   { 31,0,0b00011},   { 32,1,0b00111},   { 33,0,0b01111},   { 34,1,0b11001},   { 35,1,0b01001},   { 36,1,0b00010},   { 37,0,0b10101},   { 38,1,0b11111},   { 39,1,0b10010},   { 40,0,0b01000},   { 41,0,0b00111},   { 42,1,0b10011},   { 43,0,0b10001},   { 44,1,0b11001},   { 45,1,0b01001},   { 46,1,0b11110},   { 47,1,0b00010},   { 48,1,0b01101},   { 49,1,0b10000},   { 50,0,0b01000},   { 51,1,0b00110},   { 52,0,0b10000},   { 53,0,0b10100},   { 54,1,0b11011},   { 55,1,0b00010},   { 56,1,0b11000},   { 57,1,0b11111},   { 58,1,0b11111},   { 59,1,0b00111},   { 60,0,0b01011},   { 61,1,0b01110},   { 62,1,0b01010},   { 63,0,0b00100},   { 64,0,0b01100},   { 65,1,0b01101},   { 66,0,0b00010},   { 67,1,0b10001},   { 68,0,0b01101},   { 69,1,0b11001},   { 70,1,0b11000},   { 71,0,0b00011},   { 72,1,0b01010},   { 73,1,0b11111},   { 74,1,0b00010},   { 75,0,0b01000},   { 76,1,0b11001},   { 77,1,0b01100},   { 78,1,0b01100},   { 79,1,0b10110},   { 80,1,0b11011},   { 81,0,0b10100},   { 82,0,0b10001},   { 83,1,0b10101},   { 84,1,0b00011},   { 85,1,0b10001},   { 86,1,0b10110},   { 87,0,0b10100},   { 88,0,0b10101},   { 89,1,0b11100},   { 90,1,0b01000},   { 91,1,0b00101},   { 92,1,0b11111},   { 93,1,0b10110},   { 94,0,0b01100},   { 95,0,0b10010},   { 96,0,0b11100},   { 97,1,0b11110},   { 98,0,0b10000},   { 99,1,0b01010},   {100,1,0b01011},   {101,1,0b10110},   {102,0,0b00010},   {103,1,0b11000},   {104,1,0b01001},   {105,0,0b00010},   {106,0,0b10101},   {107,0,0b11100},   {108,1,0b11110},   {109,1,0b01010},   {110,1,0b11001},   {111,0,0b01100},   {112,1,0b11100},   {113,1,0b01000},   {114,1,0b01101},   {115,1,0b10110},   {116,1,0b10011},   {117,0,0b10011},   {118,1,0b11001},   {119,1,0b10000},   {120,0,0b00001},   {121,0,0b01011},   {122,1,0b11010},   {123,0,0b00100},   {124,0,0b00100},   {125,1,0b10011},   {126,1,0b00011},   {127,0,0b00011},   {128,1,0b00011},   {129,0,0b10101},   {130,1,0b11101},   {131,1,0b01001},   {132,1,0b11110},   {133,1,0b01010},   {134,1,0b00100},   {135,0,0b01001},   {136,1,0b01101},   {137,1,0b00110},   {138,0,0b01111},   {139,1,0b10010},   {140,1,0b11101},   {141,1,0b11111},   {142,0,0b01011},   {143,1,0b11001},   {144,0,0b00110},   {145,0,0b00111},   {146,0,0b10011},   {147,1,0b10101},   {148,1,0b11100},   {149,1,0b00001},   {150,0,0b01010},   {151,1,0b10110},   {152,1,0b10101},   {153,0,0b00100},   {154,1,0b01010},   {155,0,0b00110},   {156,0,0b01100},   {157,1,0b10111},   {158,1,0b11100},   {159,0,0b11011},   {160,1,0b11011},   {161,1,0b00001},   {162,0,0b01010},   {163,1,0b11110},   {164,1,0b11110},   {168,1,0b00110},   {169,1,0b11011},   {171,1,0b11011},   {172,1,0b10001},   {173,1,0b00101},   {176,1,0b00100},   {177,0,0b10110},   {178,1,0b11111},   {179,1,0b10001},   {180,1,0b11111},   {182,0,0b01000},   {183,1,0b01101},   {184,1,0b10101},   {185,0,0b01010},   {186,1,0b10101},   {187,1,0b01010},   {188,0,0b00001},   {189,1,0b01101},   {190,1,0b11110},   {191,0,0b01001},   {192,0,0b01111},   {193,1,0b10111},   {196,1,0b11110},   {197,1,0b00101},   {200,0,0b01110},   {201,0,0b10001},   {202,1,0b10111},   {203,1,0b11100},   {204,1,0b11010},   {205,0,0b10100},   {206,1,0b11110},   {207,0,0b01110},   {208,1,0b11001},   {209,1,0b01100},   {210,1,0b00100},   {211,0,0b01000},   {212,0,0b01011},   {213,1,0b10100},   {214,1,0b11111},   {215,1,0b00111},   {216,1,0b11111},   {217,1,0b10100},   {218,0,0b10011},   {219,1,0b11010},   {220,1,0b10100},   {221,1,0b10101},   {222,0,0b01110},   {223,1,0b11011},   {224,0,0b11011},   {225,1,0b11110},   {226,1,0b10100},   {228,1,0b00101},   {229,0,0b10100},   {230,0,0b10010},   {231,1,0b10101},   {232,0,0b10000},   {233,0,0b01100},   {234,0,0b01010},   {235,1,0b01001},   {236,1,0b10001},   {237,0,0b10000},   {238,1,0b10010},   {239,1,0b11101},   {240,1,0b10011},   {241,1,0b00001},   {242,1,0b11101},   {243,0,0b00111},   {244,1,0b10001},   {245,1,0b11011},   {248,0,0b00001},   {249,0,0b00110},   {250,0,0b01010},   {251,1,0b11100},   {252,0,0b10000},   {253,1,0b11100},   {254,0,0b01001},   {255,1,0b01011},   {256,1,0b11111},   {257,1,0b01101},   {258,1,0b01110},   {259,0,0b10011},   {260,1,0b10101},   {261,0,0b01110},   {262,1,0b10100},   {263,0,0b10000},   {264,0,0b10010},   {265,0,0b10100},   {266,1,0b10011},   {267,0,0b01011},   {268,1,0b10011},   {269,1,0b00101},   {270,1,0b10101},   {272,1,0b10100},   {273,1,0b10001},   {274,1,0b01100},   {275,1,0b11100},   {279,0,0b10000},   {280,1,0b10111},   {281,1,0b10111},   {283,0,0b00010},   {284,1,0b10110},   {285,1,0b00001},   {286,1,0b01111},   {287,0,0b00101},   {288,0,0b01001},   {289,0,0b10001},   {290,1,0b11111},   {291,1,0b10110},   {292,1,0b00011},   {293,0,0b00101},   {294,1,0b10010},   {295,0,0b00001},   {296,0,0b00111},   {297,1,0b00111},   {298,1,0b01100},   {300,0,0b00001},   {301,1,0b11011},   {303,0,0b01000},   {304,0,0b01111},   {305,1,0b10100},   {306,1,0b00001},   {308,0,0b00110},   {309,1,0b11001},   {312,0,0b01011},   {313,1,0b10100},   {314,0,0b01100},   {315,1,0b10100},   {316,0,0b01100},   {317,1,0b11111},   {318,1,0b11011},   {319,0,0b00111},   {320,0,0b01110},   {321,1,0b11101},   {322,0,0b00011},   {323,0,0b01110},   {324,1,0b10011},   {325,1,0b01011},   {326,0,0b01111},   {327,1,0b11011},   {328,0,0b01100},   {329,0,0b01001},   {330,1,0b10011},   {331,1,0b00101},   {332,0,0b01010},   {333,1,0b01100},   {334,0,0b01000},   {335,1,0b01101},   {336,1,0b00101},   {337,0,0b00101},   {338,1,0b01011},   {339,0,0b01001},   {340,1,0b11011},   {341,0,0b10000},   {342,1,0b10101},   {343,0,0b00100},   {344,1,0b01111},   {345,1,0b01001},   {346,0,0b10001},   {347,0,0b11010},   {348,1,0b11011},   {349,1,0b11010},   {350,0,0b01100},   {351,0,0b11000},   {352,1,0b10011},   {353,0,0b01111},   {354,1,0b11110},   {355,0,0b01100},   {356,0,0b10001},   {357,0,0b10011},   {358,0,0b10101},   {359,0,0b11011},   {360,1,0b11111},   {361,0,0b00111},   {362,1,0b01100},   {363,1,0b01001},   {364,0,0b10111},   {365,1,0b11011},   {366,1,0b01111},   {367,1,0b00101},   {368,0,0b00011},   {369,0,0b01001},   {370,1,0b11001},   {371,0,0b00001},   {372,1,0b01100},   {373,1,0b10000},   {374,1,0b11101},   {375,1,0b00001},   {376,0,0b01010},   {377,0,0b10011},   {378,1,0b11101},   {379,0,0b10100},   {380,1,0b11011},   {381,1,0b10110},   {382,1,0b01101},   {383,1,0b10010},   {384,1,0b01110},   {385,1,0b00110},   {386,0,0b01111},   {387,0,0b10110},   {388,0,0b10110},   {389,1,0b11011},   {390,0,0b01011},   {391,1,0b10101},   {392,0,0b10000},   {393,0,0b00111},   {394,1,0b11000},   {395,1,0b10001},   {396,0,0b01110},   {397,1,0b10010},   {398,0,0b10000},   {399,0,0b00011},   {400,1,0b10001},   {401,0,0b00111},   {402,0,0b11010},   {403,1,0b11001},   {404,0,0b00100},   {405,1,0b10101},   {406,1,0b01010},   {407,1,0b11010},   {408,1,0b00101},   {409,1,0b00111},   {410,0,0b01111},   {411,0,0b10100},   {412,0,0b10100},   {413,1,0b10011},   {414,1,0b10110},   {415,1,0b00100},   {416,0,0b11100},   {417,1,0b11101},   {418,0,0b00001},   {419,1,0b10110},   {420,1,0b10011},   {421,0,0b10010},   {422,1,0b10111},   {423,0,0b11100},   {424,1,0b11010},   {425,1,0b00111},   {426,1,0b10001},   {427,1,0b10110},   {428,0,0b00011},   {429,1,0b10011},   {430,1,0b00101},   {431,0,0b01111},   {432,1,0b11111},   {433,0,0b00110},   {434,1,0b01100},   {435,1,0b10111},   {436,1,0b10110},   {438,1,0b11111},   {439,1,0b01101},   {446,1,0b01100},   {448,0,0b00010},   {449,1,0b01100},   {452,0,0b00001},   {453,0,0b00011},   {454,1,0b11001},   {455,1,0b10001},   {456,0,0b00001},   {457,1,0b11001},   {458,1,0b11010},   {460,1,0b01011},   {463,0,0b10001},   {464,1,0b11001},   {465,1,0b01001},   {466,1,0b01100},   {467,1,0b11010},   {469,1,0b10101},   {472,0,0b10000},   {473,0,0b01101},   {474,0,0b11000},   {475,1,0b11010},   {476,0,0b01111},   {477,1,0b10011},   {478,1,0b01110},   {479,1,0b01100},   {480,0,0b10111},   {481,1,0b11001},   {482,1,0b10100},   {483,1,0b10100},   {484,0,0b00011},   {485,0,0b01100},   {486,1,0b01011},   {487,1,0b11010},   {488,1,0b10000},   {490,1,0b10100},   {493,1,0b10110},   {494,1,0b01100},   {495,0,0b00101},   {496,0,0b10110},   {497,1,0b11111},   {498,0,0b11001},   {499,1,0b11110},   {501,1,0b01101},   {503,1,0b00101},   {507,1,0b11010},   {509,1,0b01001},   {510,1,0b11100},   {511,1,0b10101},   {514,1,0b10110},   {515,1,0b00011},   {517,0,0b01010},   {518,1,0b01010},   {519,1,0b00001},   {521,0,0b01001},   {522,1,0b11110},   {523,0,0b10001},   {524,1,0b11011},   {525,1,0b01000},   {527,0,0b11001},   {528,1,0b11100},   {529,0,0b00001},   {530,0,0b11010},   {531,0,0b11011},   {532,1,0b11101},   {533,1,0b00111},   {536,1,0b01101},   {537,0,0b01010},   {538,1,0b10011},   {539,0,0b00001},   {540,1,0b01010},   {541,1,0b10011},   {542,0,0b00101},   {543,1,0b11100},   {544,0,0b01010},   {545,1,0b11011},   {546,0,0b10000},   {547,1,0b10101},   {548,1,0b11010},   {549,1,0b10000},   {550,1,0b11111},   {555,0,0b01000},   {556,0,0b01001},   {557,1,0b10100},   {558,0,0b01110},   {559,0,0b01111},   {560,0,0b10011},   {561,0,0b11101},   {562,1,0b11101},   {563,1,0b11010},   {564,1,0b00110},   {565,1,0b11001},   {567,0,0b01100},   {568,0,0b10010},   {569,1,0b10001},   {570,0,0b10110},   {571,1,0b11100},   {572,0,0b01111},   {573,1,0b10010},   {574,0,0b00011},   {575,0,0b00110},   {576,1,0b10001},   {577,1,0b01011},   {578,1,0b01111},   {579,1,0b10101},   {580,1,0b00111},   {581,1,0b10011},   {582,1,0b10110},   {583,0,0b00001},   {584,1,0b00010},   {585,1,0b00011},   {586,1,0b01010},   {587,0,0b01000},   {588,1,0b01100},   {589,0,0b01010},   {590,1,0b01011},   {591,1,0b11010},   {592,1,0b01011},   {593,0,0b11010},   {594,1,0b11111},   {595,0,0b01001},   {596,1,0b10110},   {597,1,0b01111},   {598,1,0b10001},   {599,0,0b01100},   {600,1,0b10110},   {601,1,0b11110},   {602,1,0b10010},   {603,0,0b10000},   {604,0,0b01110},   {605,1,0b11101},   {606,0,0b10001},   {607,1,0b10011},   {608,1,0b10101},   {609,1,0b11011},   {612,1,0b00111},   {613,1,0b00110},   {622,1,0b00010},   {623,1,0b00101},   {629,1,0b11101},   {630,1,0b00100},   {631,1,0b10010},   {633,1,0b11110},   {636,1,0b01100},   {641,1,0b00101},   {643,1,0b10101},   {644,0,0b01001},   {645,1,0b01110},   {646,1,0b10011},   {647,1,0b01000},   {649,0,0b01111},   {650,1,0b11001},   {651,1,0b11011},   {652,1,0b10011},   {653,0,0b00101},   {654,1,0b11110},   {655,1,0b00111},   {657,0,0b10110},   {658,1,0b11101},   {659,1,0b01100},   {660,0,0b00111},   {661,0,0b11100},   {662,1,0b11001},   {663,1,0b11101},   {664,0,0b01010},   {665,0,0b10110},   {666,1,0b11110},   {667,1,0b10011},   {668,1,0b10011},   {669,1,0b01111},   {670,1,0b10111},   {671,0,0b00010},   {672,1,0b01111},   {673,1,0b01001},   {675,0,0b00011},   {676,0,0b00011},   {677,1,0b00111},   {678,1,0b10011},   {679,1,0b01001},   {682,0,0b01000},   {683,0,0b00010},   {684,0,0b00111},   {685,1,0b11000},   {686,1,0b00010},   {687,1,0b10111},   {688,1,0b00011},   {691,0,0b01110},   {692,1,0b10010},   {693,0,0b01101},   {694,1,0b01111},   {695,0,0b01001},   {696,0,0b10001},   {697,0,0b10100},   {698,0,0b10010},   {699,0,0b11010},   {700,1,0b11110},   {701,0,0b10001},   {702,1,0b11101},   {703,0,0b00001},   {704,0,0b01100},   {705,1,0b11000},   {706,1,0b00111},   {707,1,0b00100},   {708,0,0b10000},   {709,0,0b00001},   {710,1,0b01001},   {711,1,0b00101},   {712,0,0b11000},   {713,1,0b10011},   {714,0,0b01110},   {715,1,0b10001},   {716,1,0b01001},   {717,1,0b00011},   {718,1,0b00111},   {719,0,0b00010},   {720,1,0b11100},   {721,1,0b00010},   {722,0,0b01111},   {723,1,0b11010},   {724,1,0b11110},   {725,0,0b00100},   {726,0,0b10010},   {727,1,0b11110},   {728,1,0b11000},   {729,0,0b01100},   {730,0,0b01001},   {731,1,0b11110},   {732,1,0b11001},   {733,0,0b00111},   {734,1,0b01111},   {735,1,0b10001},   {741,1,0b01101},   {742,0,0b00100},   {743,1,0b00110},   {744,0,0b00100},   {745,1,0b01101},   {746,0,0b00001},   {747,0,0b01110},   {748,1,0b01110},   {749,0,0b00010},   {750,1,0b01101},   {751,0,0b00101},   {752,1,0b10100},   {753,1,0b01101},   {754,0,0b00001},   {755,1,0b10010},   {756,1,0b11110},   {757,1,0b00110},   {758,0,0b00001},   {759,0,0b01101},   {760,1,0b10001},   {761,1,0b00111},   {762,1,0b10101},   {763,1,0b01011},   {764,1,0b11111},   {765,0,0b00111},   {766,1,0b11110},   {767,0,0b00001},   {768,1,0b11110},   {769,1,0b10111},   {770,0,0b10111},   {771,1,0b11101},   {772,1,0b01000},   {773,1,0b10000},   {774,1,0b11110},   {775,0,0b01110},   {776,1,0b10010},   {777,0,0b10111},   {778,1,0b10111},   {779,1,0b01010},   {780,1,0b11111},   {781,1,0b11000},   {782,0,0b10110},   {783,1,0b10110},   {784,1,0b01111},   {785,1,0b01010},   {786,0,0b11000},   {787,1,0b11101},   {788,0,0b00101},   {789,1,0b10011},   {790,0,0b10001},   {791,0,0b10001},   {792,1,0b11010},   {793,1,0b10000},   {794,1,0b01001},   {795,0,0b11101},   {796,1,0b11101},   {797,0,0b00110},   {798,1,0b00101},   {799,1,0b01001},   {800,1,0b10000},   {801,1,0b01011},   {802,0,0b00001},   {803,1,0b10011},   {804,1,0b01011},   {805,0,0b01000},   {806,1,0b11010},   {807,1,0b00111},   {808,1,0b11011},   {809,0,0b00001},   {810,1,0b00110},   {811,1,0b10001},   {812,1,0b00001},   {813,1,0b10010},   {814,1,0b00001},   {815,1,0b00111},   {816,1,0b11110},   {817,1,0b01000},   {818,1,0b11000},   {819,1,0b01101},   {821,0,0b00010},   {822,1,0b01010},   {823,1,0b00001},   {824,1,0b01101},   {825,0,0b00011},   {826,1,0b10110},   {827,0,0b00011},   {828,0,0b10101},   {829,1,0b10110},   {830,1,0b01111},   {831,0,0b01111},   {832,1,0b11010},   {833,1,0b10000},   {834,0,0b01110},   {835,1,0b11000},   {836,1,0b10010},   {837,0,0b01110},   {838,1,0b01101},   {839,1,0b01111},   {840,1,0b10000},   {843,0,0b00100},   {844,1,0b01111},   {845,0,0b00110},   {846,1,0b10111},   {847,1,0b11011},   {848,0,0b00010},   {849,1,0b11101},   {850,1,0b01011},   {852,1,0b11000},   {853,1,0b00111},   {855,0,0b00100},   {856,1,0b10101},   {857,0,0b00010},   {858,1,0b01110},   {859,1,0b00101},   {860,0,0b01011},   {861,1,0b11100},   {862,1,0b01000},   {865,0,0b00100},   {866,0,0b10000},   {867,1,0b11001},   {868,0,0b01101},   {869,1,0b11101},   {870,1,0b00100},   {871,1,0b01011},   {872,0,0b01111},   {873,0,0b10111},   {874,0,0b11001},   {875,0,0b11110},   {876,1,0b11101},   {877,1,0b11011},   {878,1,0b00111},   {879,1,0b10100},   {880,1,0b00110},   {881,0,0b01011},   {882,1,0b11110},   {883,1,0b00100},   {884,1,0b10001},   {885,1,0b01101},   {886,0,0b00001},   {887,1,0b11001},   {888,1,0b11001},   {890,1,0b10111},   {891,0,0b00010},   {892,0,0b10010},   {893,0,0b10011},   {894,1,0b11001},   {895,0,0b00010},   {896,1,0b10010},   {897,0,0b00010},   {898,0,0b01110},   {899,1,0b11011},   {900,1,0b00011},   {901,0,0b00110},   {902,0,0b01011},   {903,1,0b11000},   {904,1,0b11001},   {905,0,0b00001},   {906,1,0b01001},   {907,1,0b01100},   {908,0,0b00001},   {909,1,0b01011},   {910,1,0b01010},   {911,0,0b00111},   {912,1,0b01100},   {913,1,0b00010},   {914,1,0b11101},   {915,0,0b00011},   {916,0,0b11100},   {917,0,0b11011},   {918,1,0b11111},   {919,1,0b10010},   {920,0,0b00111},   {921,1,0b11101},   {922,1,0b01010},   {923,0,0b01100},   {924,1,0b10100},   {926,1,0b10111},   {928,1,0b01000},   {930,1,0b00011},   {931,1,0b11011},   {934,1,0b00110},   {935,1,0b10111},   {936,1,0b10011},   {937,0,0b01000},   {938,0,0b10111},   {939,1,0b11011},   {940,1,0b11111},   {941,1,0b10111},   {942,0,0b10011},   {943,1,0b11010},   {944,1,0b00101},   {945,1,0b00001},   {947,1,0b10101},   {948,0,0b01000},   {949,1,0b10101},   {950,1,0b00011},   {951,0,0b00101},   {952,1,0b11101},   {953,0,0b01000},   {954,1,0b10110},   {955,0,0b10100},   {956,1,0b11101},   {957,0,0b00110},   {958,1,0b00111},   {959,0,0b00101},   {960,0,0b11010},   {961,1,0b11110},   {962,0,0b01100},   {963,1,0b10011},   {964,0,0b01100},   {965,1,0b11100},   {966,1,0b11011},   {967,0,0b01111},   {968,1,0b11011},   {969,0,0b00001},   {970,1,0b10100},   {971,1,0b01010},   {972,1,0b01010},   {973,0,0b00010},   {974,1,0b01000},   {975,1,0b10100},   {976,0,0b01011},   {977,0,0b11000},   {978,1,0b11011},   {979,1,0b00011},   {980,0,0b00001},   {981,1,0b00111},   {982,1,0b10100},   {983,0,0b00111},   {984,1,0b10011},   {985,1,0b01011},   {986,0,0b01000},   {987,1,0b10101},   {988,0,0b10100},   {989,1,0b10111},   {990,0,0b11100},   {991,1,0b11111},   {992,1,0b01000},   {993,1,0b11101},   {994,1,0b11001},   {995,0,0b00100},   {996,1,0b10110},   {997,1,0b01000},   {998,0,0b00010},   {999,0,0b01000},   {1000,0,0b00101},   {1001,0,0b01001},   {1002,0,0b10101},   {1003,0,0b11011},   {1004,1,0b11110},   {1005,1,0b11001},   {1006,0,0b01001},   {1007,0,0b11001},   {1008,0,0b11011},   {1009,0,0b11101},   {1010,1,0b11101},   {1011,1,0b11101},   {1012,1,0b00010},   {1013,1,0b11011},   {1014,1,0b11110},   {1015,1,0b10001},   {1016,1,0b01010},   {1017,1,0b00110},   {1018,1,0b00101},   {1019,0,0b00010},   {1020,1,0b11100},   {1021,1,0b01100},   {1022,0,0b10000},   {1023,0,0b00101},   {1024,1,0b01110},   {1025,0,0b10010},   {1026,1,0b11000},   {1027,1,0b10110},   {1028,0,0b10001},   {1029,1,0b10011},   {1030,1,0b01110},   {1031,1,0b01101},   {1032,0,0b00110},   {1033,1,0b11100},   {1034,1,0b00100},   {1035,1,0b00010},   {1036,1,0b00101},   {1037,1,0b11011},   {1038,1,0b11101},   {1039,0,0b01000},   {1040,1,0b11010},   {1041,1,0b00011},   {1042,1,0b00101},   {1043,1,0b10001},   {1044,1,0b00010},   {1045,0,0b01010},   {1046,1,0b01101},   {1047,1,0b10010},   {1048,0,0b00101},   {1049,1,0b10111},   {1050,1,0b10111},   {1051,0,0b10000},   {1052,0,0b10111},   {1053,1,0b11001},   {1054,0,0b00110},   {1055,1,0b01001},   {1056,0,0b01100},   {1057,1,0b10010},   {1058,1,0b11001},   {1059,1,0b11110},   {1060,0,0b00100},   {1061,0,0b00001},   {1062,0,0b10111},   {1063,1,0b11111},   {1064,1,0b01111},   {1065,1,0b00100},   {1066,1,0b11100},   {1067,1,0b00001},   {1068,1,0b11111},   {1069,0,0b00011},   {1070,1,0b10001},   {1071,1,0b11101},   {1072,1,0b11110},   {1073,1,0b01001},   {1074,1,0b10100},   {1075,1,0b00111},   {1076,1,0b01001},   {1077,1,0b00011},   {1078,1,0b10011},   {1079,1,0b00101},   {1080,0,0b00001},   {1081,0,0b00111},   {1082,1,0b10011},   {1083,0,0b10010},   {1084,1,0b10110},   {1085,1,0b10110},   {1086,1,0b10110},   {1087,0,0b01000},   {1088,0,0b01010},   {1089,1,0b11010},   {1090,1,0b10111},   {1091,1,0b11011},   {1092,0,0b10000},   {1093,1,0b00100},   {1094,1,0b10101},   {1095,0,0b00110},   {1096,1,0b11000},   {1097,1,0b01001},   {1098,1,0b00001},   {1099,1,0b11001},   {1100,0,0b00010},   {1101,0,0b00100},   {1102,1,0b00110},   {1103,0,0b11000},   {1104,1,0b10111},   {1105,0,0b00110},   {1106,0,0b01111},   {1107,1,0b11000},   {1108,1,0b01100},   {1109,1,0b11101},   {1110,1,0b00110},   {1111,1,0b01110},   {1112,1,0b00001},   {1113,0,0b10000},   {1114,1,0b10111},   {1115,0,0b00011},   {1116,1,0b10100},   {1117,1,0b00010},   {1118,1,0b11011},   {1119,0,0b00101},   {1120,0,0b00111},   {1121,1,0b10011},   {1122,1,0b11111},   {1123,0,0b10000},   {1124,1,0b10101},   {1125,0,0b10000},   {1126,0,0b01100},   {1127,0,0b10100},   {1128,0,0b11000},   {1129,0,0b10101},   {1130,0,0b10110},   {1131,1,0b11111},   {1132,0,0b00001},   {1133,1,0b00011}};
            AssertStoreContents(s, store, occupieds_pos, checks);
        }
    }


    static void GetLongestMatchingInfixSize() {
        const uint32_t infix_size = 5;
        const uint32_t seed = 1;
        const float load_factor = 0.95;
        Diva<false> s(infix_size, seed, load_factor);
        Diva<false>::InfixStore store(s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep], s.infix_size_);

        const std::vector<uint64_t> keys {0b000000010011000, 0b000000010010100,
            0b000000010010110, 0b000000010010101, 0b000000010011111,
            0b000000010110101, 0b000000010110111, 0b000000010111001,
            0b000000011111011, 0b000000100011011, 0b000000100011111,
            0b000000111100001, 0b000000111100011, 0b000000111100111, 0b000100111110000, 0b000100111110010, 0b000100111110011,
            0b111111010000001, 0b111111101100101, 0b111111101100111,
            0b111111110011111, 0b111111110110101, 0b111111111011000,
            0b111111111010100, 0b111111111010110, 0b111111111010101,
            0b111111111011111, 0b111111111100001, 0b111111111100011};
        s.LoadListToInfixStore(store, keys.data(), keys.size());

        REQUIRE_EQ(s.GetLongestMatchingInfixSize(store, 0b000100111110011), infix_size);
        REQUIRE_EQ(s.GetLongestMatchingInfixSize(store, 0b000100111110001), infix_size - 1);
        REQUIRE_EQ(s.GetLongestMatchingInfixSize(store, 0b000100111100001), infix_size - 4);
        REQUIRE_EQ(s.GetLongestMatchingInfixSize(store, 0b111111111111111), 0);
    }

    static void GetInfixList() {
        const uint32_t infix_size = 5;
        const uint32_t seed = 1;
        const float load_factor = 0.95;
        Diva<false> s(infix_size, seed, load_factor);
        Diva<false>::InfixStore store(s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep], s.infix_size_);

        const std::vector<uint64_t> keys {0b000000000000001, 0b000000000000101,
            0b000000000010101, 0b000000000100001, 0b000000000100011,
            0b000000000100101, 0b001000000100001, 0b001000000100011,
            0b001000000100101, 0b001000000100110, 0b001000000100110,
            0b001000000100110, 0b001000001100001, 0b001000001100011,
            0b001000001100101, 0b001111111000001, 0b001111111000010,
            0b001111111000010, 0b001111111100001, 0b001111111100010,
            0b001111111100010};
        for (uint64_t key : keys)
            s.InsertRawIntoInfixStore(store, key);
        uint64_t res[keys.size() + 1];
        const uint32_t len = s.GetInfixList(store, res);
        REQUIRE_EQ(len, keys.size());
        for (int32_t i = 0; i < keys.size(); i++)
            REQUIRE_EQ(res[i], keys[i]);
    }

    static void LoadInfixList() {
        const uint32_t infix_size = 5;
        const uint32_t seed = 1;
        const float load_factor = 0.95;
        Diva<false> s(infix_size, seed, load_factor);
        Diva<false>::InfixStore store(s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep], s.infix_size_);

        SUBCASE("fetch") {
            const std::vector<uint64_t> keys {0b0000000000000001, 0b0000000000000101,
                0b0000000000010101, 0b0000000000100001, 0b0000000000100011,
                0b0000000000100101, 0b0001000000100001, 0b0001000000100011,
                0b0001000000100101, 0b0001000000100110, 0b0001000000100110,
                0b0001000000100110, 0b0001000001100001, 0b0001000001100011,
                0b0001000001100101, 0b0001111111000001, 0b0001111111000010,
                0b0001111111000010, 0b0001111111100001, 0b0001111111100010,
                0b0001111111100010, 0b0111111111000001, 0b0111111111000010,
                0b0111111111000010, 0b0111111111100001, 0b0111111111100010,
                0b0111111111100010};
            s.LoadListToInfixStore(store, keys.data(), keys.size());
            uint64_t res[keys.size() + 1];
            const uint32_t len = s.GetInfixList(store, res);
            REQUIRE_EQ(len, keys.size());
            for (int32_t i = 0; i < keys.size(); i++)
                REQUIRE_EQ(res[i], keys[i]);
        }

        SUBCASE("vs. insert one by one") {
            const uint32_t n_keys = Diva<false>::infix_store_target_size;
            const uint32_t rng_seed = 1;
            std::mt19937_64 rng(rng_seed);
            std::vector<uint64_t> keys;
            for (int32_t i = 0; i < n_keys; i++)
                keys.push_back((rng() & BITMASK(Diva<false>::base_implicit_size + infix_size)) | 1ULL);
            auto comp = [](uint64_t a, uint64_t b) {
                            const uint64_t a_lb = a & (-a), b_lb = b & (-b);
                            const uint64_t a_nolb = a - a_lb;
                            const uint64_t b_nolb = b - b_lb;
                            return a_nolb < b_nolb || (a_nolb == b_nolb && a_lb > b_lb);
                        };
            std::sort(keys.begin(), keys.end(), comp);
            s.LoadListToInfixStore(store, keys.data(), keys.size());

            const std::vector<uint32_t> occupieds_pos = {0, 1, 3, 7, 8, 10, 11, 13, 15, 16, 20, 21, 24, 25, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 43, 45, 46, 47, 51, 52, 54, 57, 59, 60, 61, 63, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 82, 84, 85, 88, 90, 91, 92, 93, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 114, 115, 116, 117, 121, 122, 123, 124, 126, 127, 129, 130, 132, 134, 135, 136, 137, 138, 140, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 187, 189, 190, 191, 195, 196, 199, 200, 201, 202, 203, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 225, 226, 228, 229, 231, 232, 234, 235, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 257, 259, 261, 262, 263, 264, 265, 270, 271, 275, 276, 278, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 296, 297, 300, 301, 302, 305, 306, 308, 310, 311, 312, 314, 315, 317, 318, 319, 321, 324, 327, 328, 329, 333, 334, 335, 338, 339, 341, 342, 344, 346, 348, 349, 355, 356, 359, 360, 363, 364, 366, 367, 368, 369, 371, 372, 378, 379, 380, 382, 385, 387, 388, 391, 393, 394, 395, 396, 397, 399, 401, 402, 403, 404, 405, 407, 408, 410, 411, 413, 416, 417, 419, 423, 425, 426, 427, 433, 435, 436, 440, 441, 442, 444, 447, 450, 451, 452, 454, 455, 462, 463, 466, 467, 468, 469, 470, 475, 476, 477, 478, 479, 480, 482, 484, 485, 486, 488, 490, 492, 493, 494, 496, 497, 498, 499, 502, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 536, 538, 542, 543, 544, 545, 547, 548, 549, 551, 552, 554, 555, 556, 558, 559, 561, 562, 563, 564, 565, 566, 567, 570, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 620, 621, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 638, 640, 641, 642, 644, 646, 648, 649, 650, 652, 653, 656, 657, 658, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 675, 677, 678, 681, 683, 685, 686, 687, 689, 690, 693, 695, 697, 700, 701, 702, 703, 705, 706, 710, 712, 715, 716, 720, 722, 723, 725, 726, 727, 729, 730, 731, 733, 734, 735, 736, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 759, 760, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 778, 782, 783, 784, 787, 788, 789, 790, 794, 795, 797, 798, 801, 805, 807, 808, 810, 811, 812, 813, 815, 816, 818, 819, 822, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 866, 867, 868, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 888, 890, 891, 893, 894, 897, 898, 902, 904, 905, 906, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 931, 932, 933, 934, 935, 936, 938, 942, 943, 944, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 959, 961, 964, 965, 966, 967, 968, 969, 971, 974, 975, 977, 978, 979, 980, 981, 983, 984, 986, 987, 988, 989, 992, 993, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1021, 1022, 1023};
            const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  0,0,0b00001},   {  1,0,0b00011},   {  2,0,0b01001},   {  3,1,0b10001},   {  4,0,0b00011},   {  5,0,0b10101},   {  6,1,0b11111},   {  7,1,0b11001},   {  8,1,0b11111},   {  9,0,0b10001},   { 10,1,0b11001},   { 11,1,0b11101},   { 12,0,0b00101},   { 13,0,0b10011},   { 14,0,0b10111},   { 15,1,0b11111},   { 16,1,0b01011},   { 17,1,0b01011},   { 18,1,0b01111},   { 21,1,0b11111},   { 22,0,0b00001},   { 23,0,0b10001},   { 24,0,0b10011},   { 25,1,0b11001},   { 26,1,0b10011},   { 27,1,0b00101},   { 29,1,0b11101},   { 30,0,0b00111},   { 31,1,0b01101},   { 32,1,0b11101},   { 33,1,0b00101},   { 34,0,0b10111},   { 35,1,0b11001},   { 36,1,0b01111},   { 37,1,0b10101},   { 38,1,0b00001},   { 39,1,0b10111},   { 41,1,0b10001},   { 42,1,0b10111},   { 43,1,0b01101},   { 45,0,0b00001},   { 46,0,0b00111},   { 47,0,0b00111},   { 48,1,0b10011},   { 49,1,0b11001},   { 50,0,0b00001},   { 51,1,0b11101},   { 52,1,0b01101},   { 53,1,0b00111},   { 54,0,0b00111},   { 55,0,0b10001},   { 56,0,0b10101},   { 57,1,0b11011},   { 58,1,0b11011},   { 59,1,0b11111},   { 62,1,0b00011},   { 63,0,0b10001},   { 64,1,0b11001},   { 65,0,0b01111},   { 66,1,0b10001},   { 67,1,0b01101},   { 71,1,0b10111},   { 72,0,0b00011},   { 73,0,0b00111},   { 74,0,0b01101},   { 75,0,0b10001},   { 76,0,0b10101},   { 77,1,0b11011},   { 78,1,0b10011},   { 79,0,0b00001},   { 80,1,0b10111},   { 81,1,0b10111},   { 82,1,0b01111},   { 83,0,0b00101},   { 84,0,0b01001},   { 85,0,0b01001},   { 86,1,0b11001},   { 87,1,0b01011},   { 88,1,0b10101},   { 89,0,0b01001},   { 90,0,0b01011},   { 91,1,0b11011},   { 92,0,0b11011},   { 93,1,0b11011},   { 94,1,0b11111},   { 95,1,0b10111},   { 96,0,0b01001},   { 97,1,0b01011},   { 98,1,0b01111},   { 99,0,0b00011},   {100,1,0b10011},   {101,0,0b01111},   {102,1,0b11101},   {103,1,0b01111},   {104,0,0b01011},   {105,0,0b10101},   {106,1,0b10111},   {107,1,0b00011},   {108,0,0b00111},   {109,0,0b00111},   {110,1,0b11111},   {111,1,0b01111},   {112,1,0b11101},   {113,0,0b10011},   {114,1,0b10101},   {115,1,0b01111},   {116,1,0b11011},   {117,1,0b00101},   {118,0,0b00111},   {119,0,0b01001},   {120,1,0b11001},   {121,1,0b10001},   {122,1,0b00001},   {123,0,0b01011},   {124,0,0b01111},   {125,1,0b10011},   {126,0,0b01011},   {127,1,0b10111},   {128,0,0b01101},   {129,1,0b01111},   {130,1,0b10111},   {131,1,0b10011},   {132,0,0b00111},   {133,1,0b10011},   {134,1,0b10011},   {135,1,0b10001},   {136,1,0b01101},   {137,1,0b00001},   {138,0,0b01001},   {139,1,0b11101},   {140,0,0b00101},   {141,0,0b11101},   {142,1,0b11111},   {143,1,0b10101},   {144,0,0b01111},   {145,1,0b01111},   {146,0,0b01111},   {147,1,0b11001},   {148,1,0b00111},   {149,0,0b01011},   {150,1,0b11001},   {151,1,0b01001},   {152,1,0b00101},   {153,1,0b01101},   {154,1,0b11101},   {155,1,0b01001},   {156,0,0b00011},   {157,0,0b01001},   {158,0,0b01111},   {159,0,0b10111},   {160,0,0b10111},   {161,1,0b11011},   {162,1,0b01011},   {163,1,0b00011},   {164,1,0b11101},   {165,1,0b11111},   {166,0,0b11011},   {167,0,0b11111},   {168,1,0b11111},   {169,0,0b00001},   {170,1,0b11101},   {171,1,0b10011},   {172,1,0b10101},   {173,1,0b10011},   {174,1,0b00101},   {175,1,0b01001},   {176,1,0b00101},   {177,1,0b01001},   {178,0,0b00001},   {179,1,0b01111},   {180,0,0b01001},   {181,1,0b10101},   {182,1,0b10111},   {183,1,0b01101},   {184,1,0b11011},   {185,1,0b10111},   {186,1,0b11011},   {187,1,0b00001},   {188,0,0b11011},   {189,1,0b11101},   {190,1,0b01011},   {191,1,0b01011},   {192,1,0b11101},   {193,0,0b00111},   {194,0,0b01101},   {195,1,0b10011},   {196,0,0b00101},   {197,1,0b01101},   {198,0,0b11011},   {199,1,0b11111},   {200,1,0b10011},   {201,1,0b00111},   {202,1,0b10001},   {203,0,0b01011},   {204,1,0b11011},   {205,1,0b10111},   {206,1,0b01101},   {207,0,0b00001},   {208,1,0b00011},   {209,1,0b01101},   {210,0,0b00001},   {211,1,0b00011},   {212,1,0b10001},   {213,1,0b10001},   {214,0,0b00011},   {215,0,0b01111},   {216,1,0b11001},   {217,0,0b10011},   {218,1,0b11001},   {219,1,0b10111},   {220,1,0b11111},   {221,0,0b01011},   {222,0,0b01111},   {223,1,0b10001},   {224,1,0b01101},   {225,1,0b01111},   {226,0,0b11001},   {227,1,0b11111},   {228,1,0b00001},   {229,0,0b00001},   {230,0,0b10001},   {231,0,0b10011},   {232,0,0b10111},   {233,1,0b11101},   {234,1,0b10001},   {235,1,0b01101},   {236,1,0b00001},   {237,1,0b01011},   {238,1,0b01011},   {239,1,0b00011},   {240,0,0b10011},   {241,0,0b10111},   {242,1,0b11011},   {243,1,0b10001},   {244,0,0b00001},   {245,1,0b11011},   {246,1,0b00101},   {247,0,0b00111},   {248,1,0b10001},   {249,0,0b00011},   {250,1,0b11111},   {251,0,0b00111},   {252,1,0b11011},   {253,0,0b11001},   {254,1,0b11001},   {255,1,0b10101},   {256,1,0b11111},   {257,0,0b00011},   {258,0,0b01001},   {259,1,0b10101},   {260,1,0b00111},   {261,1,0b11101},   {262,1,0b00101},   {263,1,0b00111},   {264,1,0b11111},   {265,1,0b10101},   {266,0,0b00011},   {267,1,0b11011},   {268,1,0b10001},   {269,1,0b11101},   {270,0,0b00101},   {271,1,0b11001},   {272,0,0b01011},   {273,1,0b10111},   {274,1,0b01001},   {275,1,0b01011},   {276,1,0b11001},   {277,1,0b01111},   {278,1,0b01101},   {279,0,0b10101},   {280,1,0b11011},   {281,1,0b01001},   {284,1,0b01011},   {285,0,0b01101},   {286,1,0b11101},   {289,1,0b01011},   {290,1,0b11011},   {292,0,0b11111},   {293,1,0b11111},   {295,1,0b01101},   {296,0,0b01111},   {297,0,0b10101},   {298,1,0b11111},   {299,1,0b00101},   {300,1,0b10111},   {302,1,0b00001},   {304,1,0b11011},   {305,1,0b00001},   {306,0,0b00011},   {307,1,0b01011},   {308,1,0b11011},   {309,1,0b01001},   {310,0,0b10011},   {311,1,0b11111},   {312,0,0b00001},   {313,1,0b10011},   {314,1,0b10111},   {315,1,0b00001},   {316,0,0b10101},   {317,0,0b11101},   {318,1,0b11101},   {319,0,0b01011},   {320,1,0b10011},   {321,1,0b10111},   {322,0,0b00111},   {323,1,0b11101},   {324,1,0b10011},   {326,1,0b11011},   {327,1,0b10111},   {328,0,0b01111},   {329,1,0b10101},   {330,1,0b11111},   {331,1,0b01011},   {333,0,0b01001},   {334,0,0b10111},   {335,1,0b11011},   {336,0,0b00111},   {337,0,0b01101},   {338,0,0b10111},   {339,1,0b11001},   {340,1,0b11101},   {341,1,0b11001},   {342,1,0b01101},   {344,1,0b00001},   {345,1,0b10011},   {346,0,0b00101},   {347,1,0b01111},   {350,0,0b01011},   {351,1,0b01011},   {352,1,0b01111},   {353,1,0b10101},   {355,1,0b11101},   {356,0,0b00011},   {357,1,0b01001},   {358,1,0b00001},   {359,0,0b00011},   {360,1,0b11011},   {362,0,0b01101},   {363,1,0b11001},   {364,1,0b10011},   {366,1,0b11101},   {367,1,0b01011},   {373,0,0b11001},   {374,1,0b11001},   {375,0,0b01011},   {376,1,0b01111},   {377,0,0b00001},   {378,1,0b00111},   {379,1,0b11011},   {382,1,0b01011},   {383,0,0b00001},   {384,0,0b01101},   {385,1,0b11001},   {386,1,0b01101},   {387,0,0b00011},   {388,1,0b11001},   {389,1,0b00001},   {390,1,0b00011},   {391,0,0b01101},   {392,0,0b10001},   {393,1,0b10001},   {394,0,0b01101},   {395,1,0b11111},   {397,1,0b01001},   {398,1,0b01101},   {399,0,0b10101},   {400,1,0b10111},   {402,1,0b00101},   {405,1,0b10001},   {407,1,0b01001},   {408,0,0b01011},   {409,1,0b11001},   {411,0,0b00101},   {412,0,0b00111},   {413,1,0b11111},   {414,1,0b00101},   {415,1,0b10001},   {416,0,0b00101},   {417,1,0b10111},   {418,0,0b01011},   {419,1,0b10011},   {420,0,0b00111},   {421,0,0b11111},   {422,1,0b11111},   {423,0,0b00011},   {424,1,0b01011},   {425,1,0b10011},   {426,0,0b01101},   {427,1,0b10011},   {428,1,0b00011},   {429,1,0b11001},   {430,0,0b01111},   {431,1,0b10101},   {432,1,0b10001},   {433,0,0b00011},   {434,1,0b11011},   {435,0,0b00011},   {436,1,0b10011},   {437,1,0b11101},   {438,0,0b00101},   {439,0,0b01011},   {440,1,0b11001},   {441,1,0b00101},   {442,1,0b10111},   {443,1,0b11011},   {445,1,0b11011},   {447,0,0b00001},   {448,0,0b10111},   {449,1,0b11011},   {450,0,0b00001},   {451,0,0b01011},   {452,1,0b10001},   {453,0,0b00011},   {454,0,0b01011},   {455,0,0b10001},   {456,1,0b11101},   {457,1,0b00101},   {458,1,0b11011},   {459,1,0b01001},   {463,1,0b00001},   {464,0,0b00001},   {465,1,0b10001},   {466,1,0b10111},   {467,0,0b01101},   {468,0,0b01101},   {469,0,0b01111},   {470,1,0b10101},   {471,1,0b11111},   {473,1,0b01101},   {474,0,0b00101},   {475,0,0b11001},   {476,1,0b11111},   {477,0,0b00101},   {478,1,0b10101},   {479,0,0b00101},   {480,0,0b10001},   {481,0,0b11101},   {482,1,0b11111},   {483,1,0b11101},   {486,1,0b10101},   {487,1,0b00011},   {490,1,0b00001},   {491,1,0b00011},   {492,0,0b01011},   {493,1,0b11011},   {494,1,0b10101},   {495,1,0b00001},   {499,0,0b01011},   {500,1,0b11111},   {501,1,0b01111},   {502,0,0b11001},   {503,1,0b11111},   {504,0,0b00011},   {505,0,0b10101},   {506,1,0b11001},   {507,1,0b01011},   {508,1,0b00011},   {509,1,0b11111},   {510,1,0b10101},   {511,1,0b10101},   {512,1,0b10101},   {513,1,0b00011},   {515,1,0b01111},   {516,1,0b01001},   {517,1,0b00001},   {518,0,0b10111},   {519,1,0b11001},   {520,0,0b00011},   {521,1,0b11011},   {522,1,0b11001},   {523,1,0b11111},   {524,0,0b00011},   {525,1,0b11001},   {526,0,0b01011},   {527,1,0b01011},   {528,1,0b00001},   {529,0,0b01101},   {530,0,0b10101},   {531,1,0b10111},   {532,0,0b00101},   {533,1,0b00111},   {534,1,0b01111},   {535,1,0b00011},   {536,0,0b00111},   {537,0,0b10001},   {538,1,0b11111},   {539,1,0b00011},   {540,1,0b10011},   {541,0,0b00011},   {542,0,0b00011},   {543,1,0b00111},   {544,1,0b10001},   {545,0,0b01111},   {546,1,0b11001},   {547,1,0b11011},   {548,1,0b00011},   {549,0,0b00101},   {550,1,0b11011},   {551,0,0b00101},   {552,1,0b11111},   {553,0,0b00101},   {554,1,0b11111},   {555,0,0b10111},   {556,0,0b11101},   {557,1,0b11101},   {558,0,0b00011},   {559,1,0b01101},   {560,1,0b11011},   {561,1,0b01011},   {562,1,0b11101},   {563,1,0b11011},   {564,1,0b00011},   {565,0,0b01011},   {566,0,0b01011},   {567,1,0b10001},   {568,1,0b11011},   {569,1,0b01101},   {570,1,0b11111},   {571,0,0b01111},   {572,1,0b11011},   {573,1,0b00111},   {574,1,0b01011},   {575,1,0b00101},   {576,0,0b00111},   {577,0,0b11001},   {578,1,0b11011},   {579,1,0b10111},   {580,0,0b01111},   {581,1,0b10101},   {582,1,0b01001},   {583,0,0b01001},   {584,0,0b01101},   {585,1,0b10111},   {586,1,0b01101},   {587,1,0b11011},   {588,1,0b11101},   {589,1,0b11101},   {590,1,0b10001},   {591,1,0b11001},   {592,1,0b00011},   {593,1,0b10111},   {594,1,0b11101},   {595,1,0b00111},   {596,0,0b00011},   {597,1,0b00111},   {598,1,0b11011},   {599,1,0b01111},   {600,1,0b01001},   {601,1,0b10011},   {602,1,0b10001},   {603,1,0b01111},   {604,1,0b00011},   {605,0,0b00001},   {606,0,0b10001},   {607,1,0b11011},   {608,0,0b00001},   {609,0,0b10111},   {610,1,0b11101},   {611,1,0b10001},   {612,0,0b00001},   {613,1,0b00011},   {614,1,0b11101},   {615,1,0b10011},   {616,1,0b01001},   {617,1,0b00011},   {618,0,0b01011},   {619,1,0b01111},   {620,1,0b10001},   {621,1,0b01111},   {622,1,0b00101},   {623,0,0b10101},   {624,1,0b11011},   {625,0,0b01001},   {626,1,0b10101},   {627,1,0b11111},   {628,0,0b10111},   {629,1,0b11111},   {630,0,0b01101},   {631,1,0b10001},   {632,0,0b00101},   {633,0,0b01001},   {634,1,0b10111},   {635,1,0b00001},   {636,0,0b00001},   {637,1,0b00111},   {638,1,0b01111},   {639,0,0b00111},   {640,1,0b01011},   {641,0,0b10111},   {642,1,0b11111},   {643,1,0b10001},   {644,0,0b01001},   {645,0,0b11011},   {646,1,0b11101},   {647,1,0b10011},   {648,1,0b10101},   {649,1,0b01111},   {650,0,0b00111},   {651,1,0b10011},   {652,1,0b00111},   {653,1,0b00001},   {654,0,0b01011},   {655,1,0b11001},   {656,0,0b10001},   {657,0,0b10001},   {658,0,0b10101},   {659,0,0b10111},   {660,1,0b11111},   {661,1,0b01101},   {662,0,0b10001},   {663,1,0b11011},   {664,1,0b10101},   {665,0,0b00011},   {666,1,0b11101},   {667,1,0b01101},   {668,0,0b10101},   {669,1,0b10111},   {670,0,0b10001},   {671,0,0b10101},   {672,1,0b11101},   {673,0,0b00111},   {674,0,0b01011},   {675,1,0b11111},   {676,1,0b11111},   {677,0,0b01101},   {678,1,0b11101},   {679,1,0b00011},   {680,1,0b01111},   {681,1,0b01001},   {682,1,0b01001},   {683,0,0b00101},   {684,0,0b01101},   {685,1,0b10001},   {686,0,0b00011},   {687,0,0b00111},   {688,1,0b01111},   {689,1,0b01111},   {690,1,0b00111},   {691,0,0b00001},   {692,1,0b11011},   {693,0,0b00001},   {694,1,0b10011},   {695,0,0b00001},   {696,0,0b01001},   {697,1,0b10011},   {698,0,0b10111},   {699,1,0b11001},   {700,1,0b10101},   {701,1,0b10001},   {702,0,0b01011},   {703,1,0b01111},   {704,1,0b01111},   {705,1,0b01101},   {706,1,0b11001},   {707,1,0b10101},   {708,1,0b11011},   {709,1,0b01011},   {710,1,0b01111},   {711,1,0b11101},   {712,1,0b10011},   {713,0,0b01011},   {714,0,0b10011},   {715,1,0b11111},   {716,1,0b11001},   {717,0,0b10111},   {718,1,0b11111},   {719,0,0b01011},   {720,1,0b11011},   {721,1,0b00011},   {722,1,0b00101},   {723,1,0b00101},   {724,1,0b11111},   {725,0,0b01111},   {726,0,0b10111},   {727,0,0b11111},   {728,1,0b11111},   {729,1,0b00011},   {730,1,0b00111},   {731,1,0b10001},   {732,1,0b00101},   {733,0,0b00111},   {734,1,0b11101},   {735,1,0b00111},   {736,0,0b00001},   {737,0,0b10001},   {738,1,0b11011},   {739,1,0b01011},   {740,1,0b11001},   {741,1,0b10111},   {742,1,0b01101},   {743,1,0b10001},   {744,0,0b00001},   {745,1,0b01111},   {746,0,0b01101},   {747,1,0b10011},   {748,1,0b01001},   {749,0,0b00001},   {750,1,0b11001},   {751,0,0b10011},   {752,1,0b11101},   {753,1,0b11001},   {754,0,0b00011},   {755,1,0b00111},   {756,1,0b00111},   {757,1,0b00001},   {758,0,0b00011},   {759,0,0b01001},   {760,1,0b01011},   {761,1,0b10011},   {762,1,0b01111},   {763,1,0b01111},   {764,1,0b01111},   {765,1,0b00011},   {766,1,0b01011},   {767,1,0b00001},   {768,0,0b11001},   {769,1,0b11101},   {770,1,0b11001},   {771,1,0b01101},   {772,0,0b00111},   {773,0,0b10001},   {774,1,0b11101},   {775,0,0b00011},   {776,1,0b11111},   {777,1,0b11001},   {778,1,0b11111},   {779,1,0b00111},   {780,1,0b01101},   {781,0,0b00001},   {782,1,0b01101},   {783,1,0b10011},   {784,0,0b01001},   {785,1,0b11111},   {786,0,0b00001},   {787,1,0b00111},   {788,1,0b00001},   {789,1,0b10111},   {790,0,0b00101},   {791,0,0b00111},   {792,1,0b10111},   {793,1,0b00111},   {794,0,0b01011},   {795,1,0b10001},   {796,0,0b00011},   {797,0,0b01001},   {798,1,0b01101},   {799,1,0b11011},   {800,1,0b01101},   {801,0,0b01011},   {802,1,0b11111},   {803,1,0b10101},   {804,1,0b00111},   {805,1,0b11011},   {806,0,0b01001},   {807,1,0b10001},   {808,0,0b00001},   {809,1,0b01001},   {810,0,0b01011},   {811,1,0b11101},   {812,0,0b00111},   {813,0,0b11111},   {814,1,0b11111},   {815,1,0b00011},   {816,0,0b00101},   {817,0,0b01001},   {818,1,0b11011},   {819,1,0b01011},   {820,0,0b11001},   {821,0,0b11011},   {822,1,0b11101},   {823,0,0b00001},   {824,1,0b11011},   {825,0,0b00101},   {826,0,0b00111},   {827,1,0b01011},   {828,0,0b00011},   {829,1,0b11111},   {830,1,0b00001},   {831,0,0b00111},   {832,1,0b01101},   {833,1,0b01011},   {834,1,0b01111},   {835,1,0b01111},   {836,1,0b11111},   {837,1,0b00001},   {838,1,0b11111},   {839,1,0b11111},   {840,1,0b00101},   {841,1,0b11101},   {842,1,0b00111},   {843,0,0b00111},   {844,0,0b10001},   {845,1,0b11001},   {846,1,0b00111},   {847,0,0b00011},   {848,1,0b00101},   {849,1,0b01001},   {850,0,0b01101},   {851,0,0b10011},   {852,1,0b11001},   {853,1,0b01101},   {854,1,0b10011},   {855,0,0b00001},   {856,0,0b01001},   {857,1,0b11011},   {858,0,0b00011},   {859,1,0b00011},   {860,1,0b10101},   {861,1,0b11011},   {862,0,0b10111},   {863,1,0b10111},   {864,1,0b01001},   {865,1,0b00011},   {866,1,0b10111},   {867,1,0b10011},   {868,1,0b01101},   {869,0,0b00101},   {870,1,0b01101},   {871,1,0b11011},   {872,1,0b11011},   {873,1,0b00101},   {874,1,0b10101},   {875,1,0b10001},   {876,1,0b00101},   {877,0,0b00001},   {878,1,0b00011},   {879,1,0b10111},   {880,1,0b10111},   {881,0,0b00001},   {882,0,0b00011},   {883,0,0b00101},   {884,1,0b11111},   {885,0,0b00111},   {886,1,0b01001},   {887,1,0b00001},   {888,0,0b11001},   {889,1,0b11111},   {890,1,0b11111},   {891,0,0b00011},   {892,0,0b00111},   {893,0,0b11101},   {894,1,0b11111},   {895,0,0b00001},   {896,1,0b10101},   {897,0,0b10001},   {898,0,0b10001},   {899,1,0b11001},   {900,1,0b11001},   {901,0,0b01011},   {902,1,0b11001},   {903,1,0b00001},   {904,0,0b01101},   {905,1,0b11101},   {906,1,0b11111},   {907,1,0b00111},   {908,1,0b10101},   {909,1,0b11111},   {910,0,0b00011},   {911,0,0b00011},   {912,1,0b10101},   {913,1,0b10001},   {914,0,0b01111},   {915,1,0b10001},   {916,0,0b10111},   {917,1,0b11101},   {918,1,0b10011},   {919,0,0b00001},   {920,1,0b11001},   {921,0,0b11011},   {922,1,0b11101},   {923,1,0b00101},   {924,0,0b00001},   {925,1,0b10011},   {926,1,0b11101},   {927,0,0b00101},   {928,1,0b01001},   {929,1,0b10011},   {930,0,0b00101},   {931,0,0b01111},   {932,1,0b11001},   {933,0,0b00111},   {934,1,0b01011},   {935,1,0b10111},   {936,1,0b10111},   {937,0,0b00111},   {938,0,0b01101},   {939,1,0b01101},   {940,1,0b01111},   {941,0,0b01011},   {942,1,0b01101},   {943,1,0b11111},   {944,1,0b10101},   {945,0,0b00111},   {946,0,0b10001},   {947,0,0b10001},   {948,0,0b11011},   {949,1,0b11111},   {950,1,0b11011},   {951,1,0b11111},   {952,1,0b10001},   {953,1,0b10101},   {954,0,0b10001},   {955,1,0b11011},   {956,1,0b00111},   {957,0,0b00101},   {958,0,0b01111},   {959,1,0b10001},   {960,0,0b10001},   {961,0,0b10011},   {962,1,0b10111},   {963,1,0b10011},   {964,0,0b01101},   {965,1,0b01111},   {966,0,0b00011},   {967,1,0b00111},   {968,0,0b01001},   {969,1,0b01101},   {970,1,0b00111},   {971,1,0b00111},   {972,1,0b11111},   {973,1,0b00101},   {974,0,0b00001},   {975,0,0b00011},   {976,0,0b01001},   {977,0,0b01111},   {978,1,0b11101},   {979,1,0b11101},   {980,1,0b00001},   {981,0,0b00001},   {982,0,0b00101},   {983,1,0b10011},   {984,1,0b11001},   {985,1,0b10111},   {986,1,0b10011},   {987,1,0b01101},   {988,1,0b10111},   {989,0,0b10001},   {990,1,0b10111},   {991,1,0b10101},   {992,1,0b10101},   {993,0,0b00001},   {994,1,0b10101},   {995,1,0b10111},   {996,0,0b01111},   {997,0,0b11001},   {998,1,0b11011},   {999,0,0b11011},   {1000,1,0b11101},   {1001,1,0b00011},   {1002,1,0b11001},   {1003,0,0b01011},   {1004,0,0b10111},   {1005,0,0b10111},   {1006,1,0b11011},   {1007,0,0b01011},   {1008,1,0b11001},   {1009,0,0b00101},   {1010,1,0b10101},   {1011,1,0b10011},   {1012,1,0b00101},   {1013,0,0b10111},   {1014,1,0b10111},   {1015,1,0b00011},   {1016,1,0b01011},   {1017,0,0b00001},   {1018,1,0b01001},   {1019,0,0b10111},   {1020,1,0b11111},   {1021,0,0b00001},   {1022,1,0b10101},   {1023,0,0b00101},   {1024,0,0b10001},   {1025,1,0b11011},   {1026,0,0b01111},   {1027,1,0b10101},   {1028,0,0b01111},   {1029,0,0b01111},   {1030,1,0b10101},   {1031,0,0b00011},   {1032,1,0b10001},   {1033,0,0b00111},   {1034,1,0b11111},   {1035,1,0b11011},   {1036,1,0b10011},   {1037,0,0b10111},   {1038,1,0b11101},   {1039,1,0b01101},   {1040,1,0b01111},   {1041,1,0b11111},   {1042,0,0b10101},   {1043,1,0b10111},   {1044,1,0b00001},   {1045,1,0b11011},   {1046,1,0b10001},   {1047,1,0b10011},   {1048,1,0b10001},   {1049,0,0b00111},   {1050,1,0b10111},   {1051,1,0b11011},   {1052,0,0b00001},   {1053,1,0b10111},   {1054,0,0b00111},   {1055,1,0b01111},   {1056,1,0b01111},   {1057,1,0b11001},   {1058,1,0b10001},   {1059,0,0b10001},   {1060,1,0b10101},   {1061,1,0b00001},   {1062,1,0b00001},   {1063,0,0b00101},   {1064,1,0b01001},   {1065,0,0b11011},   {1066,1,0b11111},   {1067,0,0b01101},   {1068,1,0b11111},   {1069,1,0b10111},   {1070,1,0b11001},   {1071,0,0b00101},   {1072,1,0b10111},   {1073,1,0b01101},   {1074,1,0b01101},   {1075,1,0b10011},   {1076,1,0b01001}};
            AssertStoreContents(s, store, occupieds_pos, checks);
        }
    }


    static void PointQuery() {
        const uint32_t infix_size = 5;
        const uint32_t seed = 1;
        const float load_factor = 0.95;
        Diva<false> s(infix_size, seed, load_factor);
        Diva<false>::InfixStore store(s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep], s.infix_size_);

        const std::vector<uint64_t> keys {0b000000000000001, 0b000000000000101,
            0b000000000010101, 0b000000000100001, 0b000000000101000,
            0b000000000101011, 0b001000000100001, 0b001000000100011,
            0b001000000100101, 0b001000000100110, 0b001000000100110,
            0b001000000100110, 0b001000001110000, 0b001000001100011,
            0b001000001100101, 0b001111111000001, 0b001111111000011,
            0b001111111000111, 0b001111111100001, 0b001111111100010,
            0b001111111100010};
        for (uint64_t key : keys)
            s.InsertRawIntoInfixStore(store, key);

        SUBCASE("no false negatives") {
            for (uint64_t key : keys)
                REQUIRE_EQ(s.PointQueryInfixStore(store, key), true);
        }

        SUBCASE("extensions of partial infix") {
            std::vector<uint64_t> queries;
            for (uint64_t key : keys)
                for (uint64_t query_key = key - (key & -key); query_key < (key | (key - 1)); query_key++)
                    queries.emplace_back(query_key);
            for (uint64_t query : queries)
                REQUIRE_EQ(s.PointQueryInfixStore(store, query), true);
        }

        SUBCASE("negatives") {
            std::vector<uint64_t> queries;
            for (uint64_t query_key = 0; query_key < (1ULL << (s.infix_size_ + Diva<false>::base_implicit_size)); query_key++) {
                
                bool valid = true;
                for (uint64_t key : keys)
                    if (key - (key & -key) <= query_key && query_key <= (key | (key - 1))) {
                        valid = false;
                        break;
                    }
                if (valid)
                    queries.emplace_back(query_key);
            }
            for (uint64_t query : queries)
                REQUIRE_EQ(s.PointQueryInfixStore(store, query), false);
        }
    }


    static void RangeQuery() {
        const uint32_t infix_size = 5;
        const uint32_t seed = 1;
        const float load_factor = 0.95;
        Diva<false> s(infix_size, seed, load_factor);
        Diva<false>::InfixStore store(s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep], s.infix_size_);
        
        const uint32_t n_queries = 100000;
        const uint32_t rng_seed = 2;
        std::mt19937_64 rng(rng_seed);

        const std::vector<uint64_t> keys {0b000000000000001, 0b000000000000101,
            0b000000000010101, 0b000000000100001, 0b000000000101000,
            0b000000000101011, 0b001000000100001, 0b001000000100011,
            0b001000000100101, 0b001000000100110, 0b001000000100110,
            0b001000000100110, 0b001000001110000, 0b001000001100011,
            0b001000001100101, 0b011111111000001, 0b011111111000011,
            0b011111111000111, 0b011111111100001, 0b011111111100010,
            0b011111111100010};
        for (uint64_t key : keys)
            s.InsertRawIntoInfixStore(store, key);

        SUBCASE("no false negatives") {
            std::vector<std::pair<uint64_t, uint64_t>> queries;
            while (queries.size() < n_queries) {
                uint64_t l = rng() & BITMASK(s.infix_size_ + Diva<false>::base_implicit_size);
                uint64_t r = rng() & BITMASK(s.infix_size_ + Diva<false>::base_implicit_size);
                if (l > r)
                    std::swap(l, r);

                bool valid = false;
                for (uint64_t key : keys) {
                    const uint64_t key_l = key - (key & -key);
                    const uint64_t key_r = key | (key - 1);
                    if (std::max(key_l, l) <= std::min(key_r, r)) {
                        valid = true;
                        break;
                    }
                }
                if (valid)
                    queries.emplace_back(l, r);
            }
            for (auto [query_l, query_r] : queries)
                REQUIRE_EQ(s.RangeQueryInfixStore(store, query_l, query_r), true);
        }

        SUBCASE("negatives") {
            std::vector<std::pair<uint64_t, uint64_t>> queries;
            while (queries.size() < n_queries) {
                uint64_t l = rng() & BITMASK(s.infix_size_ + Diva<false>::base_implicit_size);
                uint64_t r = rng() & BITMASK(s.infix_size_ + Diva<false>::base_implicit_size);
                if (l > r)
                    std::swap(l, r);

                bool valid = true;
                for (uint64_t key : keys) {
                    const uint64_t key_l = key - (key & -key);
                    const uint64_t key_r = key | (key - 1);
                    if (std::max(key_l, l) <= std::min(key_r, r)) {
                        valid = false;
                        break;
                    }
                }
                if (valid)
                    queries.emplace_back(l, r);
            }
            for (auto [query_l, query_r] : queries)
                REQUIRE_EQ(s.RangeQueryInfixStore(store, query_l, query_r), false);
        }
    }

    static void ShrinkInfixSize() {
        const uint32_t infix_size = 5;
        const uint32_t seed = 1;
        const float load_factor = 0.95;
        Diva<false> s(infix_size, seed, load_factor);
        Diva<false>::InfixStore store(s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep], s.infix_size_);
        
        const std::vector<uint64_t> keys {0b000000000000001, 0b000000000000101,
            0b000000000010101, 0b000000000100001, 0b000000000101000,
            0b000000000101011, 0b001000000100001, 0b001000000100011,
            0b001000000100101, 0b001000000100110, 0b001000000100110,
            0b001000000100110, 0b001000001110000, 0b001000001100011,
            0b001000001100101, 0b011111111000001, 0b011111111000011,
            0b011111111000111, 0b011111111100001, 0b011111111100010,
            0b011111111100010};
        for (uint64_t key : keys)
            s.InsertRawIntoInfixStore(store, key);

        SUBCASE("shrink by one") {
            s.ShrinkInfixStoreInfixSize(store, s.infix_size_ - 1);
            s.infix_size_--;
            const std::vector<uint64_t> check {0b00000000000001,
                0b00000000000011, 0b00000000001011, 0b00000000010001,
                0b00000000010100, 0b00000000010101, 0b00100000010001,
                0b00100000010001, 0b00100000010011, 0b00100000010011,
                0b00100000010011, 0b00100000010011, 0b00100000111000,
                0b00100000110001, 0b00100000110011, 0b01111111100001,
                0b01111111100001, 0b01111111100011, 0b01111111110001,
                0b01111111110001, 0b01111111110001};
            uint64_t res[check.size() + 1];
            const uint32_t len = s.GetInfixList(store, res);
            REQUIRE_EQ(len, check.size());
            for (int32_t i = 0; i < check.size(); i++)
                REQUIRE_EQ(res[i], check[i]);
        }

        SUBCASE("shrink by two") {
            s.ShrinkInfixStoreInfixSize(store, s.infix_size_ - 2);
            s.infix_size_ -= 2;
            const std::vector<uint64_t> check {0b0000000000001,
                0b0000000000001, 0b0000000000101, 0b0000000001001,
                0b0000000001010, 0b0000000001011, 0b0010000001001,
                0b0010000001001, 0b0010000001001, 0b0010000001001,
                0b0010000001001, 0b0010000001001, 0b0010000011100,
                0b0010000011001, 0b0010000011001, 0b0111111110001,
                0b0111111110001, 0b0111111110001, 0b0111111111001,
                0b0111111111001, 0b0111111111001};
            uint64_t res[check.size() + 1];
            const uint32_t len = s.GetInfixList(store, res);
            REQUIRE_EQ(len, check.size());
            for (int32_t i = 0; i < check.size(); i++)
                REQUIRE_EQ(res[i], check[i]);
        }
    }


    static void Resize() {
        const uint32_t infix_size = 5;
        const uint32_t seed = 1;
        const float load_factor = 0.95;
        Diva<false> s(infix_size, seed, load_factor);
        Diva<false>::InfixStore store(s.scaled_sizes_[Diva<false>::size_scalar_shrink_grow_sep], s.infix_size_);
        
        const uint32_t n_keys = Diva<false>::infix_store_target_size;
        const uint32_t rng_seed = 2;
        std::mt19937_64 rng(rng_seed);
        for (int32_t i = 0; i < n_keys; i++)
            s.InsertRawIntoInfixStore(store, (rng() & BITMASK(Diva<false>::base_implicit_size + infix_size)) | 1ULL);

        s.ResizeInfixStore(store, true);

        SUBCASE("expand") {
            const std::vector<uint32_t> occupieds_pos = {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 29, 31, 34, 36, 37, 41, 47, 48, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 99, 100, 102, 104, 105, 106, 108, 110, 112, 113, 115, 117, 118, 119, 120, 122, 123, 127, 128, 129, 130, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 156, 157, 159, 160, 161, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 183, 184, 187, 197, 198, 200, 202, 203, 204, 206, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 255, 257, 259, 260, 261, 262, 264, 268, 269, 270, 272, 273, 275, 276, 278, 280, 282, 284, 285, 286, 289, 293, 295, 296, 297, 298, 299, 300, 302, 303, 305, 306, 307, 312, 314, 316, 317, 318, 319, 321, 323, 324, 326, 327, 328, 329, 330, 331, 335, 337, 338, 340, 342, 343, 344, 347, 348, 350, 351, 352, 354, 358, 359, 360, 362, 364, 368, 369, 371, 375, 376, 377, 378, 379, 380, 381, 382, 384, 386, 391, 392, 393, 395, 396, 398, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 423, 424, 427, 428, 429, 431, 433, 434, 435, 438, 439, 442, 444, 445, 449, 450, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 466, 467, 468, 470, 471, 473, 477, 478, 479, 480, 484, 486, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 508, 509, 510, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 526, 528, 531, 532, 534, 536, 537, 538, 541, 542, 543, 545, 548, 549, 550, 553, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 572, 574, 576, 578, 579, 582, 584, 585, 588, 589, 591, 595, 599, 602, 603, 604, 605, 607, 608, 611, 612, 614, 616, 619, 620, 621, 622, 623, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 642, 644, 646, 647, 649, 650, 651, 652, 653, 656, 657, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 675, 678, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 694, 695, 697, 698, 703, 704, 708, 709, 711, 713, 714, 715, 716, 718, 720, 722, 723, 724, 725, 727, 728, 730, 732, 733, 734, 735, 737, 738, 739, 741, 742, 743, 745, 746, 748, 749, 750, 752, 753, 754, 758, 759, 760, 761, 766, 768, 771, 772, 773, 775, 776, 780, 781, 782, 783, 784, 788, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 815, 816, 817, 818, 819, 821, 826, 827, 828, 830, 833, 834, 835, 836, 838, 840, 842, 847, 849, 850, 851, 854, 856, 858, 860, 862, 863, 865, 868, 869, 871, 874, 875, 876, 877, 878, 879, 881, 884, 885, 886, 887, 890, 891, 893, 895, 896, 897, 898, 899, 905, 906, 907, 908, 909, 910, 911, 913, 915, 916, 918, 919, 920, 922, 923, 927, 929, 930, 931, 934, 936, 937, 938, 939, 941, 942, 945, 946, 947, 948, 950, 951, 952, 953, 956, 958, 959, 960, 961, 963, 964, 965, 967, 968, 971, 972, 973, 974, 975, 976, 978, 980, 981, 983, 984, 985, 986, 987, 990, 991, 992, 993, 994, 999, 1000, 1003, 1004, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1022};
            const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  1,1,0b11111},   {  2,1,0b11111},   {  3,1,0b01001},   {  4,1,0b11111},   {  5,0,0b00001},   {  6,0,0b00111},   {  7,1,0b11111},   {  8,0,0b00011},   {  9,0,0b00101},   { 10,1,0b11101},   { 11,1,0b01011},   { 12,0,0b00001},   { 13,1,0b01011},   { 14,1,0b10111},   { 15,1,0b10001},   { 16,1,0b00001},   { 17,0,0b01101},   { 18,1,0b10111},   { 19,1,0b01001},   { 20,1,0b01011},   { 21,1,0b00111},   { 22,0,0b00111},   { 23,0,0b10101},   { 24,0,0b11011},   { 25,1,0b11101},   { 26,0,0b00001},   { 27,0,0b01001},   { 28,1,0b10101},   { 29,0,0b10101},   { 30,1,0b11001},   { 31,0,0b10011},   { 32,1,0b11011},   { 33,1,0b00011},   { 34,1,0b10101},   { 35,0,0b00001},   { 36,1,0b01001},   { 37,1,0b01011},   { 39,0,0b00011},   { 40,1,0b00011},   { 41,1,0b00001},   { 45,1,0b00001},   { 52,0,0b10001},   { 53,1,0b11101},   { 54,1,0b11001},   { 55,1,0b11101},   { 58,0,0b01101},   { 59,1,0b01111},   { 60,1,0b01101},   { 62,0,0b01111},   { 63,1,0b10111},   { 64,1,0b01101},   { 65,0,0b10011},   { 66,1,0b11101},   { 67,0,0b00001},   { 68,1,0b01111},   { 69,1,0b01101},   { 70,1,0b11101},   { 71,0,0b00101},   { 72,1,0b01001},   { 73,1,0b10001},   { 74,1,0b10101},   { 75,0,0b11011},   { 76,0,0b11011},   { 77,1,0b11111},   { 78,1,0b11011},   { 79,1,0b11011},   { 80,0,0b10011},   { 81,0,0b10111},   { 82,1,0b11111},   { 84,1,0b10111},   { 85,1,0b00111},   { 86,1,0b11011},   { 87,0,0b00111},   { 88,1,0b10111},   { 89,1,0b01011},   { 90,1,0b11001},   { 91,0,0b00011},   { 92,0,0b00101},   { 93,1,0b01101},   { 94,1,0b11001},   { 95,1,0b11001},   { 96,0,0b10001},   { 97,1,0b10011},   { 98,1,0b11111},   { 99,1,0b00101},   {100,1,0b01111},   {101,1,0b01011},   {102,1,0b00011},   {103,1,0b11001},   {104,0,0b00011},   {105,0,0b00011},   {106,0,0b00101},   {107,1,0b01111},   {108,1,0b00111},   {109,1,0b01011},   {110,0,0b00001},   {111,0,0b00111},   {112,1,0b11001},   {113,0,0b00001},   {114,0,0b11101},   {115,1,0b11101},   {116,1,0b00011},   {117,1,0b11111},   {118,1,0b10001},   {119,1,0b11111},   {120,0,0b00101},   {121,1,0b01111},   {122,1,0b11011},   {123,1,0b01101},   {124,1,0b01011},   {125,1,0b00011},   {127,1,0b01101},   {129,1,0b00011},   {130,0,0b00101},   {131,0,0b01111},   {132,1,0b11101},   {133,1,0b01101},   {134,1,0b11001},   {135,0,0b01001},   {136,1,0b11011},   {137,1,0b01111},   {140,0,0b10011},   {141,1,0b11101},   {142,0,0b00001},   {143,0,0b01111},   {144,1,0b10001},   {145,1,0b11011},   {146,0,0b00001},   {147,1,0b11011},   {148,1,0b01111},   {149,1,0b00111},   {150,0,0b01011},   {151,1,0b11101},   {152,1,0b10101},   {154,1,0b00101},   {155,1,0b00111},   {156,1,0b01001},   {158,0,0b10101},   {159,1,0b11001},   {160,0,0b01101},   {161,1,0b11101},   {162,0,0b01001},   {163,1,0b01011},   {164,1,0b11001},   {165,1,0b01111},   {166,1,0b01011},   {168,1,0b11111},   {169,0,0b00111},   {170,1,0b10001},   {172,0,0b10011},   {173,0,0b11101},   {174,1,0b11111},   {175,0,0b01001},   {176,1,0b10001},   {177,0,0b00001},   {178,0,0b01011},   {179,1,0b11001},   {180,1,0b11111},   {181,1,0b01011},   {182,1,0b01011},   {183,1,0b00101},   {184,1,0b10011},   {186,0,0b01011},   {187,0,0b11001},   {188,1,0b11111},   {189,1,0b00101},   {190,1,0b11011},   {191,1,0b10001},   {192,1,0b01011},   {193,1,0b00111},   {194,1,0b11001},   {195,0,0b01101},   {196,1,0b01111},   {197,1,0b11101},   {198,0,0b00011},   {199,0,0b01011},   {200,1,0b10011},   {202,1,0b01101},   {203,1,0b11001},   {207,1,0b10111},   {218,0,0b00001},   {219,1,0b11011},   {220,1,0b11101},   {221,0,0b01011},   {222,1,0b11001},   {223,0,0b10001},   {224,1,0b11001},   {225,1,0b11111},   {226,1,0b10011},   {228,1,0b00101},   {230,0,0b00001},   {231,0,0b00011},   {232,1,0b11101},   {233,1,0b11101},   {234,1,0b01111},   {235,1,0b10101},   {236,0,0b00101},   {237,0,0b00111},   {238,1,0b00111},   {239,1,0b10001},   {240,1,0b01101},   {241,0,0b01011},   {242,1,0b11101},   {243,1,0b11101},   {244,0,0b00011},   {245,1,0b01001},   {246,1,0b10111},   {247,0,0b01001},   {248,1,0b10101},   {249,1,0b01111},   {250,0,0b01101},   {251,1,0b10011},   {252,0,0b10101},   {253,0,0b10101},   {254,1,0b11101},   {255,1,0b00101},   {256,0,0b00001},   {257,1,0b11011},   {258,1,0b11111},   {259,1,0b01111},   {260,0,0b00011},   {261,1,0b10111},   {262,1,0b10011},   {263,1,0b01001},   {264,1,0b11101},   {265,1,0b01111},   {266,0,0b10111},   {267,1,0b11011},   {268,0,0b01011},   {269,1,0b11001},   {270,0,0b01011},   {271,0,0b11011},   {272,1,0b11111},   {273,1,0b01101},   {274,0,0b01101},   {275,1,0b10101},   {276,0,0b01011},   {277,0,0b01011},   {278,1,0b11001},   {279,0,0b01011},   {280,1,0b10111},   {281,1,0b11111},   {282,0,0b00101},   {283,0,0b01101},   {284,0,0b10101},   {285,1,0b11101},   {286,1,0b00011},   {287,1,0b01011},   {288,1,0b00111},   {289,0,0b01101},   {290,1,0b10111},   {291,1,0b11001},   {292,1,0b11111},   {293,0,0b00011},   {294,0,0b10011},   {295,1,0b10101},   {296,1,0b10011},   {297,0,0b10101},   {298,1,0b11001},   {299,1,0b01101},   {300,1,0b01001},   {301,1,0b10011},   {302,1,0b01111},   {303,0,0b10001},   {304,1,0b10101},   {305,1,0b11111},   {306,1,0b10001},   {307,1,0b10111},   {308,0,0b00011},   {309,0,0b11101},   {310,1,0b11111},   {311,1,0b11011},   {312,0,0b01101},   {313,1,0b01111},   {314,1,0b00011},   {315,0,0b00111},   {316,0,0b01011},   {317,0,0b10111},   {318,1,0b11001},   {319,0,0b10001},   {320,1,0b10001},   {321,1,0b01111},   {322,0,0b01101},   {323,0,0b10001},   {324,0,0b11011},   {325,1,0b11111},   {326,1,0b01011},   {327,1,0b00101},   {328,1,0b01001},   {329,1,0b00001},   {330,0,0b11001},   {331,1,0b11101},   {332,1,0b01001},   {333,0,0b10001},   {334,1,0b10101},   {335,1,0b00001},   {336,0,0b01101},   {337,1,0b11111},   {338,0,0b00001},   {339,1,0b01011},   {340,0,0b01011},   {341,1,0b11001},   {342,1,0b00101},   {343,0,0b10011},   {344,1,0b11111},   {345,0,0b01101},   {346,1,0b10111},   {347,1,0b00101},   {348,0,0b10011},   {349,1,0b11111},   {350,1,0b10001},   {351,1,0b00011},   {352,0,0b00011},   {353,1,0b10011},   {354,1,0b01001},   {355,0,0b10101},   {356,0,0b11001},   {357,0,0b11011},   {358,1,0b11011},   {359,0,0b10001},   {360,1,0b11101},   {361,1,0b01111},   {362,1,0b11001},   {363,1,0b01011},   {364,1,0b11011},   {365,1,0b11011},   {366,1,0b00101},   {367,1,0b11111},   {371,1,0b11111},   {373,1,0b01001},   {374,1,0b01001},   {376,0,0b00001},   {377,0,0b00001},   {378,1,0b00111},   {379,1,0b10011},   {380,1,0b11001},   {381,1,0b01001},   {384,0,0b00111},   {385,0,0b10101},   {386,1,0b10101},   {387,0,0b00001},   {388,1,0b10111},   {389,1,0b00101},   {390,1,0b00001},   {391,1,0b01001},   {392,1,0b11011},   {396,1,0b00111},   {397,0,0b00011},   {398,1,0b00111},   {399,1,0b10101},   {401,1,0b00101},   {403,0,0b00001},   {404,0,0b01111},   {405,1,0b11011},   {407,1,0b11011},   {408,0,0b10011},   {409,1,0b10111},   {411,0,0b11101},   {412,1,0b11111},   {415,0,0b10011},   {416,1,0b11011},   {417,0,0b01101},   {418,1,0b10011},   {419,1,0b11011},   {420,0,0b10001},   {421,1,0b11001},   {422,1,0b10101},   {423,1,0b01001},   {424,1,0b01011},   {425,1,0b10001},   {426,0,0b01011},   {427,1,0b11111},   {428,0,0b00111},   {429,0,0b11001},   {430,1,0b11111},   {433,1,0b10011},   {434,1,0b01001},   {435,0,0b00111},   {436,0,0b01101},   {437,0,0b10001},   {438,1,0b10001},   {439,0,0b00011},   {440,1,0b01101},   {441,0,0b10001},   {442,0,0b10111},   {443,1,0b11101},   {444,1,0b11111},   {445,1,0b10111},   {446,0,0b00101},   {447,0,0b00101},   {448,1,0b01011},   {449,1,0b01001},   {450,0,0b00111},   {451,1,0b01011},   {452,1,0b11101},   {453,1,0b11111},   {454,1,0b10001},   {455,1,0b11111},   {456,1,0b01101},   {457,0,0b10001},   {458,0,0b10011},   {459,1,0b11001},   {460,0,0b11011},   {461,1,0b11101},   {462,0,0b01011},   {463,0,0b01101},   {464,1,0b11001},   {465,0,0b01111},   {466,1,0b10101},   {467,1,0b00011},   {468,1,0b00001},   {469,1,0b01111},   {470,0,0b00001},   {471,1,0b01101},   {472,1,0b00011},   {473,0,0b00101},   {474,0,0b10001},   {475,1,0b10011},   {476,0,0b00101},   {477,1,0b11011},   {478,0,0b00001},   {479,1,0b11101},   {480,1,0b00001},   {481,0,0b10001},   {482,1,0b11101},   {483,0,0b00011},   {484,1,0b01101},   {485,1,0b10001},   {486,0,0b00111},   {487,0,0b10011},   {488,0,0b10111},   {489,0,0b10111},   {490,1,0b11111},   {491,1,0b10001},   {492,1,0b00011},   {493,1,0b00101},   {494,1,0b11101},   {495,1,0b00101},   {496,1,0b01101},   {497,1,0b01111},   {498,1,0b01111},   {500,1,0b10111},   {501,0,0b00001},   {502,1,0b00011},   {503,0,0b00111},   {504,0,0b01111},   {505,0,0b10001},   {506,1,0b10111},   {507,0,0b01111},   {508,1,0b11001},   {509,0,0b01001},   {510,1,0b10001},   {511,1,0b00011},   {512,1,0b00111},   {513,0,0b11011},   {514,1,0b11101},   {515,1,0b11111},   {516,0,0b00111},   {517,0,0b11001},   {518,1,0b11011},   {519,1,0b00111},   {520,0,0b11101},   {521,1,0b11111},   {522,1,0b11101},   {523,1,0b10001},   {524,0,0b10011},   {525,1,0b10111},   {526,0,0b00101},   {527,1,0b11011},   {528,1,0b11011},   {529,1,0b01001},   {530,1,0b01001},   {531,0,0b00001},   {532,1,0b00101},   {536,0,0b00001},   {537,0,0b10111},   {538,1,0b11001},   {539,1,0b11001},   {540,1,0b10101},   {542,0,0b00011},   {543,0,0b00011},   {544,1,0b10001},   {545,1,0b00011},   {546,1,0b00011},   {547,0,0b01111},   {548,1,0b11111},   {549,1,0b00011},   {550,0,0b00011},   {551,0,0b10001},   {552,1,0b11011},   {553,1,0b01101},   {554,0,0b00111},   {555,1,0b10101},   {556,1,0b00111},   {557,0,0b00111},   {558,1,0b10011},   {559,0,0b01001},   {560,1,0b10101},   {561,0,0b01001},   {562,1,0b01111},   {563,0,0b00101},   {564,1,0b10001},   {565,1,0b01011},   {566,1,0b11111},   {567,1,0b00111},   {568,1,0b10111},   {569,0,0b10001},   {570,0,0b10101},   {571,1,0b11111},   {572,0,0b00111},   {573,1,0b10011},   {574,1,0b11111},   {575,1,0b11001},   {576,1,0b00011},   {577,0,0b00001},   {578,0,0b01001},   {579,1,0b10111},   {580,1,0b11001},   {581,0,0b00111},   {582,0,0b10011},   {583,1,0b10101},   {584,0,0b01011},   {585,0,0b10011},   {586,1,0b11111},   {587,0,0b00001},   {588,0,0b10111},   {589,1,0b11001},   {590,0,0b01111},   {591,1,0b10001},   {592,1,0b10101},   {593,0,0b10101},   {594,0,0b11011},   {595,1,0b11101},   {596,1,0b00001},   {597,0,0b01001},   {598,1,0b11011},   {599,1,0b10011},   {600,1,0b01011},   {601,0,0b10111},   {602,1,0b11111},   {603,0,0b00111},   {604,0,0b01011},   {605,0,0b01111},   {606,1,0b11111},   {607,1,0b00001},   {608,0,0b00101},   {609,1,0b01101},   {610,1,0b10101},   {611,1,0b10001},   {612,1,0b00101},   {613,0,0b00111},   {614,1,0b11011},   {615,1,0b01011},   {616,0,0b01011},   {617,1,0b01011},   {618,0,0b10001},   {619,1,0b10111},   {620,1,0b01111},   {621,1,0b10111},   {622,1,0b10111},   {623,1,0b10011},   {624,1,0b00101},   {625,1,0b01011},   {626,1,0b10111},   {627,1,0b01001},   {628,1,0b10011},   {629,1,0b10101},   {630,1,0b00001},   {633,1,0b01111},   {636,1,0b11001},   {638,1,0b00011},   {640,1,0b00111},   {641,1,0b10101},   {644,1,0b00001},   {647,1,0b10111},   {648,0,0b00011},   {649,1,0b10011},   {651,0,0b10101},   {652,1,0b11101},   {653,0,0b10101},   {654,1,0b11001},   {655,1,0b11111},   {659,0,0b01101},   {660,0,0b10001},   {661,1,0b11111},   {663,0,0b01011},   {664,1,0b11001},   {667,0,0b01111},   {668,1,0b10111},   {669,0,0b01001},   {670,1,0b10001},   {671,0,0b00101},   {672,1,0b11001},   {673,0,0b01001},   {674,1,0b11111},   {675,1,0b10101},   {676,0,0b01111},   {677,1,0b10001},   {678,1,0b01101},   {679,0,0b00111},   {680,1,0b01001},   {681,0,0b00101},   {682,0,0b01001},   {683,0,0b10011},   {684,1,0b11001},   {685,1,0b01001},   {686,0,0b00011},   {687,1,0b10001},   {688,1,0b00101},   {689,1,0b01011},   {690,1,0b11111},   {691,1,0b10001},   {693,0,0b00001},   {694,0,0b10101},   {695,1,0b11101},   {696,1,0b00101},   {697,1,0b11011},   {698,1,0b01001},   {699,0,0b00001},   {700,1,0b11001},   {701,0,0b00101},   {702,0,0b10001},   {703,1,0b11111},   {704,0,0b00111},   {705,1,0b01111},   {706,0,0b10011},   {707,1,0b11001},   {708,0,0b00011},   {709,0,0b01101},   {710,0,0b01111},   {711,1,0b11001},   {712,1,0b00101},   {713,1,0b11001},   {714,1,0b01101},   {715,1,0b10001},   {716,1,0b11011},   {717,0,0b00101},   {718,0,0b01111},   {719,1,0b11001},   {720,1,0b10011},   {721,0,0b00101},   {722,1,0b01011},   {723,0,0b00101},   {724,1,0b00111},   {725,1,0b10001},   {726,1,0b11111},   {727,1,0b11101},   {728,1,0b11101},   {731,1,0b11101},   {732,0,0b01001},   {733,0,0b10111},   {734,0,0b11011},   {735,1,0b11011},   {736,1,0b00001},   {737,0,0b00101},   {738,0,0b01011},   {739,1,0b01111},   {740,0,0b10001},   {741,1,0b10101},   {742,1,0b11001},   {743,0,0b00011},   {744,1,0b01001},   {745,1,0b11111},   {746,1,0b00001},   {747,1,0b01111},   {748,0,0b01011},   {749,1,0b01111},   {751,1,0b11101},   {753,1,0b11001},   {754,1,0b11011},   {755,0,0b10011},   {756,1,0b10111},   {757,1,0b11111},   {759,1,0b11011},   {760,1,0b10101},   {761,1,0b01111},   {762,1,0b00101},   {763,0,0b00011},   {764,1,0b10111},   {765,0,0b01101},   {766,1,0b10101},   {767,0,0b00101},   {768,1,0b01111},   {769,0,0b00111},   {770,1,0b10011},   {771,0,0b01011},   {772,1,0b10001},   {773,0,0b00011},   {774,1,0b01011},   {775,0,0b10001},   {776,1,0b10011},   {778,1,0b00011},   {780,1,0b01101},   {784,1,0b00001},   {785,1,0b01011},   {787,1,0b10101},   {790,1,0b10111},   {791,1,0b01111},   {792,1,0b01001},   {793,0,0b10101},   {794,1,0b11011},   {795,1,0b11011},   {797,1,0b01111},   {799,0,0b01101},   {800,1,0b10101},   {801,0,0b01111},   {802,1,0b10101},   {803,0,0b10001},   {804,1,0b11101},   {805,0,0b00001},   {806,1,0b11011},   {807,1,0b01011},   {808,0,0b00001},   {809,1,0b10101},   {810,0,0b00111},   {811,1,0b10011},   {812,1,0b10101},   {813,0,0b00111},   {814,1,0b01011},   {815,0,0b00001},   {816,1,0b00101},   {817,1,0b10011},   {818,1,0b10111},   {819,1,0b00101},   {820,0,0b11101},   {821,1,0b11101},   {822,0,0b01011},   {823,0,0b01011},   {824,1,0b11001},   {825,1,0b00101},   {826,0,0b00011},   {827,1,0b01101},   {828,1,0b00001},   {829,0,0b00001},   {830,0,0b01101},   {831,0,0b10101},   {832,1,0b10111},   {833,0,0b10111},   {834,1,0b10111},   {835,1,0b10111},   {836,1,0b00111},   {837,0,0b00101},   {838,0,0b00101},   {839,1,0b11011},   {840,1,0b00001},   {841,1,0b00111},   {842,0,0b00001},   {843,0,0b00011},   {844,1,0b00101},   {845,1,0b00011},   {846,0,0b10001},   {847,1,0b11101},   {848,0,0b01111},   {849,1,0b10001},   {850,0,0b11011},   {851,1,0b11011},   {852,1,0b11011},   {854,1,0b01111},   {855,1,0b11111},   {856,0,0b01101},   {857,0,0b01111},   {858,0,0b10001},   {859,1,0b11011},   {860,0,0b10011},   {861,1,0b11011},   {862,0,0b00001},   {863,1,0b11111},   {864,0,0b00011},   {865,0,0b01011},   {866,1,0b11111},   {867,1,0b00111},   {868,0,0b00001},   {869,1,0b10111},   {870,1,0b11001},   {871,1,0b10101},   {873,0,0b01111},   {874,1,0b10101},   {875,0,0b01011},   {876,1,0b11001},   {877,1,0b01011},   {878,0,0b00001},   {879,1,0b10001},   {880,0,0b00101},   {881,1,0b01001},   {882,0,0b00111},   {883,0,0b01011},   {884,1,0b10011},   {885,0,0b00111},   {886,1,0b10111},   {887,1,0b01111},   {888,0,0b10001},   {889,1,0b11101},   {890,1,0b01011},   {891,0,0b00011},   {892,1,0b10001},   {893,0,0b01011},   {894,1,0b11011},   {895,0,0b00011},   {896,1,0b01011},   {897,1,0b00011},   {898,0,0b00111},   {899,1,0b01111},   {900,0,0b11011},   {901,1,0b11101},   {902,0,0b01001},   {903,1,0b01111},   {904,0,0b01011},   {905,0,0b01101},   {906,0,0b10011},   {907,1,0b11111},   {908,0,0b00111},   {909,1,0b10101},   {910,1,0b11101},   {911,1,0b00001},   {912,0,0b00001},   {913,1,0b11001},   {914,0,0b01001},   {915,1,0b10011},   {916,0,0b00111},   {917,0,0b00111},   {918,0,0b10001},   {919,1,0b10011},   {920,0,0b01111},   {921,0,0b10001},   {922,1,0b11111},   {923,1,0b00111},   {924,1,0b11011},   {925,1,0b00001},   {926,0,0b00001},   {927,0,0b11011},   {928,1,0b11111},   {929,0,0b00101},   {930,1,0b10111},   {931,0,0b00001},   {932,0,0b01111},   {933,1,0b11101},   {934,0,0b01001},   {935,1,0b10101},   {936,1,0b00101},   {937,0,0b01011},   {938,1,0b10101},   {939,1,0b00001},   {940,1,0b00011},   {941,0,0b00011},   {942,1,0b01101},   {943,0,0b10011},   {944,1,0b11111},   {945,1,0b00001},   {946,0,0b01101},   {947,0,0b10001},   {948,1,0b11111},   {949,1,0b01111},   {950,1,0b11011},   {951,0,0b10011},   {952,0,0b11001},   {953,1,0b11011},   {954,1,0b11001},   {955,1,0b00101},   {956,0,0b01101},   {957,0,0b10001},   {958,1,0b11101},   {959,0,0b01101},   {960,0,0b10111},   {961,1,0b11011},   {962,0,0b00101},   {963,1,0b01001},   {964,0,0b10111},   {965,1,0b11001},   {966,1,0b10011},   {967,0,0b11011},   {968,1,0b11101},   {969,1,0b01111},   {970,0,0b00011},   {971,1,0b01101},   {972,1,0b00011},   {973,1,0b10011},   {974,1,0b01001},   {975,1,0b00111},   {976,1,0b00001},   {979,1,0b11101},   {980,0,0b00101},   {981,1,0b01101},   {982,1,0b10101},   {983,1,0b11001},   {986,1,0b01111},   {987,0,0b00111},   {988,0,0b10111},   {989,1,0b11011},   {990,1,0b00111},   {991,1,0b00111},   {992,0,0b00001},   {993,1,0b00001},   {994,1,0b10011},   {995,0,0b01011},   {996,1,0b11011},   {997,1,0b11011},   {1002,0,0b00011},   {1003,1,0b10111},   {1004,0,0b00001},   {1005,0,0b00001},   {1006,0,0b00101},   {1007,0,0b00111},   {1008,1,0b10011},   {1009,1,0b01001},   {1010,0,0b01011},   {1011,1,0b11001},   {1012,1,0b00111},   {1013,0,0b01111},   {1014,1,0b11101},   {1015,1,0b10001},   {1016,0,0b00111},   {1017,0,0b01111},   {1018,0,0b10001},   {1019,0,0b10101},   {1020,1,0b10111},   {1021,0,0b10011},   {1022,0,0b10111},   {1023,0,0b11011},   {1024,1,0b11101},   {1025,1,0b11101},   {1026,1,0b10111},   {1027,1,0b10001},   {1028,1,0b01001},   {1029,0,0b00101},   {1030,1,0b10111},   {1031,1,0b00001},   {1032,0,0b00101},   {1033,1,0b00101},   {1034,0,0b10011},   {1035,1,0b11011},   {1036,0,0b01111},   {1037,0,0b10101},   {1038,0,0b11001},   {1039,1,0b11111},   {1040,1,0b00101},   {1041,1,0b11101},   {1042,1,0b10011},   {1043,1,0b11011},   {1044,0,0b00101},   {1045,1,0b01001},   {1046,1,0b01101},   {1047,1,0b01001},   {1048,0,0b01101},   {1049,1,0b11101},   {1050,1,0b10111},   {1051,1,0b11101},   {1052,0,0b00101},   {1053,0,0b01001},   {1054,1,0b01011},   {1055,0,0b01001},   {1056,0,0b10001},   {1057,1,0b10111},   {1058,0,0b01101},   {1059,1,0b10011},   {1060,0,0b00011},   {1061,1,0b11101},   {1062,1,0b11001},   {1063,1,0b00101},   {1064,0,0b10111},   {1065,1,0b11011},   {1066,0,0b10101},   {1067,1,0b11011},   {1068,1,0b01101},   {1069,1,0b00001},   {1070,1,0b11001},   {1071,1,0b01011},   {1072,1,0b10111},   {1073,1,0b11111},   {1074,1,0b11111},   {1075,0,0b01111},   {1076,0,0b10011},   {1077,1,0b11111},   {1078,1,0b11101},   {1079,0,0b01001},   {1080,1,0b11111},   {1081,1,0b11011},   {1082,1,0b01011},   {1083,0,0b00011},   {1084,1,0b00111},   {1085,1,0b10111},   {1086,1,0b00011},   {1087,1,0b01011},   {1088,0,0b00111},   {1089,0,0b01101},   {1090,0,0b10001},   {1091,1,0b11001},   {1092,1,0b00101},   {1093,1,0b00101},   {1094,1,0b10001},   {1095,0,0b00011},   {1096,1,0b01001},   {1097,1,0b10001},   {1098,1,0b00011},   {1099,1,0b10001},   {1100,1,0b01101},   {1101,0,0b00011},   {1102,1,0b11101},   {1103,0,0b01001},   {1104,0,0b01101},   {1105,1,0b10111},   {1106,0,0b01101},   {1107,0,0b10111},   {1108,1,0b10111},   {1109,1,0b11111},   {1111,1,0b01001},   {1112,1,0b11101},   {1113,1,0b11111},   {1114,0,0b00101},   {1115,1,0b01001},   {1118,0,0b01001},   {1119,0,0b10001},   {1120,1,0b10111},   {1121,1,0b10111},   {1122,0,0b00001},   {1123,1,0b10101},   {1124,0,0b00011},   {1125,1,0b10101},   {1126,1,0b10001},   {1127,1,0b00111},   {1128,1,0b10101},   {1129,1,0b00011},   {1130,1,0b01101},   {1131,1,0b10011},   {1132,1,0b01111}};
            AssertStoreContents(s, store, occupieds_pos, checks);
        }

        s.ResizeInfixStore(store, false);

        SUBCASE("contract") {
            const std::vector<uint32_t> occupieds_pos = {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 29, 31, 34, 36, 37, 41, 47, 48, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 99, 100, 102, 104, 105, 106, 108, 110, 112, 113, 115, 117, 118, 119, 120, 122, 123, 127, 128, 129, 130, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 156, 157, 159, 160, 161, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 183, 184, 187, 197, 198, 200, 202, 203, 204, 206, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 255, 257, 259, 260, 261, 262, 264, 268, 269, 270, 272, 273, 275, 276, 278, 280, 282, 284, 285, 286, 289, 293, 295, 296, 297, 298, 299, 300, 302, 303, 305, 306, 307, 312, 314, 316, 317, 318, 319, 321, 323, 324, 326, 327, 328, 329, 330, 331, 335, 337, 338, 340, 342, 343, 344, 347, 348, 350, 351, 352, 354, 358, 359, 360, 362, 364, 368, 369, 371, 375, 376, 377, 378, 379, 380, 381, 382, 384, 386, 391, 392, 393, 395, 396, 398, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 423, 424, 427, 428, 429, 431, 433, 434, 435, 438, 439, 442, 444, 445, 449, 450, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 466, 467, 468, 470, 471, 473, 477, 478, 479, 480, 484, 486, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 508, 509, 510, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 526, 528, 531, 532, 534, 536, 537, 538, 541, 542, 543, 545, 548, 549, 550, 553, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 572, 574, 576, 578, 579, 582, 584, 585, 588, 589, 591, 595, 599, 602, 603, 604, 605, 607, 608, 611, 612, 614, 616, 619, 620, 621, 622, 623, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 642, 644, 646, 647, 649, 650, 651, 652, 653, 656, 657, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 675, 678, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 694, 695, 697, 698, 703, 704, 708, 709, 711, 713, 714, 715, 716, 718, 720, 722, 723, 724, 725, 727, 728, 730, 732, 733, 734, 735, 737, 738, 739, 741, 742, 743, 745, 746, 748, 749, 750, 752, 753, 754, 758, 759, 760, 761, 766, 768, 771, 772, 773, 775, 776, 780, 781, 782, 783, 784, 788, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 815, 816, 817, 818, 819, 821, 826, 827, 828, 830, 833, 834, 835, 836, 838, 840, 842, 847, 849, 850, 851, 854, 856, 858, 860, 862, 863, 865, 868, 869, 871, 874, 875, 876, 877, 878, 879, 881, 884, 885, 886, 887, 890, 891, 893, 895, 896, 897, 898, 899, 905, 906, 907, 908, 909, 910, 911, 913, 915, 916, 918, 919, 920, 922, 923, 927, 929, 930, 931, 934, 936, 937, 938, 939, 941, 942, 945, 946, 947, 948, 950, 951, 952, 953, 956, 958, 959, 960, 961, 963, 964, 965, 967, 968, 971, 972, 973, 974, 975, 976, 978, 980, 981, 983, 984, 985, 986, 987, 990, 991, 992, 993, 994, 999, 1000, 1003, 1004, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1022};
            const std::vector<std::tuple<uint32_t, bool, uint64_t>> checks = {{  1,1,0b11111},   {  2,1,0b11111},   {  3,1,0b01001},   {  4,1,0b11111},   {  5,0,0b00001},   {  6,0,0b00111},   {  7,1,0b11111},   {  8,0,0b00011},   {  9,0,0b00101},   { 10,1,0b11101},   { 11,1,0b01011},   { 12,0,0b00001},   { 13,1,0b01011},   { 14,1,0b10111},   { 15,1,0b10001},   { 16,1,0b00001},   { 17,0,0b01101},   { 18,1,0b10111},   { 19,1,0b01001},   { 20,1,0b01011},   { 21,1,0b00111},   { 22,0,0b00111},   { 23,0,0b10101},   { 24,0,0b11011},   { 25,1,0b11101},   { 26,0,0b00001},   { 27,0,0b01001},   { 28,1,0b10101},   { 29,0,0b10101},   { 30,1,0b11001},   { 31,0,0b10011},   { 32,1,0b11011},   { 33,1,0b00011},   { 34,1,0b10101},   { 35,0,0b00001},   { 36,1,0b01001},   { 37,1,0b01011},   { 38,0,0b00011},   { 39,1,0b00011},   { 40,1,0b00001},   { 43,1,0b00001},   { 49,0,0b10001},   { 50,1,0b11101},   { 51,1,0b11001},   { 52,1,0b11101},   { 55,0,0b01101},   { 56,1,0b01111},   { 57,1,0b01101},   { 58,0,0b01111},   { 59,1,0b10111},   { 60,1,0b01101},   { 61,0,0b10011},   { 62,1,0b11101},   { 63,0,0b00001},   { 64,1,0b01111},   { 65,1,0b01101},   { 66,1,0b11101},   { 67,0,0b00101},   { 68,1,0b01001},   { 69,1,0b10001},   { 70,1,0b10101},   { 71,0,0b11011},   { 72,0,0b11011},   { 73,1,0b11111},   { 74,1,0b11011},   { 75,1,0b11011},   { 76,0,0b10011},   { 77,0,0b10111},   { 78,1,0b11111},   { 79,1,0b10111},   { 81,1,0b00111},   { 82,1,0b11011},   { 83,0,0b00111},   { 84,1,0b10111},   { 85,1,0b01011},   { 86,1,0b11001},   { 87,0,0b00011},   { 88,0,0b00101},   { 89,1,0b01101},   { 90,1,0b11001},   { 91,1,0b11001},   { 92,0,0b10001},   { 93,1,0b10011},   { 94,1,0b11111},   { 95,1,0b00101},   { 96,1,0b01111},   { 97,1,0b01011},   { 98,1,0b00011},   { 99,1,0b11001},   {100,0,0b00011},   {101,0,0b00011},   {102,0,0b00101},   {103,1,0b01111},   {104,1,0b00111},   {105,1,0b01011},   {106,0,0b00001},   {107,0,0b00111},   {108,1,0b11001},   {109,0,0b00001},   {110,0,0b11101},   {111,1,0b11101},   {112,1,0b00011},   {113,1,0b11111},   {114,1,0b10001},   {115,1,0b11111},   {116,0,0b00101},   {117,1,0b01111},   {118,1,0b11011},   {119,1,0b01101},   {120,1,0b01011},   {121,1,0b00011},   {122,1,0b01101},   {123,1,0b00011},   {124,0,0b00101},   {125,0,0b01111},   {126,1,0b11101},   {127,1,0b01101},   {128,1,0b11001},   {129,0,0b01001},   {130,1,0b11011},   {131,1,0b01111},   {133,0,0b10011},   {134,1,0b11101},   {135,0,0b00001},   {136,0,0b01111},   {137,1,0b10001},   {138,1,0b11011},   {139,0,0b00001},   {140,1,0b11011},   {141,1,0b01111},   {142,1,0b00111},   {143,0,0b01011},   {144,1,0b11101},   {145,1,0b10101},   {146,1,0b00101},   {147,1,0b00111},   {148,1,0b01001},   {150,0,0b10101},   {151,1,0b11001},   {152,0,0b01101},   {153,1,0b11101},   {154,0,0b01001},   {155,1,0b01011},   {156,1,0b11001},   {157,1,0b01111},   {158,1,0b01011},   {159,1,0b11111},   {161,0,0b00111},   {162,1,0b10001},   {164,0,0b10011},   {165,0,0b11101},   {166,1,0b11111},   {167,0,0b01001},   {168,1,0b10001},   {169,0,0b00001},   {170,0,0b01011},   {171,1,0b11001},   {172,1,0b11111},   {173,1,0b01011},   {174,1,0b01011},   {175,1,0b00101},   {176,1,0b10011},   {177,0,0b01011},   {178,0,0b11001},   {179,1,0b11111},   {180,1,0b00101},   {181,1,0b11011},   {182,1,0b10001},   {183,1,0b01011},   {184,1,0b00111},   {185,1,0b11001},   {186,0,0b01101},   {187,1,0b01111},   {188,1,0b11101},   {189,0,0b00011},   {190,0,0b01011},   {191,1,0b10011},   {192,1,0b01101},   {193,1,0b11001},   {196,1,0b10111},   {207,0,0b00001},   {208,1,0b11011},   {209,1,0b11101},   {210,0,0b01011},   {211,1,0b11001},   {212,0,0b10001},   {213,1,0b11001},   {214,1,0b11111},   {215,1,0b10011},   {216,1,0b00101},   {218,0,0b00001},   {219,0,0b00011},   {220,1,0b11101},   {221,1,0b11101},   {222,1,0b01111},   {223,1,0b10101},   {224,0,0b00101},   {225,0,0b00111},   {226,1,0b00111},   {227,1,0b10001},   {228,1,0b01101},   {229,0,0b01011},   {230,1,0b11101},   {231,1,0b11101},   {232,0,0b00011},   {233,1,0b01001},   {234,1,0b10111},   {235,0,0b01001},   {236,1,0b10101},   {237,1,0b01111},   {238,0,0b01101},   {239,1,0b10011},   {240,0,0b10101},   {241,0,0b10101},   {242,1,0b11101},   {243,1,0b00101},   {244,0,0b00001},   {245,1,0b11011},   {246,1,0b11111},   {247,1,0b01111},   {248,0,0b00011},   {249,1,0b10111},   {250,1,0b10011},   {251,1,0b01001},   {252,1,0b11101},   {253,1,0b01111},   {254,0,0b10111},   {255,1,0b11011},   {256,0,0b01011},   {257,1,0b11001},   {258,0,0b01011},   {259,0,0b11011},   {260,1,0b11111},   {261,1,0b01101},   {262,0,0b01101},   {263,1,0b10101},   {264,0,0b01011},   {265,0,0b01011},   {266,1,0b11001},   {267,0,0b01011},   {268,1,0b10111},   {269,1,0b11111},   {270,0,0b00101},   {271,0,0b01101},   {272,0,0b10101},   {273,1,0b11101},   {274,1,0b00011},   {275,1,0b01011},   {276,1,0b00111},   {277,0,0b01101},   {278,1,0b10111},   {279,1,0b11001},   {280,1,0b11111},   {281,0,0b00011},   {282,0,0b10011},   {283,1,0b10101},   {284,1,0b10011},   {285,0,0b10101},   {286,1,0b11001},   {287,1,0b01101},   {288,1,0b01001},   {289,1,0b10011},   {290,1,0b01111},   {291,0,0b10001},   {292,1,0b10101},   {293,1,0b11111},   {294,1,0b10001},   {295,1,0b10111},   {296,0,0b00011},   {297,0,0b11101},   {298,1,0b11111},   {299,1,0b11011},   {300,0,0b01101},   {301,1,0b01111},   {302,1,0b00011},   {303,0,0b00111},   {304,0,0b01011},   {305,0,0b10111},   {306,1,0b11001},   {307,0,0b10001},   {308,1,0b10001},   {309,1,0b01111},   {310,0,0b01101},   {311,0,0b10001},   {312,0,0b11011},   {313,1,0b11111},   {314,1,0b01011},   {315,1,0b00101},   {316,1,0b01001},   {317,1,0b00001},   {318,0,0b11001},   {319,1,0b11101},   {320,1,0b01001},   {321,0,0b10001},   {322,1,0b10101},   {323,1,0b00001},   {324,0,0b01101},   {325,1,0b11111},   {326,0,0b00001},   {327,1,0b01011},   {328,0,0b01011},   {329,1,0b11001},   {330,1,0b00101},   {331,0,0b10011},   {332,1,0b11111},   {333,0,0b01101},   {334,1,0b10111},   {335,1,0b00101},   {336,0,0b10011},   {337,1,0b11111},   {338,1,0b10001},   {339,1,0b00011},   {340,0,0b00011},   {341,1,0b10011},   {342,1,0b01001},   {343,0,0b10101},   {344,0,0b11001},   {345,0,0b11011},   {346,1,0b11011},   {347,0,0b10001},   {348,1,0b11101},   {349,1,0b01111},   {350,1,0b11001},   {351,1,0b01011},   {352,1,0b11011},   {353,1,0b11011},   {354,1,0b00101},   {355,1,0b11111},   {356,1,0b11111},   {357,1,0b01001},   {358,1,0b01001},   {359,0,0b00001},   {360,0,0b00001},   {361,1,0b00111},   {362,1,0b10011},   {363,1,0b11001},   {364,1,0b01001},   {365,0,0b00111},   {366,0,0b10101},   {367,1,0b10101},   {368,0,0b00001},   {369,1,0b10111},   {370,1,0b00101},   {371,1,0b00001},   {372,1,0b01001},   {373,1,0b11011},   {376,1,0b00111},   {377,0,0b00011},   {378,1,0b00111},   {379,1,0b10101},   {381,1,0b00101},   {383,0,0b00001},   {384,0,0b01111},   {385,1,0b11011},   {387,1,0b11011},   {388,0,0b10011},   {389,1,0b10111},   {390,0,0b11101},   {391,1,0b11111},   {394,0,0b10011},   {395,1,0b11011},   {396,0,0b01101},   {397,1,0b10011},   {398,1,0b11011},   {399,0,0b10001},   {400,1,0b11001},   {401,1,0b10101},   {402,1,0b01001},   {403,1,0b01011},   {404,1,0b10001},   {405,0,0b01011},   {406,1,0b11111},   {407,0,0b00111},   {408,0,0b11001},   {409,1,0b11111},   {411,1,0b10011},   {412,1,0b01001},   {413,0,0b00111},   {414,0,0b01101},   {415,0,0b10001},   {416,1,0b10001},   {417,0,0b00011},   {418,1,0b01101},   {419,0,0b10001},   {420,0,0b10111},   {421,1,0b11101},   {422,1,0b11111},   {423,1,0b10111},   {424,0,0b00101},   {425,0,0b00101},   {426,1,0b01011},   {427,1,0b01001},   {428,0,0b00111},   {429,1,0b01011},   {430,1,0b11101},   {431,1,0b11111},   {432,1,0b10001},   {433,1,0b11111},   {434,1,0b01101},   {435,0,0b10001},   {436,0,0b10011},   {437,1,0b11001},   {438,0,0b11011},   {439,1,0b11101},   {440,0,0b01011},   {441,0,0b01101},   {442,1,0b11001},   {443,0,0b01111},   {444,1,0b10101},   {445,1,0b00011},   {446,1,0b00001},   {447,1,0b01111},   {448,0,0b00001},   {449,1,0b01101},   {450,1,0b00011},   {451,0,0b00101},   {452,0,0b10001},   {453,1,0b10011},   {454,0,0b00101},   {455,1,0b11011},   {456,0,0b00001},   {457,1,0b11101},   {458,1,0b00001},   {459,0,0b10001},   {460,1,0b11101},   {461,0,0b00011},   {462,1,0b01101},   {463,1,0b10001},   {464,0,0b00111},   {465,0,0b10011},   {466,0,0b10111},   {467,0,0b10111},   {468,1,0b11111},   {469,1,0b10001},   {470,1,0b00011},   {471,1,0b00101},   {472,1,0b11101},   {473,1,0b00101},   {474,1,0b01101},   {475,1,0b01111},   {476,1,0b01111},   {477,1,0b10111},   {478,0,0b00001},   {479,1,0b00011},   {480,0,0b00111},   {481,0,0b01111},   {482,0,0b10001},   {483,1,0b10111},   {484,0,0b01111},   {485,1,0b11001},   {486,0,0b01001},   {487,1,0b10001},   {488,1,0b00011},   {489,1,0b00111},   {490,0,0b11011},   {491,1,0b11101},   {492,1,0b11111},   {493,0,0b00111},   {494,0,0b11001},   {495,1,0b11011},   {496,1,0b00111},   {497,0,0b11101},   {498,1,0b11111},   {499,1,0b11101},   {500,1,0b10001},   {501,0,0b10011},   {502,1,0b10111},   {503,0,0b00101},   {504,1,0b11011},   {505,1,0b11011},   {506,1,0b01001},   {507,1,0b01001},   {508,0,0b00001},   {509,1,0b00101},   {510,0,0b00001},   {511,0,0b10111},   {512,1,0b11001},   {513,1,0b11001},   {514,1,0b10101},   {515,0,0b00011},   {516,0,0b00011},   {517,1,0b10001},   {518,1,0b00011},   {519,1,0b00011},   {520,0,0b01111},   {521,1,0b11111},   {522,1,0b00011},   {523,0,0b00011},   {524,0,0b10001},   {525,1,0b11011},   {526,1,0b01101},   {527,0,0b00111},   {528,1,0b10101},   {529,1,0b00111},   {530,0,0b00111},   {531,1,0b10011},   {532,0,0b01001},   {533,1,0b10101},   {534,0,0b01001},   {535,1,0b01111},   {536,0,0b00101},   {537,1,0b10001},   {538,1,0b01011},   {539,1,0b11111},   {540,1,0b00111},   {541,1,0b10111},   {542,0,0b10001},   {543,0,0b10101},   {544,1,0b11111},   {545,0,0b00111},   {546,1,0b10011},   {547,1,0b11111},   {548,1,0b11001},   {549,1,0b00011},   {550,0,0b00001},   {551,0,0b01001},   {552,1,0b10111},   {553,1,0b11001},   {554,0,0b00111},   {555,0,0b10011},   {556,1,0b10101},   {557,0,0b01011},   {558,0,0b10011},   {559,1,0b11111},   {560,0,0b00001},   {561,0,0b10111},   {562,1,0b11001},   {563,0,0b01111},   {564,1,0b10001},   {565,1,0b10101},   {566,0,0b10101},   {567,0,0b11011},   {568,1,0b11101},   {569,1,0b00001},   {570,0,0b01001},   {571,1,0b11011},   {572,1,0b10011},   {573,1,0b01011},   {574,0,0b10111},   {575,1,0b11111},   {576,0,0b00111},   {577,0,0b01011},   {578,0,0b01111},   {579,1,0b11111},   {580,1,0b00001},   {581,0,0b00101},   {582,1,0b01101},   {583,1,0b10101},   {584,1,0b10001},   {585,1,0b00101},   {586,0,0b00111},   {587,1,0b11011},   {588,1,0b01011},   {589,0,0b01011},   {590,1,0b01011},   {591,0,0b10001},   {592,1,0b10111},   {593,1,0b01111},   {594,1,0b10111},   {595,1,0b10111},   {596,1,0b10011},   {597,1,0b00101},   {598,1,0b01011},   {599,1,0b10111},   {600,1,0b01001},   {601,1,0b10011},   {602,1,0b10101},   {603,1,0b00001},   {604,1,0b01111},   {605,1,0b11001},   {606,1,0b00011},   {608,1,0b00111},   {609,1,0b10101},   {612,1,0b00001},   {614,1,0b10111},   {615,0,0b00011},   {616,1,0b10011},   {618,0,0b10101},   {619,1,0b11101},   {620,0,0b10101},   {621,1,0b11001},   {622,1,0b11111},   {626,0,0b01101},   {627,0,0b10001},   {628,1,0b11111},   {630,0,0b01011},   {631,1,0b11001},   {633,0,0b01111},   {634,1,0b10111},   {635,0,0b01001},   {636,1,0b10001},   {637,0,0b00101},   {638,1,0b11001},   {639,0,0b01001},   {640,1,0b11111},   {641,1,0b10101},   {642,0,0b01111},   {643,1,0b10001},   {644,1,0b01101},   {645,0,0b00111},   {646,1,0b01001},   {647,0,0b00101},   {648,0,0b01001},   {649,0,0b10011},   {650,1,0b11001},   {651,1,0b01001},   {652,0,0b00011},   {653,1,0b10001},   {654,1,0b00101},   {655,1,0b01011},   {656,1,0b11111},   {657,1,0b10001},   {658,0,0b00001},   {659,0,0b10101},   {660,1,0b11101},   {661,1,0b00101},   {662,1,0b11011},   {663,1,0b01001},   {664,0,0b00001},   {665,1,0b11001},   {666,0,0b00101},   {667,0,0b10001},   {668,1,0b11111},   {669,0,0b00111},   {670,1,0b01111},   {671,0,0b10011},   {672,1,0b11001},   {673,0,0b00011},   {674,0,0b01101},   {675,0,0b01111},   {676,1,0b11001},   {677,1,0b00101},   {678,1,0b11001},   {679,1,0b01101},   {680,1,0b10001},   {681,1,0b11011},   {682,0,0b00101},   {683,0,0b01111},   {684,1,0b11001},   {685,1,0b10011},   {686,0,0b00101},   {687,1,0b01011},   {688,0,0b00101},   {689,1,0b00111},   {690,1,0b10001},   {691,1,0b11111},   {692,1,0b11101},   {693,1,0b11101},   {694,1,0b11101},   {695,0,0b01001},   {696,0,0b10111},   {697,0,0b11011},   {698,1,0b11011},   {699,1,0b00001},   {700,0,0b00101},   {701,0,0b01011},   {702,1,0b01111},   {703,0,0b10001},   {704,1,0b10101},   {705,1,0b11001},   {706,0,0b00011},   {707,1,0b01001},   {708,1,0b11111},   {709,1,0b00001},   {710,1,0b01111},   {711,0,0b01011},   {712,1,0b01111},   {713,1,0b11101},   {715,1,0b11001},   {716,1,0b11011},   {717,0,0b10011},   {718,1,0b10111},   {719,1,0b11111},   {721,1,0b11011},   {722,1,0b10101},   {723,1,0b01111},   {724,1,0b00101},   {725,0,0b00011},   {726,1,0b10111},   {727,0,0b01101},   {728,1,0b10101},   {729,0,0b00101},   {730,1,0b01111},   {731,0,0b00111},   {732,1,0b10011},   {733,0,0b01011},   {734,1,0b10001},   {735,0,0b00011},   {736,1,0b01011},   {737,0,0b10001},   {738,1,0b10011},   {739,1,0b00011},   {741,1,0b01101},   {745,1,0b00001},   {746,1,0b01011},   {748,1,0b10101},   {749,1,0b10111},   {750,1,0b01111},   {751,1,0b01001},   {752,0,0b10101},   {753,1,0b11011},   {754,1,0b11011},   {755,1,0b01111},   {756,0,0b01101},   {757,1,0b10101},   {758,0,0b01111},   {759,1,0b10101},   {760,0,0b10001},   {761,1,0b11101},   {762,0,0b00001},   {763,1,0b11011},   {764,1,0b01011},   {765,0,0b00001},   {766,1,0b10101},   {767,0,0b00111},   {768,1,0b10011},   {769,1,0b10101},   {770,0,0b00111},   {771,1,0b01011},   {772,0,0b00001},   {773,1,0b00101},   {774,1,0b10011},   {775,1,0b10111},   {776,1,0b00101},   {777,0,0b11101},   {778,1,0b11101},   {779,0,0b01011},   {780,0,0b01011},   {781,1,0b11001},   {782,1,0b00101},   {783,0,0b00011},   {784,1,0b01101},   {785,1,0b00001},   {786,0,0b00001},   {787,0,0b01101},   {788,0,0b10101},   {789,1,0b10111},   {790,0,0b10111},   {791,1,0b10111},   {792,1,0b10111},   {793,1,0b00111},   {794,0,0b00101},   {795,0,0b00101},   {796,1,0b11011},   {797,1,0b00001},   {798,1,0b00111},   {799,0,0b00001},   {800,0,0b00011},   {801,1,0b00101},   {802,1,0b00011},   {803,0,0b10001},   {804,1,0b11101},   {805,0,0b01111},   {806,1,0b10001},   {807,0,0b11011},   {808,1,0b11011},   {809,1,0b11011},   {810,1,0b01111},   {811,1,0b11111},   {812,0,0b01101},   {813,0,0b01111},   {814,0,0b10001},   {815,1,0b11011},   {816,0,0b10011},   {817,1,0b11011},   {818,0,0b00001},   {819,1,0b11111},   {820,0,0b00011},   {821,0,0b01011},   {822,1,0b11111},   {823,1,0b00111},   {824,0,0b00001},   {825,1,0b10111},   {826,1,0b11001},   {827,1,0b10101},   {828,0,0b01111},   {829,1,0b10101},   {830,0,0b01011},   {831,1,0b11001},   {832,1,0b01011},   {833,0,0b00001},   {834,1,0b10001},   {835,0,0b00101},   {836,1,0b01001},   {837,0,0b00111},   {838,0,0b01011},   {839,1,0b10011},   {840,0,0b00111},   {841,1,0b10111},   {842,1,0b01111},   {843,0,0b10001},   {844,1,0b11101},   {845,1,0b01011},   {846,0,0b00011},   {847,1,0b10001},   {848,0,0b01011},   {849,1,0b11011},   {850,0,0b00011},   {851,1,0b01011},   {852,1,0b00011},   {853,0,0b00111},   {854,1,0b01111},   {855,0,0b11011},   {856,1,0b11101},   {857,0,0b01001},   {858,1,0b01111},   {859,0,0b01011},   {860,0,0b01101},   {861,0,0b10011},   {862,1,0b11111},   {863,0,0b00111},   {864,1,0b10101},   {865,1,0b11101},   {866,1,0b00001},   {867,0,0b00001},   {868,1,0b11001},   {869,0,0b01001},   {870,1,0b10011},   {871,0,0b00111},   {872,0,0b00111},   {873,0,0b10001},   {874,1,0b10011},   {875,0,0b01111},   {876,0,0b10001},   {877,1,0b11111},   {878,1,0b00111},   {879,1,0b11011},   {880,1,0b00001},   {881,0,0b00001},   {882,0,0b11011},   {883,1,0b11111},   {884,0,0b00101},   {885,1,0b10111},   {886,0,0b00001},   {887,0,0b01111},   {888,1,0b11101},   {889,0,0b01001},   {890,1,0b10101},   {891,1,0b00101},   {892,0,0b01011},   {893,1,0b10101},   {894,1,0b00001},   {895,1,0b00011},   {896,0,0b00011},   {897,1,0b01101},   {898,0,0b10011},   {899,1,0b11111},   {900,1,0b00001},   {901,0,0b01101},   {902,0,0b10001},   {903,1,0b11111},   {904,1,0b01111},   {905,1,0b11011},   {906,0,0b10011},   {907,0,0b11001},   {908,1,0b11011},   {909,1,0b11001},   {910,1,0b00101},   {911,0,0b01101},   {912,0,0b10001},   {913,1,0b11101},   {914,0,0b01101},   {915,0,0b10111},   {916,1,0b11011},   {917,0,0b00101},   {918,1,0b01001},   {919,0,0b10111},   {920,1,0b11001},   {921,1,0b10011},   {922,0,0b11011},   {923,1,0b11101},   {924,1,0b01111},   {925,0,0b00011},   {926,1,0b01101},   {927,1,0b00011},   {928,1,0b10011},   {929,1,0b01001},   {930,1,0b00111},   {931,1,0b00001},   {932,1,0b11101},   {933,0,0b00101},   {934,1,0b01101},   {935,1,0b10101},   {936,1,0b11001},   {937,1,0b01111},   {938,0,0b00111},   {939,0,0b10111},   {940,1,0b11011},   {941,1,0b00111},   {942,1,0b00111},   {943,0,0b00001},   {944,1,0b00001},   {945,1,0b10011},   {946,0,0b01011},   {947,1,0b11011},   {948,1,0b11011},   {949,0,0b00011},   {950,1,0b10111},   {951,0,0b00001},   {952,0,0b00001},   {953,0,0b00101},   {954,0,0b00111},   {955,1,0b10011},   {956,1,0b01001},   {957,0,0b01011},   {958,1,0b11001},   {959,1,0b00111},   {960,0,0b01111},   {961,1,0b11101},   {962,1,0b10001},   {963,0,0b00111},   {964,0,0b01111},   {965,0,0b10001},   {966,0,0b10101},   {967,1,0b10111},   {968,0,0b10011},   {969,0,0b10111},   {970,0,0b11011},   {971,1,0b11101},   {972,1,0b11101},   {973,1,0b10111},   {974,1,0b10001},   {975,1,0b01001},   {976,0,0b00101},   {977,1,0b10111},   {978,1,0b00001},   {979,0,0b00101},   {980,1,0b00101},   {981,0,0b10011},   {982,1,0b11011},   {983,0,0b01111},   {984,0,0b10101},   {985,0,0b11001},   {986,1,0b11111},   {987,1,0b00101},   {988,1,0b11101},   {989,1,0b10011},   {990,1,0b11011},   {991,0,0b00101},   {992,1,0b01001},   {993,1,0b01101},   {994,1,0b01001},   {995,0,0b01101},   {996,1,0b11101},   {997,1,0b10111},   {998,1,0b11101},   {999,0,0b00101},   {1000,0,0b01001},   {1001,1,0b01011},   {1002,0,0b01001},   {1003,0,0b10001},   {1004,1,0b10111},   {1005,0,0b01101},   {1006,1,0b10011},   {1007,0,0b00011},   {1008,1,0b11101},   {1009,1,0b11001},   {1010,1,0b00101},   {1011,0,0b10111},   {1012,1,0b11011},   {1013,0,0b10101},   {1014,1,0b11011},   {1015,1,0b01101},   {1016,1,0b00001},   {1017,1,0b11001},   {1018,1,0b01011},   {1019,1,0b10111},   {1020,1,0b11111},   {1021,1,0b11111},   {1022,0,0b01111},   {1023,0,0b10011},   {1024,1,0b11111},   {1025,1,0b11101},   {1026,0,0b01001},   {1027,1,0b11111},   {1028,1,0b11011},   {1029,1,0b01011},   {1030,0,0b00011},   {1031,1,0b00111},   {1032,1,0b10111},   {1033,1,0b00011},   {1034,1,0b01011},   {1035,0,0b00111},   {1036,0,0b01101},   {1037,0,0b10001},   {1038,1,0b11001},   {1039,1,0b00101},   {1040,1,0b00101},   {1041,1,0b10001},   {1042,0,0b00011},   {1043,1,0b01001},   {1044,1,0b10001},   {1045,1,0b00011},   {1046,1,0b10001},   {1047,1,0b01101},   {1048,0,0b00011},   {1049,1,0b11101},   {1050,0,0b01001},   {1051,0,0b01101},   {1052,1,0b10111},   {1053,0,0b01101},   {1054,0,0b10111},   {1055,1,0b10111},   {1056,1,0b11111},   {1057,1,0b01001},   {1058,1,0b11101},   {1059,1,0b11111},   {1060,0,0b00101},   {1061,1,0b01001},   {1062,0,0b01001},   {1063,0,0b10001},   {1064,1,0b10111},   {1065,1,0b10111},   {1066,0,0b00001},   {1067,1,0b10101},   {1068,0,0b00011},   {1069,1,0b10101},   {1070,1,0b10001},   {1071,1,0b00111},   {1072,1,0b10101},   {1073,1,0b00011},   {1074,1,0b01101},   {1075,1,0b10011},   {1076,1,0b01111}};
            AssertStoreContents(s, store, occupieds_pos, checks);
        }
    }

private:
    static void AssertStoreContents(const Diva<false>& s, const Diva<false>::InfixStore& store,
                                    const std::vector<uint32_t>& occupieds_pos,
                                    const std::vector<std::tuple<uint32_t, bool, uint64_t>>& checks) {
        REQUIRE_NE(store.ptr, nullptr);
        REQUIRE_EQ(store.GetElemCount(), checks.size());
        const uint32_t *popcnts = reinterpret_cast<const uint32_t *>(store.ptr);
        const uint64_t *occupieds = store.ptr + 1;
        const uint64_t *runends = store.ptr + 1 + Diva<false>::infix_store_target_size / 64;
        uint32_t ind = 0;
        for (uint32_t i = 0; i < Diva<false>::infix_store_target_size; i++) {
            if (ind < occupieds_pos.size() && i == occupieds_pos[ind]) {
                REQUIRE_EQ(get_bitmap_bit(occupieds, i), 1);
                ind++;
            }
            else 
                REQUIRE_EQ(get_bitmap_bit(occupieds, i), 0);
        }

        const uint32_t total_size = s.scaled_sizes_[store.GetSizeGrade()];
        ind = 0;
        uint32_t runend_count = 0;
        for (int32_t i = 0; i < total_size; i++) {
            const uint64_t slot = s.GetSlot(store, i);
            if (ind < checks.size()) {
                const auto [pos, runend, value] = checks[ind];
                if (i == pos) {
                    REQUIRE_EQ(value, slot);
                    REQUIRE_EQ(get_bitmap_bit(runends, i), runend);
                    runend_count += runend;
                    ind++;
                }
                else {
                    REQUIRE_EQ(slot, 0ULL);
                    REQUIRE_EQ(get_bitmap_bit(runends, i), 0);
                }
            }
            else {
                REQUIRE_EQ(slot, 0ULL);
                REQUIRE_EQ(get_bitmap_bit(runends, i), 0);
            }
        }
        REQUIRE_EQ(occupieds_pos.size(), runend_count);

        uint32_t check_popcnts[2] = {};
        for (int32_t i = 0; i < Diva<false>::infix_store_target_size / 128; i++) {
            check_popcnts[0] += __builtin_popcountll(occupieds[i]);
            check_popcnts[1] += __builtin_popcountll(runends[i]);
        }
        REQUIRE_EQ(popcnts[0], check_popcnts[0]);
        REQUIRE_EQ(popcnts[1], check_popcnts[1]);
    }

    static void PrintStore(const Diva<false>& s, const Diva<false>::InfixStore& store) {
        const uint32_t size_grade = store.GetSizeGrade();
        const uint32_t *popcnts = reinterpret_cast<const uint32_t *>(store.ptr);
        const uint64_t *occupieds = store.ptr + 1;
        const uint64_t *runends = store.ptr + 1 + Diva<false>::infix_store_target_size / 64;

        std::cerr << "is_partial=" << store.IsPartialKey() << " invalid_bits=" << store.GetInvalidBits();
        std::cerr << " size_grade=" << size_grade << " elem_count=" << store.GetElemCount() << std::endl;
        std::cerr << "popcnts=[" << popcnts[0] << ", " << popcnts[1] << ']' << std::endl;
        std::cerr << "occupieds: ";
        for (int32_t i = 0; i < Diva<false>::infix_store_target_size; i++) {
            if ((occupieds[i / 64] >> (i % 64)) & 1ULL)
                std::cerr << i << ", ";
        }
        std::cerr << std::endl << "runends + slots:" << std::endl;;
        int32_t cnt = 0;
        for (int32_t i = 0; i < s.scaled_sizes_[size_grade]; i++) {
            const uint64_t value = s.GetSlot(store, i);
            if (value == 0)
                continue;
            std::cerr << '{' << std::setfill(' ') << std::setw(3) << i;
            std::cerr << ',' << ((runends[i / 64] >> (i % 64)) & 1ULL) << ",0b";
            for (int32_t j = s.infix_size_ - 1; j >= 0; j--)
                std::cerr << ((value >> (j % 64)) & 1ULL);
            std::cerr << "},   ";
            if (cnt % 8 == 7)
                std::cerr << std::endl;
            cnt++;
        }
        std::cerr << std::endl;
    }
};

TEST_SUITE("infix_store") {
    TEST_CASE("allocation") {
        InfixStoreTests::Allocation();
    }

    TEST_CASE("shifting slots") {
        InfixStoreTests::ShiftingSlots();
    }

    TEST_CASE("shifting runends") {
        InfixStoreTests::ShiftingRunends();
    }

    TEST_CASE("insert") {
        InfixStoreTests::InsertRaw();
    }

    TEST_CASE("delete") {
        SUBCASE("delete raw") {
            InfixStoreTests::DeleteRaw();
        }
        SUBCASE("get longest matching infix size") {
            InfixStoreTests::GetLongestMatchingInfixSize();
        }
    }

    TEST_CASE("get infix list") {
        InfixStoreTests::GetInfixList();
    }

    TEST_CASE("load infix list") {
        InfixStoreTests::LoadInfixList();
    }

    TEST_CASE("point query") {
        InfixStoreTests::PointQuery();
    }

    TEST_CASE("range query") {
        InfixStoreTests::RangeQuery();
    }

    TEST_CASE("shrink infix size") {
        InfixStoreTests::ShrinkInfixSize();
    }

    TEST_CASE("resize") {
        InfixStoreTests::Resize();
    }
}

